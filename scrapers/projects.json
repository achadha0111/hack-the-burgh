[
  {
    "hackathon_name": "ChariTech", 
    "project_description": "Inspiration\nThe idea of building a data dashboard whoch would be used to target weak areas and reproduce best practice in order to help people learn better in developing countries.\nWhat it does\nWe use the simple idea of the size of circles indicating how well a centre is performing for a given metric. We have made the interface very simple where you can choose to nalyse centres individually or together and then will see a dashboard of various metrics for them averaged over the last month. By clicking on a metric you can see its breakdown over several months.\nHow we built it\nWe mde this a java applet so that it can run on any platform and used JavaFX to create the GUI\nChallenges we ran into\nCollaborating over GitHub for the first time caused many issues in the beginning. We also had trouble designing a GUI and data analysis algorithms before the processing of inputs was complete.\nAccomplishments that we're proud of\nWe are proud to hve (hopefully) created something which works and provides meaningful information to the user. We hope that the practices used in most of our design are scalable and could be built upon easily to create a nice finished product.\nWhat we learned\nWe learned how to collaborate over github and also to split work up as a team and communicate with eachother by defining the interfaces between each section before we started the actual code.\nWhat's next for slate2learn\nWe hope that this project will be a basis that can be worked on and developed further in the future. We feel that our simple interface is a good idea as it is very visual and makes it easy to judge how well a centre is performing.", 
    "project_name": "slate2learn Table 9", 
    "project_tags": [
      "java", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/slate2learn"
  }, 
  {
    "hackathon_name": "ChariTech", 
    "project_description": "Inspiration\nWe were inspired by the pitch in the morning briefing. The project seemed perfect for our wide-ranging and typically incompatible programming abilities.\nWhat it does\nThe dashboard: it displays data. Well, hopefully, it will display data before the deadline- currently, it displays a series of empty boxes. \nThere is a login page which lets you log in. We also have a PHP API to get data metrics using Javascript. \nHow we built it\nWell.. Carlos decided that Javascript libraries were off limits. So he started the process of coding graphs and maps from scratch... David was a champ and did all the PHP. Tristram was also a champ and did HTML and CSS. Henry used MySQL and Java to compute metrics from the data.\nI sat there for most of the day trying to help. And I did.. sometimes. \nChallenges we ran into\nCarlos. Just use a library. \nAccomplishments that we're proud of\nThe sidebar is probably the best part of the project. The other stuff comes in at a close second.\nWhat we learned\nCarlos learnt that Javascript libraries are helpful. Everyone else learnt that Carlos should use libraries. \nWhat's next for Slate2Learn Dashboard\nFuture implementations could include machine learning. Perhaps also some graphs.", 
    "project_name": "Slate2Learn Dashboard Table 8", 
    "project_tags": [
      "php", 
      "javascript", 
      "html", 
      "html5", 
      "css3", 
      "css", 
      "java", 
      "python", 
      "mysql", 
      "phpmyadmin", 
      "stack-overflow", 
      "c", 
      "machine-learning"
    ], 
    "project_url": "https://devpost.com/software/slate2learn-dashboard-tbnxwq"
  }, 
  {
    "hackathon_name": "ChariTech", 
    "project_description": "Inspiration\nWe think it is a really good cause and an opportunity to improve while doing something useful. \nWhat it does\nAnalyse data generated by Slate2Learn tablets such as learners' id, session times, incomes etc. and provide easy to comprehend plots both for maintaining and enhancing the learning system.\nHow we built it\nUsing computer magic.\nChallenges we ran into\nThe data was poorly formatted.\nAccomplishments that we're proud of\nWhat we learned\nHow to import CSV files into SQL\nGot more Django experience\nWhat's next for Slate2Learn Dashboard\nAdd more graphs and data", 
    "project_name": "Slate2Learn Dashboard Table 6", 
    "project_tags": [
      "python", 
      "django"
    ], 
    "project_url": "https://devpost.com/software/slate2learn-ycjbdr"
  }, 
  {
    "hackathon_name": "ChariTech", 
    "project_description": "Inspiration\nClassifying fingerprints to help identification\nWhat it does\n**Classifying fingerprint images into five categories: A, L, R, T and W\nHow I built it\nWith Python libraries from sklearn\nChallenges I ran into\nHigh variance and long running time\nAccomplishments that I'm proud of\nPreprocessing images, deploying built-in PCA and Neural Network methods with parameterization to classify images.\nWhat I learned\nSome machine learning techniques and image processing skills\nWhat's next for Fingerprints Classification\nFiner parameterization.", 
    "project_name": "Fingerprints Classification From Table 4", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/fingerprints-classification"
  }, 
  {
    "hackathon_name": "ChariTech", 
    "project_description": "Our code is hosted at http://server.einsteinly.me\nThe log in token for our Jupyter server is einsteinly\nOur whole programme\nimport tensorflow as tf\nimport keras\nimport cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport sklearn\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport pickle\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\n\n# config params\nbatch_size = 50\nepochs = 30\n\ntrain = pickle.load(open('./data.pickle', 'rb'))\nX_train = train['X_train']\nX_test = train['X_test']\ny_train = train['y_train']\ny_test = train['y_test']\n\nmodel = Sequential()\nmodel.add(Conv2D(4, (3, 3), activation='relu', input_shape=(100, 100, 1)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(8, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(16, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(32, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(Dropout(0.4))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(32, activation='softmax'))\nmodel.add(Dense(5, activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\n\nmodel.fit(X_train, y_train, batch_size=batch_size, epochs=epochs, validation_data=(X_test, y_test), shuffle=True)\nresults = model.evaluate(X_test, y_test, batch_size=batch_size)\nprint(results[1])\nmodel.save_weights(\"./output/weights_\" + str(results[1]) + \".convnet\")\n\n\n\nfile = open(\"test.output\",\"w\")\nprint(\"testing model\")\n\n# loading test set\ntest = pickle.load(open('./test.pickle', 'rb'))\nX_test_raw = test[\"X_test_raw\"]\nX_test_raw = np.array(X_test_raw)\nX_test_raw = np.resize(X_test_raw, (X_test_raw.shape[0], X_test_raw.shape[1], X_test_raw.shape[2], 1))   \n\n\ntypes = ['A', 'L', 'R', 'T', 'W']\nresults = model.predict(X_test_raw)\n#print(results)\n\nfor i in range(len(results)):\n    print(\"Prediction for fingerprint \" + str(i + 1) + \" : \" + types[np.argmax(results[i])])\n    file.write(\"Prediction for fingerprint \" + str(i + 1) + \" : \" + types[np.argmax(results[i])] + \"\\n\")\n    for j in range(len(results[i])):\n        print(\"   Probability that it is \"+ types[j] + \" : \" + str(results[i][j]))\n        file.write(\"   Probability that it is \"+ types[j] + \" : \" + str(results[i][j]))\n\nfile.close()", 
    "project_name": "Fingerprint Classification Table 11", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/fingerprint-classification-3jofzq"
  }, 
  {
    "hackathon_name": "ChariTech", 
    "project_description": "Inspiration\nThe Simprints task\nWhat it does\nClassifies finger prints into 5 criteria\nHow we built it\nUsing python\nChallenges we ran into\nExtracting the relevant feature data from the image\nAccomplishments that we're proud of\nIt does better than random\nWhat we learned\nWe learned about neural networks \nWhat's next for Finger Print Classification\nCode\nimport numpy as np\nimport png\nimport os\nfrom sklearn import tree\nimport random\nfrom scipy import ndimage as ndi\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\n\n\ndef construct_nn():\n    model = Sequential()\n    model.add(Dense(units=64, input_dim=32))\n    model.add(Activation('tanh'))\n    model.add(Dense(units=5))\n    model.add(Activation('softmax'))\n    model.compile(optimizer='rmsprop',\n              loss='mse',\n              metrics=['accuracy'])\n    return model\n\n\ndef classify(method='tree'):\n    classifier, predictions, test_labels = train(method)\n    results = compare(test_labels, predictions)\n    print results\n\ndef compare(labels, predicted_labels):\n    correct = sum((1 for i in xrange(len(labels))\n                     if labels[i] == predicted_labels[i]))\n    return correct / float(len(labels))\n\n# this function does stuff\ndef train(method='tree'):\n    image_labels = get_image_labels()\n\n    training_data, training_images, test_data, test_images = get_training_and_test_data()\n    train_labels = images_to_labels(training_images, image_labels)\n    test_labels = images_to_labels(test_images, image_labels)\n    print 'Extracted Training Data'\n    if method == 'tree':\n        classifier = tree.DecisionTreeClassifier()\n        classifier.fit(training_data, train_labels)\n        predictions = classifier.predict(test_data)\n    else:\n        classifier = construct_nn()\n        nn_labels = get_nn_labels(train_labels)\n        classifier.fit(training_data, nn_labels)\n        classifier.save('nn')\n        predictions = classifier.predict(test_data)\n        predictions = format_predictions(predictions)\n\n    return classifier, predictions, test_labels\n\ndef format_predictions(predictions):\n    new_predictions = []\n    for prediction in predictions:\n        new_predictions.append(np.argmax(prediction))\n    return new_predictions\n\n\ndef get_nn_labels(labels):\n    nn_labels = np.zeros((len(labels), 5))\n    for i in xrange(len(labels)):\n        value = labels[i]\n        nn_labels[i, value] = 1\n    return nn_labels \n\ndef images_to_labels(image_list, image_labels):\n    file_names = [image_file.split('/')[-1] for image_file in image_list]\n    labels = [image_labels[file_name] for file_name in file_names]\n    label_converter = {'imageA' : 0, 'imageL' : 1, 'imageR' : 2, 'imageT' : 3, 'imageW' : 4}\n    number_labels = [label_converter[label] for label in labels]\n    return number_labels\n\ndef get_all_image_file_names():\n    outer_dir =  'fingerprintClassification/trainingSet/'\n    labels = ['A', 'L', 'R', 'T', 'W']\n    image_files = [os.path.join(outer_dir, label, file_name)\n                        for label in labels\n                        for file_name in os.listdir(os.path.join(outer_dir, label))\n                        if random.random() > 0]\n    print 'Number of images used:', len(image_files)\n    return image_files\n\ndef get_training_and_test_data():\n    image_files = get_all_image_file_names()\n    np.random.shuffle(image_files)\n    # training_images = image_files[:len(image_files)/2]\n    training_images = image_files\n    # test_images = image_files[len(image_files)/2:]\n    test_images = []\n    training_data = np.array([read_png_file(image_file) for image_file in training_images])\n    test_data = np.array([read_png_file(image_file) for image_file in test_images])\n    return training_data, training_images, test_data, test_images\n\ndef get_image_labels():\n    outer_dir =  'fingerprintClassification/trainingSet/'\n    dict_fingerprints = {}\n    labels = ['A', 'L', 'R', 'T', 'W']\n    for label in labels:\n        image_dir = os.path.join(outer_dir, label)\n        file_names = os.listdir(image_dir)\n\n        for file_name in file_names:\n            dict_fingerprints[file_name] = 'image' + label\n\n    return dict_fingerprints\n\ndef read_png_file(file_name):\n    with open(file_name, 'r') as f:\n        r = png.Reader(f)\n        width, height, values, properties = r.read()\n        image = np.zeros((width, height))\n        row_num = 0\n        for row in values:\n            image[row_num, :] = np.array(row)\n            row_num += 1\n        compressed = get_features(image, 128)\n    return compressed\n\ndef compress(values):\n    grid_size = 1\n    num_vals = 512 / grid_size\n    compressed_vals = np.zeros((num_vals, 512/grid_size))\n    for i in xrange(num_vals):\n        for j in xrange(num_vals):\n            small_grid = values[grid_size*i : (i+1)*grid_size, grid_size*j: grid_size*(j+1)]\n            compressed_vals[i, j] = np.mean(small_grid)\n    compressed_vals = compressed_vals.flatten()\n    return compressed_vals\n\ndef convert_to_binary(image):\n    width = len(image)\n    bin_image = np.zeros((width, width))\n    for i in xrange(width):\n        for j in xrange(width):\n            bin_image[i, j] = (image[i, j] > 144)\n\n    return bin_image\n\n\ndef plot_bin_image(image):\n    image = image.astype(int)\n    file_name = '144.png' % (threshold)\n    plt.imsave(file_name, np.array(image), cmap=cm.gray)\n\ndef get_edges(image):\n    edges = feature.canny(image, sigma=3)\n    return edges\n\ndef get_features(image, grid_size):\n    num_vals = 512 / grid_size\n    vertical = np.zeros((num_vals, num_vals))\n    horizontal = np.zeros((num_vals, num_vals))\n    for i in xrange(num_vals):\n        for j in xrange(num_vals):\n            small_grid = image[grid_size*i : (i+1)*grid_size, grid_size*j: grid_size*(j+1)]\n            vertical[i, j], horizontal[i, j] = calculate_gradient(small_grid)\n    features = np.concatenate([vertical.flatten(), horizontal.flatten()])\n    return features\n\ndef calculate_gradient(image_section):\n    vertical = 0\n    horizontal = 0\n    num_rows = len(image_section)\n    num_cols = len(image_section[0])\n    for row in image_section:\n        for i in xrange(num_rows-1):\n            horizontal += abs(row[i] - row[i+1])\n\n    for column in image_section.T:\n        for i in xrange(len(column)-1):\n            vertical += abs(column[i] - column[i+1])\n    vertical = vertical/float(((num_rows - 1)*(num_cols-1)))\n    horizontal = horizontal/float(((num_rows - 1)*(num_cols-1)))\n    return horizontal, vertical\n\n\n\nif __name__ == '__main__':\n    classify('nn')", 
    "project_name": "Table 4: Finger Print Classification for Simprints", 
    "project_tags": [
      "python", 
      "numpy"
    ], 
    "project_url": "https://devpost.com/software/finger-print-classification"
  }, 
  {
    "hackathon_name": "ChariTech", 
    "project_description": "Inspiration\nThe need for formal identification in countries were it is almost non-existent\nWhat it does\nIt classifies recorded fingerprints to make comparisson quicker\nHow I built it\nUsing python and its machine learning libraries\nChallenges I ran into\nBugs in the code, memory limits\nAccomplishments that I'm proud of\nStrengthening the team bonds\nWhat I learned\nImage processing and machine learning\nWhat's next for Fingerprint Classification\nImprovement of the algorithm using neural networks\nimportant note\nYou should run training.py from command prompt for our file to work", 
    "project_name": "Fingerprint Classification, table 12", 
    "project_tags": [
      "python", 
      "machine-learning"
    ], 
    "project_url": "https://devpost.com/software/fingerprint-classification"
  }, 
  {
    "hackathon_name": "ChariTech", 
    "project_description": "We have created a web interface for donors to see where their money has gone, and motivate them to donate more. \nThis is for the Against Malaria Foundation.", 
    "project_name": "Table 7: Web App for Against Malaria Foundation", 
    "project_tags": [
      "node.js", 
      "html"
    ], 
    "project_url": "https://devpost.com/software/web-app-for-against-malaria-foundation"
  }, 
  {
    "hackathon_name": "ChariTech", 
    "project_description": "Inspiration\nWe chose to help simprints by classifying fingerprints automatically to reduce search times.\nWhat it does\nOur idea was to use machine learning to infer from the training data how to fit images of fingerprints into 5 separate categories.\nHow we built it\nWe used sci-kit learn in python 2.7\nChallenges we ran into\nIndividual pixels are not the best input to a machine learning algorithm, ideally there would be lots of preprocessing and dimensionality reduction, but we didn't have the time or expertise to do this.\nAccomplishments that we're proud of\nLearning very quickly and coming up with a program that uses a library we had never used before, in a language some of us had never used before\nWhat we learned\nThat things are still very complicated even with a library  - it won't do everything for you\nWhat's next for Fingerprint Finders\nImprove the accuracy of our algorithm somehow (we have done a bit of research into general machine learning techniques but not implemented them yet). We would like to reduce the run-time of our learning algorithm so that we can run it on the whole data set instead of just a small subset.", 
    "project_name": "Fingerprint Finders Table 3", 
    "project_tags": [
      "python", 
      "numpy"
    ], 
    "project_url": "https://devpost.com/software/fingerprint-finders"
  }, 
  {
    "hackathon_name": "ChariTech", 
    "project_description": "Built for https://github.com/SimPrints/ChariTech/tree/master/fingerprintClassification", 
    "project_name": "Fingerprint Classification: Table 8", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/fingerprint-classification-table-8"
  }, 
  {
    "hackathon_name": "ChariTech", 
    "project_description": "Inspiration\nYou move to a new city to study and chase your dreams of success. In year 2 you build the next Big Thing and move to California. You are a busy boy/girl, but you want to give to the less fortunate as well. How do you keep up with the changing landscape of altruism around you? You use ChariFlicks, of course. It simplifies the process of giving as far as a simple flick to the right. Just tell ChariFlicks where you are and how you would like to help, and you will be matched to the charity of your dreams.\nHow we built it\nWe worked hard, fuelled by KitKats and diet coke.\nChallenges we ran into\n\"We are still running into them\", as MP points out, upon being asked. In the beginning the problems mainly had to do with conversion. The idea is, in order to build an altruism dating application, you need a lot of data about the potential matches. So we downloaded the entire database of registered charities in the UK since 1961. Just to mention, they are over 500 000. Before coming up with a way of processing them, we had to extract the information from a format we had never seen before. But perhaps most importantly, THERE IS A LOT OF DATA, and not enough CPU...\nAccomplishments that we're proud of\nOur webpage is very pretty (in Professional, we are good at design!). Also we built a scraper to find the postcode of a geographical location.\nWhat we learned\nDon't let the databases guy (jrth2) leave early!!! \nWhat's next for ChariFlicks\nAfter a few technical tweaks? Making people happier.", 
    "project_name": "\"ChariFlicks\", Table 14", 
    "project_tags": [
      "json", 
      "mongodb", 
      "java", 
      "css", 
      "sql", 
      "html", 
      "azure"
    ], 
    "project_url": "https://devpost.com/software/chariflicks"
  }, 
  {
    "hackathon_name": "ChariTech", 
    "project_description": "In order to tackle the first challenge of the Madanyu charity we developed a concept for an interactive game about material science. Since none of the group members has sophisticated coding skills we focused on creating the concept for the game and the visualisation via MS Powerpoint.\nThe aim is to have an exciting storyline combined with theory and challenges about properties, structures, processing and performance of materials. Scores are given at various points of the game as an incentive to get the right answers on the first attempt. Results can be shared with a community of friends and other players worldwide. Finally, the main challenge will be answering questions against the \u201cBoss\u201d to save the princess. Characters can be chosen and customised at the beginning of the game. \nIn the powerpoint you can see, how the game could look like. We have also included one of the challenges, which consists of a card game around the topic of processing.", 
    "project_name": "Team13", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/team13"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWhat it does\nThis game allows for users to race agains other users, they will race to pick up a customer somewhere in the city. The first person to reach the customer wins.\nPlayers have to stay on/close to roads, go too far away and your car will stop and you will have to reverse back to the road!\nWhen a somebody wins, all players are relocated to a new city, and the game starts again!\nYou can learn how to get around the city as you play.\nHow we built it\nTo create the application we have used mainly JS, for the Maps we have used Mapbox, and sockets we have used pubnub, the server is wrote is node.js using express.\nChallenges we ran into\nAllowing for the car to only drive on the road was quite tricky, after hours of reading the mapbox docs we found that we can customise the map styles allowing to add layers such as roads and buildings, so when everything you can drive on eg motorway, bridge etc.. inherits for roads, so we use this to make sure the player is on a road, when playing it was very hard to stay on the road, so we added a bit off offset to the left, right and front, so aslong as the road was in 30px of either way you are okay ti drive.\nAccomplishments that we're proud of\nMultiplayer, this took some time to think about how we wanted this to work, allowing user to see where all the other players are really brings the game to life.\nWhat we learned\nif something can go wrong, it will, multiple times. over, and over again.\nWhat's next for Taxi Racer: City Edition\nMobile with tilt control. \n(Then all consoles)", 
    "project_name": "Taxi Racer: City Edition", 
    "project_tags": [
      "javascript", 
      "node.js", 
      "pubnub"
    ], 
    "project_url": "https://devpost.com/software/taxi-racer-city-edition"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "The idea sparked off by the utilization of chatbot technology in order to make mortgage advisers virtual for the initial screening process, giving information to applications without having to go for a face-to-face meeting at a bank (for example, when considering multiple properties).  Once a quote is agreed upon, a single-click button will allow the customers to reach customer service, along with a quote being logged to Barclay's servers, streamlining the application process. \nAdditionally, the user's selections and profiles could be saved and utilized to display a range of useful nearby services such as relocation companies and interior designers, who are again, at a one-button click away from scheduling appointments. If desired, companies could promote themselves via subscriptions to appear higher on this list\nWhat it does\nDelivers a quote on mortgage interest based on algorithms involving the loan amount, payback time, deposit, job stability and income of the client. Allows for one-click appointment schedules with Barclays customer service and shows a list of nearby services to the supplied post code.\nHow I built it\nAndroid studio, eclipse, and lots of paper for algorithm calculations\nChallenges I ran into\nMy computer died, and then went through the resurrection. My phone cracked in the bathroom, despite being 2 weeks old. Also, the importance of not using third party chatbot API (due to this being a corporate project) meant that the chatbot had to be simulated by hand.\nBut hey, at least's it is finished\nAccomplishments that I'm proud of\nPulling this stunt off in such a short time with my teammates\nWhat I learned\nBanking is a highly regulated sector, meaning data is often not available to developers, resulting in us\nlearning a lot about mortgages.\nHow to simulate chatbots in android.\nIntuitive UX\nWhat's next for MortgageMe!\nNetworking! Linking to Barclay's servers and third party API", 
    "project_name": "MortgageMe!", 
    "project_tags": [
      "java", 
      "android-studio", 
      "xml"
    ], 
    "project_url": "https://devpost.com/software/mortgageme"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "", 
    "project_name": "Virtual Drum", 
    "project_tags": [
      "unity", 
      "c#", 
      "oculus", 
      "leap-motion"
    ], 
    "project_url": "https://devpost.com/software/virtual-drum"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nIts inspired by the age old popular Snake Game we have played since the Nokia 'not-breaking' phone age.\nWhat it does\nSo this project will use Project Tango to detect the surroundings and create a maze of the room for the player. So its his maze. Also, he will be the snake while playing so its his hiss. Food will be placed along his way. He has to eat it and any collision with the room furniture or walls will be a crash.\nHow we built it\nWe built it using Unity and having C# codes in it. We decided on this idea yesterday after looking at an idea which didn't work out so we were unable to complete it.\nChallenges we ran into\nWe faced A LOT OF CHALLENGES. We generally write down all situations beforehand and detect how to overcome them. How to detect the furniture? How to differentiate it from furniture? How will the snake position be relative to camera? We HAVE NEVER USED UNITY OR GOOGLE TANGO. Plus, no time.\nAccomplishments that we're proud of\nWe feel we came up with an innovative idea and had the urge to learn something new. We learned both the new languages as much as we could. We faced certain challenges in the beginning but we didn't give up.\nWhat we learned\nWe learnt that that there is so much to learn! We learnt Unity and snake game functioning.\nWhat's next for SnakeMaze\nThere can be loads of additions such as jumping food, bouncing furniture etc.", 
    "project_name": "SnakeMaze", 
    "project_tags": [
      "c#", 
      "unity", 
      "c", 
      "augmented-reality", 
      "project-tango"
    ], 
    "project_url": "https://devpost.com/software/snakemaze"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nTerminator\nWhat it does\nMimics the nightmare visions of our favourite evil robot from the future\nHow I built it\nOvernight\nChallenges I ran into\nSleep deprivation\nAccomplishments that I'm proud of\nNot falling asleep\nWhat I learned\nDon't have a second serving of gyros\nWhat's next for T5000\nTANGO5000 = T5000 + Google Tango", 
    "project_name": "T5000", 
    "project_tags": [
      "microsoft-hololens", 
      "azure", 
      "c#", 
      "unity"
    ], 
    "project_url": "https://devpost.com/software/t5000"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "For when you're not home, but still need to get the door. Autodoor is a futuristic door bell system which uses facial recognition and matrix to provide full control over the door without needing you to be present. Autodoor can automatically open the door for people who have been added to the trusted list.\nAutodoor implements an RFID reader, an LCD screen and a camera with facial recognition for identifying individuals.\nHardware used:\n\nRaspberry PI 2\nArduino Mega 2560\nRaspberry PI Camera v1\nRC522 RFID Reader\nIPS Touch Screen\n\nSoftware:\n\nAWS (EC2, S3, Rekognition)\nMatrix\n\nLanguages:\n\nPython\nJava\nC\nC++\nNodeJS (Javascript)", 
    "project_name": "AutoDoor", 
    "project_tags": [
      "matrix", 
      "node.js", 
      "arduino", 
      "python", 
      "android"
    ], 
    "project_url": "https://devpost.com/software/autodoor"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "", 
    "project_name": "Project Minos", 
    "project_tags": [
      "unity", 
      "go"
    ], 
    "project_url": "https://devpost.com/software/project-minos"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe all know the feeling when we trust a store or an online shop and we buy all the products we need from there, not caring about the competitors. At the same time, some of the products that we usually buy have a large addition to the original price. Therefore the idea of this application came as a solution!\nWhat it does\nSaveIt analyses last purchases of a customer and based on that information it provides a cheaper market alternative for each product that did not have the most advantageous price. Our application compares prices for the same product from different online resources, it offers statistics of the money that could have been saved by buying products from a different store.\nHow we built it\nFirst of all, our website and static files have been running on a node.js server and have been built in HTML, CSS and angular.js.\nSecondly, the database was created using PostgreSQL, as well as having a restful API built in SpringBoot.\nFinally, We have also used price API.\nChallenges we ran into\nThe majority of the challenges came from the back-end part, the most relevant one is the asynchronous management of restful API request. It runs as a job so it needs to be queried frequently in order to fetch the response. Furthermore, this has made the front-end templates harder to render giving us no choice other than improvising a caching system focussed around our database.\nAccomplishments that we proud of\n3500 lines of working code.\nWhat we learned\nIt was a great challenge as it was the first time for us to use SpringBoot. The level of abstractification is really high wich makes it really complicated to debug. A large amount of time was allocated to the implementation of the logger.\nWhat's next for SaveIt\nSeveral features can be added in the future, they are related to studying the transaction behaviour of the customer in order to offer suggestions for related products regarding their needs.", 
    "project_name": "SaveIt", 
    "project_tags": [
      "bootstrap", 
      "java", 
      "postgresql", 
      "angular.js", 
      "maven", 
      "node.js", 
      "tomcat"
    ], 
    "project_url": "https://devpost.com/software/saveit"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Datasets\nWe used two publicly available datasets:\n\nFormspring Labeled for Cyberbullying \nMySpace Group Data Labeled for Cyberbullying\n\nlink: http://chatcoder.com/DataDownload\nWhat it does\nA user signs up, and then sends an SMS using Twilio API. When the server receives the text, its classified and forwarded to the intended recipient. \nA D3 graph accompanies the hack that visualises the user messages and updates the colours (red/green) to show if a person has committed harassment.\nHow it Works\nWe are using an SVM and an LLDA (Labelled Latent Dirichlet Allocation).\nFor the SVM we are using a Bag-of-Words model.\nFor the LLDA, we using Google's list of banned words as labels. When we get a new message we get the topic distribution for the message, and classify the message as harassment based on the sum of the topic distributions.\nChallenges we ran into\nImproving the accuracy for the model. We discovered that ensemble learning had the best results after continuously testing with 10-KStratified Fold.\nAccomplishments that we're proud of\nF1 Score: 0.663871351995\nAccuracy: 0.729411764706\nPrecision: 0.655128205128\nRecall: 0.677898550725", 
    "project_name": "HackHarassment", 
    "project_tags": [
      "python", 
      "django", 
      "scikit-learn", 
      "nltk", 
      "twilio", 
      "d3.js"
    ], 
    "project_url": "https://devpost.com/software/hackharrassment"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe wanted to spread awareness of mental health issues and provide a better understanding of the problems that are faced by sufferers, including those who suffer as a result of harassment. We wanted to recreate the experience of having to deal with anxiety and depression by making use of the technology available to us.\nWhat it does\nThe interactive experience uses a MySQL database to send heart rate data from an iOS app to a web page using a PHP API. The heart rate is then called from a Unity script which changes the user experience in real-time. \nHow we built it\nWe used Unity and C# as a game engine, and connected the PC app to an iOS app that we made. We made use of an algorithm we found online which allows us to measure the user's heart rate in real-time using a technique involving the torch and camera. The heart rate is sent to a MySQL database, and the data is then sent to a web page using our own PHP API. Changes in heart rate are automatically detected by Unity, where a script keeps a constant connection between the interactive experience and the database.\nChallenges we ran into\nInitially, our plan was to use a MUSE headband - which unfortunately was not available to us. We also intended for the experience to be in VR, however we were unable to rent any of the hardware for the project. We adapted our ideas to make them work with the equipment available to us. The most challenging problem that we had was to keep an open connection between the database and Unity, as the script was making a call to the database once each frame (about 60 calls per second). We managed to reduce the number of calls made and to keep the connection open for the duration of the experience.\nAccomplishments that we're proud of\nWe are very proud of being able to put together a good range of functioning and high-level technology in order to create a smooth synergistic experience. Using the user's heart rate to evaluate how the experience should change was challenging but was extremely rewarding to watch. Seeing a user place their finger on an iPhone camera and watch the experience change accordingly was a good feeling. We're also proud of being able to produce the idea to a degree we are happy with despite not being able to access the technology we initially wanted. \nWhat we learned\nWe learned how to connect a web page to a Unity script and apply changes in real-time according to the data gathered. And we learned that you can measure your heart rate by scanning your fingertip on your phone's camera! We've learned a lot of valuable things like managing API calls per minute, managing frame-rate in Unity, and manipulating an environment at run-time. \nWhat's next for STORM\nDiscussing with one of the mentors we decided that there are a few future applications of STORM. One would be to refine the experience in order to assist those suffering from mental health issues express themselves to those who have not. Another possible application would be to expand our database in order to collect information based on age, height and weight with the intention of performing some kind of metadata analysis.", 
    "project_name": "STORM", 
    "project_tags": [
      "unity", 
      "c#", 
      "mysql", 
      "php", 
      "json", 
      "objective-c"
    ], 
    "project_url": "https://devpost.com/software/storm"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nTo improve the login process for bank customers by enabling seamless re-logins and avoiding long, unnecessary questions.\nWhat it does\nIt uses 25 different device metrics to generate an unique identity for a logged in user. \nHow we built it\nWe used client side javascript to get various device metrics ranging from the fonts and plugins installed on the browser to creating an image on the canvas and hashing that. Additionally, we used screen sizes and in total 25 different measurements to generate an identity for each device that logs in the system. This information is then stored in the database. When the user logs in to the system, their email and password is then used to retrieve that identity and compare their current identity to the model we've built up in the past. \nIf the match is below a certain threshold, the user should be asked to answer all the traditional questions or perform 2 -factor authentication. However, if its a match, then the aforementioned processes can be skipped to enable a better login experience.\nChallenges we ran into\n\nGenerating the 25 metrics was extremely complex.\nOn the server, matching the current metrics to the previously known model\nDisplaying the information to the user on whether it's a match or not.\n\nAccomplishments that we're proud of\n\nAccurately generate identifiable models for users just by using javascript on their browser.\nDisplaying all the information in an easy to view way\n\nWhat we learned\n\nLearn about computer security and how easily one can be identified online\n\nWhat's next for Login authentication via device fingerprinting\n\nImprove our matching algorithm by using machine learning to build the models instead of comparing each field by value.", 
    "project_name": "Login authentication via device fingerprinting", 
    "project_tags": [
      "javascript", 
      "html", 
      "html5", 
      "css", 
      "node.js", 
      "express.js", 
      "jquery", 
      "bootstrap"
    ], 
    "project_url": "https://devpost.com/software/login-authentication-via-device-fingerprinting"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe were inspired by robotics and innovative motion tracking technology, blurring the lines between the virtual and physical realms. A physical manifestation of The Force.\nWhat it does\nIt is a simple game with complex governing principles. The aim is to steer the ball around the obstacles into the hole. The ultrasonic array provides responsive haptic feedback to the user.\nHow I built it\nWe used c++, Arduino, and various hardware components from Leap Motion and Ultrahaptics.\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for A-Maze-Ball", 
    "project_name": "A-Maze-Ball", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/a-maze-ball-jmf6ba"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nEmpathy is difficult even in an ideal situation. Often we misunderstand what reaction our words caused in a friend or family member. This is also a particularly sensitive area for those undergoing therapy or the professionals treating them. Allowing to sense stimulation through a remote medium aims to reduce the stigma around therapy, while allowing a professional to access detailed diagnostic brain information. Video chat support allows for an added personal touch and to utilize classical therapeutic techniques.\nWhat it does\nThe project implements video chat via Twilio and uses a Muse headband to sense one user (the patient)'s brainwaves, while recording audio from the side of the other (the mental health professional). After the conclusion of a conversation a breakdown of short phrases, which caused the largest stimulation or surpression of brainwave activity.\nHow I built it\nThe clients are built in JavaScript and Swift, while the two servers are built in Node.JS and Python with Flask. One server handles data storage and connection, while the other analyzes the brainwave reading and speech data.\nChallenges I ran into\nText to speech is a particularly difficult problem and cutting audio into multiple small pieces was difficult to implement in a straightforward way. Synchronizing data flow between client and server was also a specific challenge.\nAccomplishments that I'm proud of\nSucceeding in implementing experimental technology into a potentially useful hack.\nWhat I learned\nAn array of different technologies and the potential therapeutic uses of a Muse headband.\nWhat's next for BuzzWords\nInvestigate academically the usefulness of brainwave-sensing technology in mental health", 
    "project_name": "BuzzWords", 
    "project_tags": [
      "python", 
      "node.js", 
      "flask", 
      "muse", 
      "swift"
    ], 
    "project_url": "https://devpost.com/software/buzzwords-9upa8w"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nwe're lazy and lonely people so we wanted to build a chatbot that will keep count of our meals and gym seshs\nWhat it does\nnaturally processes your sentences to look for meals, and calculates relevant information about the food, including its calories and nutritional content. It'll help you keep count of your gains too.\nHow we built it\nNode.js with a ton of API's.\nChallenges we ran into\nMessenger's API is a bit of a pain, alongside finding and messing around with the API's to make it work the way we want it to.\nAccomplishments that we're proud of\nthis bot has more banter than us :( \nWhat we learned\nNatural language processing is very difficult and there are a lot of nuances involved with dealing with sentence structures. \nWhat's next for Pepper Potts\n1v1 Siri 360 noscope", 
    "project_name": "Pepper Potts", 
    "project_tags": [
      "natural-language-processing"
    ], 
    "project_url": "https://devpost.com/software/pepper-potts"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nHumans today don\u2019t wonder, they wonder-then-Google. As a result, the accumulation of Google searches over a period of time acts as a reliable proxy for one\u2019s state of mind, curiosities, ambitions, and fears included. We wanted to take a step closer towards awareness and use this data to analyse the self.\nWhat it does\nWe've seen that Google has a lot of data about each and everyone of us, so we decided to transform that data into something which everyone can see. Our project takes your data from Google and shows you some charts for Youtube and Google searches.\nHow we built it\nWe used AngularJS for the front-end, with Amcharts for displaying the data. The backend is powered by ASP.NET and some of the data computation is done in python. \nChallenges we ran into\nBringing the C# and Python code together was a bit tricky, but we decided to do it so to maximize the potential of every team member.\nAccomplishments that we're proud of\nActually finishing something, after lots of bad ideas and brainstorming.\nWhat we learned\nMore about the data stored by Google, we consolidated our teamwork and toned our coding skills. \nWhat's next for Search4Self\nIntegration with Facebook data, more intelligence for suggesting new things you should try, based on relations with friends, etc.", 
    "project_name": "Search4Self", 
    "project_tags": [
      "asp.net", 
      "angular.js", 
      "python", 
      "c#"
    ], 
    "project_url": "https://devpost.com/software/search4self"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWanting to Use NLP and a Thesaurus API I found long ago\nWhat it does\nUsing twilio, you send +441290211282 an SMS message with a sentence with a simple sentence stucture, it will respond with a dumb sounding sentence akin to the meme\nHow I built it\nA lot of tinkering with python, flask and the nltk\nChallenges I ran into\nHow to host a public facing server on my computer to process the incoming messages\nAccomplishments that I'm proud of\nLearning server hosting, what flask was, what ngork was.\nAccomplishing my vision\nWhat I learned\nEverything~\nWhat's next for The Joseph Ducreux Fancifier\nMemes, more memes", 
    "project_name": "The Joseph Ducreux Fancifier", 
    "project_tags": [
      "python", 
      "natural-language-processing", 
      "twilio", 
      "flask"
    ], 
    "project_url": "https://devpost.com/software/the-joseph-ducreux-fancifier"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "A SSH controlled rover, capable of executing various function.\nHow we built it\nApart from intel-edision and motors we built it from code and transistors up\nChallenges we ran into\nGetting a battery, laser cutting files, right sizes for parts, lot of wires, learning new electronics, learning new code.\nAccomplishments that we're proud of\nRuns through SSH, or Wifi, real time control ...\nWhat we learned\nH bridges, Intel Edison, node.js, 3d modelling in autocad inventor, stepper motors, drivers\nWhat's next for ROVER\ndata collections, room scanning and mapping, autonomy", 
    "project_name": "ROVER", 
    "project_tags": [
      "c", 
      "javascript", 
      "intel-edison", 
      "electronic-merchant-systems", 
      "project-tango"
    ], 
    "project_url": "https://devpost.com/software/rover-lgx7t1"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nDo you ever wonder what game a stranger play ? Just like Shazam goal for music, we don't often know all video games. Without bother the person, you known already what he play. Take a picture and the application do the job for you.\nIt all started for the studenthack V. The idea came originally from Anthony who is interested in big data and image processing/analysis. His intentions were to ease the communication and the search for the name of the games.\nWhat it does\n\nThe user takes a picture by android phone of a video game.\nThe image is processed and the algorithm perform a reverse image search with IncandescentAPI.\nThe algorithm learns keywords by url names output by the second step.\nThe most relevant keywords are kept and so do the name of the game.\n\nHow we built it\nWe built the application using Xamarin and openCV to process the photos captured with the phone. The picture is upload via POST request to a server. The server use IncandescentAPI to do reverse image search and gives json file containing url of lookalike pictures in the web. Keywords are learned from the latter. Name is discovered.\nChallenges we ran into\nFind an API for reverse image search.\nAccomplishments that we're proud of\nFinishing the application.\nWhat we learned\nWe learned to split our work equally and work while being (very) tired \nWe also learned to use better the technologies involved in this project (Xamarin, python, Flask, openCV, Google APIs, Neural Networks, ...)\nWhat's next for WaDaGame\nWaDaGame is basically just a proof of concept for video games application but it can actually also be used for many other fields.\nDatabases already exists but what we need is a way to use all the available informations to get a unified and relevent feed of infomation.", 
    "project_name": "WaDaGame", 
    "project_tags": [
      "xamarin", 
      "c#", 
      "python", 
      "opencv", 
      "android"
    ], 
    "project_url": "https://devpost.com/software/wadagame-zunosm"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWhat it does\nTelehaptix uses cutting-edge haptics technology based on ultrasounds in order to make online content more accessible to people with impaired vision. This version prototype converts English(or any other Latin alphabet text) into tactile feedback, using the Morse code. We chose this code due to hardware specifications, as hand motion proprioceptors(motion receptors) in the hand are much more sensitive to dynamic motion.\nChallenges I ran into\nTactile feedback has a high risk of confusion, so balancing output speed and accuracy was quite provoking.\nAccomplishments that I'm proud ox", 
    "project_name": "Telehaptix", 
    "project_tags": [
      "c++", 
      "html5"
    ], 
    "project_url": "https://devpost.com/software/telehaptix"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "", 
    "project_name": "FLIPPOBOT L", 
    "project_tags": [
      "arduino", 
      "blender"
    ], 
    "project_url": "https://devpost.com/software/flippobot-l"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe wanted to build a web application to make people enjoy traveling\nWhat it does\nIt provides an application for users to receive riddles and to complete checkpoints and a web application for organizers to plan their game.\nHow we built it\nWith a lot of caffeine. And of course with patience for every bug that stood in our way.\nChallenges we ran into\nDesigning a database to synchronize with the web app and the mobile one.\nAccomplishments that we're proud of\nWe managed to provide a nice interface.\nWhat we learned\nLearning to use javascript and ssh better. Learning to use firebase. Further knowledge in developing websites\nWhat's next for Hunter\nmore functionalities, of course, we are thinking about maybe prizes and a method of speaking with a virtual bot as the main interaction of the user with a game.", 
    "project_name": "Hunter", 
    "project_tags": [
      "firebase", 
      "javascript", 
      "css", 
      "html5", 
      "google-maps"
    ], 
    "project_url": "https://devpost.com/software/hunter"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "", 
    "project_name": "DrOwnage", 
    "project_tags": [
      "c++", 
      ".net", 
      "opencv", 
      "ar.drone"
    ], 
    "project_url": "https://devpost.com/software/drownage-34feng"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Ideas\nWe thought of what inventive type of password an end user would enjoy to use... Something that is common to every person, but each one is (mostly) unique.\nMusic!\nEveryone likes music. We came up with the idea of playing your favourite tune to unlock your phone.\nFunctionality\nYou can select an instrument and record your tune by tapping on the on screen keys. You can save many passwords/melodies. Only your melody can get you through your lock screen! Ideally, you could set up any of these passwords for any app, and we would integrate many different types of instruments.\nHow we built it\nWe started off with a few core objects and one screen. As the requirements expanded over time we created more screens and fleshed out said objects with concrete code such as creating file IO.\nChallenges we ran into\nWe had an idea to get past the lock screen by playing an actual instrument next to your phone. This would've been super secure because you would have needed to go home to play your grand piano! Or you could set up a simpler instrument that you can 'fake' anywhere such as a drum - unlocking it through a series of claps. Unfortunately recognising sound waves was too complex to invoke for this hack. We would've liked to add more instruments too.\nAccomplishments that we're proud of\nGetting the keys to play notes through a library we found on github that plays midi notes of different pitches depending on your input. Reading the musical key presses and saving them into a file on your phone.\nWhat we learned\nBetter understanding of how to integrate libraries and how to use android studio - especially regarding setting the layout relative to other elements.\nWhat's next for Xylockphone\nMore instruments!!", 
    "project_name": "Xylockphone", 
    "project_tags": [
      "android-studio", 
      "java", 
      "xml", 
      "midi.js"
    ], 
    "project_url": "https://devpost.com/software/xylockphone"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Hi-Riot is a smart doorbell built on top of the Matrix API. It contains a web camera for seeing who is at your door, and the ability to lock and unlock your door through the Riot messenger. It also has an alarm feature in case the person at your door is not friendly.\nFuture features for the doorbell could include facial recognition for identifying the visitor.", 
    "project_name": "Hi-Riot", 
    "project_tags": [
      "javascript", 
      "css", 
      "html"
    ], 
    "project_url": "https://devpost.com/software/hi-riot-7cy9zl"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe wanted a fun and easy to use travel related party game application.\nWhat it does\nA two player web based application where both players must guess the allocated point of interest of the other player. This is done through a chat without using any of the words in the place name! Points are added for every correct answer to a scoreboard. We even cleverly educate people by teaching them how to use latitude and longitude!\nHow we built it\nWe used javascript; primarily through node.js utilising npm modules such as socket.io, express, nodemon and sass. The Google Places API was used to fetch data about the points of interest. \nChallenges we ran into\nUtilising the Google Places API to integrate well with the Socket.io system that was already in place required some thought.\nAccomplishments that we're proud of\nFull implementation of a full chat protocol and deployment of a multi user working application. Also, working efficiently as a team and collaborating well throughout the duration of the project.\nWhat we learned\nChoosing technologies that none of us were previously familiar with ensured that we gained the most out of the project; not only learning how one would produce such an app, but also implementation using new technology tools.\nWhat's next for PlaceIt\nAccounts API for permanent user leaderboard. Add levels. Also including better checking of answers and even possibility to answer questions using location (by going there) to gain bonus points!", 
    "project_name": "PlaceIt", 
    "project_tags": [
      "node.js", 
      "express.js", 
      "heroku", 
      "sass", 
      "google-places", 
      "javascript", 
      "socket.io"
    ], 
    "project_url": "https://devpost.com/software/placeit-egfu6k"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe are sick of using remote controllers in the era of smartphones.\nWhat it does\nUsing the LEAP MOTION SENSOR, we use human gestures to control a Parrot AR Drone.\nHow we built it\nWe used the PS_Drone api and the LeapMotion API to program it in python\nChallenges we ran into\nCommunication between the LEAP and the computer, and between the computer and the drone is really tough\nAccomplishments that we're proud of\nWe accomplished in making the drone fly using basic motions, manipulating the vertical speed, yaw, roll and pitch of the drone's orientation and movements.\nWhat we learned\nWe learned how to use API effectively, as this is our first hackathon as a team, it was really hard at the beginning, but then we adapted and managed to finished our basic features.\nWhat's next for LeapMotion Drone\nThis project is a pathway to the future, where drones, cars, and VR can be more adaptive using hand gestures, and even body gestures.", 
    "project_name": "LeapMotion Drone", 
    "project_tags": [
      "python", 
      "leap-motion"
    ], 
    "project_url": "https://devpost.com/software/leapmotion-drone"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nPokemon, Top Trumps and wanting to learn alexa\nWhat it does\nReads out the stats of a randomly generated pokemon card\nHow I built it\nUsing node.js and the services amazon provides to develop for the alexa so lambda and aws)\nChallenges I ran into\nGetting the alexa to work\nAccomplishments that I'm proud of\nGetting the alexa to work\nWhat I learned\nBetter use of node js\nWhat's next for Alexa Pokemon Card Generator\nMore cards, battle other people", 
    "project_name": "Alexa Pokemon Card Generator", 
    "project_tags": [
      "node.js", 
      "alexa"
    ], 
    "project_url": "https://devpost.com/software/alexa-pokemon-card-generator"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe're all busy students, we wanted to never forget something important again!\nWhat it does\nYou give us all your contact and social media details and set a reminder...we do the rest\nGet ready to be buried in an avalanche of notifications!\nHow we built it\nWith lots of coding and little sleep\nChallenges we ran into\nWe had lots of faff with making a server and then wrestled with way too many APIs, but made it in the end!\nAccomplishments that we're proud of\nWe built a thing that actually works!!\nWhat we learned\nAPIs be crazy\nWhat's next for Bomb Scheduler - Reminder App\nAdd all of the platforms until it's literally impossible to avoid your reminders (unless you sleep through everything)", 
    "project_name": "Bomb Scheduler - Reminder App", 
    "project_tags": [
      "python", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/bomb-scheduler-remind-app"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Harassment blocker was created as part of the #HackHarassment program, with the intention of preventing or reducing online harassment. \nThe program uses an IBM Watson API designed to analyse the tone of an provided message. By using this API, our program takes messages, posts, and comments online and is able to return a Boolean value based on the different emotional levels of the text - either the post is suitable or it should be blocked. This was achieved by using a Python Flask back-end to carry out this function, and a java-script google chrome extension client-side to allow access in the browser. \nThe primary challenge was accurately identifying the posts that were suitable as opposed to the posts that were classified as harassment and so should be blocked. This was achieved using a comparison of the results given by IBM Watson's Tone analyser, results are given as different levels of emotions in the provided text - for example Fear or Anger. By comparing the positive emotions to the negative ones, we were able to identify which posts were harassment and which were not with a reasonable level of accuracy. \nIn the process we have become experienced with the creation of Google Chrome Extensions as well as the difficulties of identifying negative content online. \nTo futher the harassment blocker project, ideas would include implementation in other browsers, and most importantly, development of our own algorithms to identify harassment rather than reliance on a outside API. This for instance would be extremely interesting to implement using Machine Learning in the future.", 
    "project_name": "Harassment Blocker", 
    "project_tags": [
      "html5", 
      "css", 
      "python", 
      "flask", 
      "jquery", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/harassment-blocker-vj8fsi"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWhen coming to the U.K. from the US for this hackathon, we found it surprisingly difficult to find cheap tickets. We theorized that if you could find the absolute cheapest flight from any city in the US to any city in Europe, you could connect with budget airlines for cheap.\nWhat it does\nOur website takes as input the user location, final destination, and their travel dates to find the main intercontinental flight. Currently, only North America and the EU are implemented.\nHow we built it\nWe wrote a program in Python and used Flask (Python Microframework) to interact with and feed data to the skyscanner API, as well as display the information using an integrated Google Maps API. Built simple website using HTML and CSS. This is how we get our price information and overall display.\nChallenges we ran into\nThe greatest challenge was figuring out how to get the API to return the information we wanted and how to give it the information it needed to do that. We also had formatting issues with the website we built for the project.\nAccomplishments that we're proud of\nWe are most proud of creating the Python algorithm that drives this program. No other service does exactly what we do and we're excited to have done something new.\nWhat we learned\nWe learned how to interface the API for the least amount of data possible and parse it for the desired results. Also learned better uses for Python, like how tuples worked, and how to interface skyscanner API.\nWhat's next for Smart Flights\nWe hope to implement connecting flights within continents to give users the absolute cheapest price. We would also like to implement the rest of the world and polish up the website.", 
    "project_name": "Smart Flights", 
    "project_tags": [
      "html", 
      "python", 
      "flask", 
      "css", 
      "google-maps"
    ], 
    "project_url": "https://devpost.com/software/smart-flights"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nIt was the challenge that most grabbed our attention. We really thought we could learn a lot from completing this project.\nWhat it does\nThere is a webcam live feed that takes a snapshot when the door bell rings. It detects the face of person or multiple persons with the click of a button, and sends the detected image to the \"owner\" via email. \nHow we built it\nWe started with a raw javascript webcam script that accessed the video tag of HTML5. In order to capture stills we had to change focus to angularJS to create our own webcam tag. In order to get around security problems of writing to disc\nthis webcam module must be hosted on a HTTP Server, we will be using python SimpleHTTPServer. Upon capturing a still, the image is sent to our own python server that we coded to accept a base64 string representation of an image. This is the medium through which we needed to send our image. Our server decodes the image and writes to disc. Our next python script takes said image from file store and uses the openCV API to detect any faces. If multiple faces are detected a separate image file is created for each. Finally we have a script that sends the cropped image to a user(person whose door this is) via email. \nChallenges we ran into\nNever used angularJS and the openCV before so the syntax was challenging to get our heads around at first. We also learned a lot about VirtualBox settings as that presented enough of a challenge on its own!\nAccomplishments that we're proud of\nIt works! Just to leave the weekend with a working product is awesome.\nWhat we learned\nUsing APIs. Introduction to writing our own server. Manipulating mail clients. Time management.\nWhat's next for Face Detect Doorbell\nImplementing face recognition so  that the doorbell recognises friends and relatives and can report who they are. Use the Messenger API instead of sending emails.", 
    "project_name": "Face Detecting Doorbell", 
    "project_tags": [
      "python", 
      "javascript", 
      "css", 
      "html5", 
      "angular.js"
    ], 
    "project_url": "https://devpost.com/software/face-detect-doorbell"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nDriven by love for music and innovation, we discovered Ultrahaptics, which makes your DJ experience real.\nWhat it does\nIt scans the moves of your hands, computes them and synthesizes an audio file in real time, while sending vibrations to towards each hand.\nHow we built it\nThe hand gestures are computed in C++ and the music is modified with a Pure Data.\nChallenges we ran into\nUsing CMake, finding a sound editor API, youtube API, connecting C++ to JS.\nAccomplishments that we're proud of\nHave a working prototype, learned about Pure Data and used a state-of-the-art device.\nWhat we learned\nUltrahaptics API, JS, Pure Data, more C++.\nWhat's next for Haptic DJ\nMore complex DJ features, hand gestures and different vibrations, based on the qualities of the sound.", 
    "project_name": "Haptics DJ", 
    "project_tags": [
      "c++", 
      "leap-motion"
    ], 
    "project_url": "https://devpost.com/software/haptic-dj"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe really love Artificial Intelligence and all that comes with it, therefore bettering the world using these as tools was the next obvious step\nWhat it does\nWe are building the future of baking. Transactions made easy. Just snap a picture of the receiver and we will send them the money for you. \nHow we built it\nWe started with the Microsoft Cognitive Services for the Face Detection. With the data we got from that, we would train our Convolutional Neural Network and further use it to recognize both the sender and the receiver.\nChallenges we ran into\nAt first, we started with a Deep Neural Network but soon we run into problems. We wanted to use it as it provided us with an easy way to deploy as we did not need to trouble ourselves with the feature selection. We ended up training our Convolutional Neural Network based on the features mined from the Microsoft API. \nAccomplishments that we're proud of\nThe face recognition runs better than expected at even small training data. We believe the execution will only improve as the sets will grow.\nWhat we learned\nWe learned that great things can be accomplished just by starting with a dream and 36 hours.\nWhat's next for Vision4Manchester\nLunch.", 
    "project_name": "Vision4Manchester", 
    "project_tags": [
      "python", 
      "flask"
    ], 
    "project_url": "https://devpost.com/software/vision4manchester"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe like to travel and we're passionate about memes\nWhat it does\nTreasure hunt game in a city where you get rewarded with memes everytime you finish a challenge\nHow we built it\nUsing Vlad's blood, sweat and tears\nChallenges we ran into\nAll of them... Literally anything you can come across \nAccomplishments that we're proud of\nThe project is working to a good degree and we learned a lot from it\nWhat we learned\nHow to work with google maps API and twilio and javascript and node.js. Learned how to solve problems after running into virtually every problem we could have run into\nWhat's next for MemeSnooper\nIt's snooping time", 
    "project_name": "MemeSnooper", 
    "project_tags": [
      "firebase", 
      "javascript", 
      "html5", 
      "jquery", 
      "twilio"
    ], 
    "project_url": "https://devpost.com/software/memesnooper"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nInspired by Stick RPG\nWhat it does\nHow we built it\nUsing Unity and C#\nChallenges we ran into\nAccomplishments that we're proud of\nWhat we learned\nWhat's next for UNISIM", 
    "project_name": "UNISIM", 
    "project_tags": [
      "unity", 
      "c#"
    ], 
    "project_url": "https://devpost.com/software/unisim"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nThe team started off with the idea of using the Twilio API to implement a bot of sorts, over telephony network (SMS)\nWhat it does\nIn its current state, Askii is capable of utilising the WolframAlpha computational knowledge engine to query for you, and respond within a short time (also some limited reddit usage)\nHow we built it\nPython for the majority of manipulation: listener server; reading input, passing to, and receiving from the WolframAlpha API, as well as processing for SMS output\nTwilio for telephony interface\nAndroid app to attempt to use different types of response\nChallenges we ran into\nQuery responses from WolframAlpha are variable in length, metadata, and content, therefore interpreting these was challenging in its complexity\nHandling of encoded unicode characters\nAccomplishments that we're proud of\nSuccessfully reading and replying to SMS, impossible without the Twilio API (huge help!)\nAndroid app as we had little prior experience with the development environment and implementation\nWhat we learned\nWeb is hard!\nHTML parsing, GET & POST requests using Python, SMS handling in Android, git / GitHub\nWhat's next for Askii\nMultiple web service capable - wikipedia / reddit / IFFFT\n(as long as you can code it, you can have it!)\nEasy plugin integration\nThanks for having us Manchester!", 
    "project_name": "Askii", 
    "project_tags": [
      "python", 
      "twilio", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/askii2"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nMobile games of the same genre. We decided to make one with a twist as it is realistic to make in 2 days.\nWhat it does\nGet through the labyrinth, pick up power ups to modify your journey. Find secrets, dodge traps and get the highest score you can! You control a ball that moves through a maze. Maximise your time to get the best score possible.\nHow I built it\nWe built it using unreal engine 4, made models with Maya and visual effects with the aid of photoshop. We seperated the tasks by the three of us. Vasile for map creation, Ezekiel for scripting/coding and Klavs for animations/visuals.\nChallenges I ran into\nBugs in scripting which took a while to fix, making the map interactive and fun and creating a user interface for the game.\nAccomplishments that I'm proud of\nCreating the base of a game that can be expanded in just 2 days, we added quite a lot of features and are proud of how much we got done.\nWhat I learned\nWe gained valuable experience in teamwork, using unreal for advanced scripting, advanced particles/animations and  creating an inuitive map and interface.\nWhat's next for Kinetic Dash\nWe hope to add more levels, features and polish up the game in the coming weeks and expand it to have a multiplayer mode. From there we will release it onto PC and Mobile and see how it does.", 
    "project_name": "Kinetic Dash", 
    "project_tags": [
      "photoshop", 
      "maya", 
      "unreal-engine"
    ], 
    "project_url": "https://devpost.com/software/kinetic-dash"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "", 
    "project_name": "Touch Team", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/touch-team"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWhat it does\nHow we built it\nChallenges we ran into\nAccomplishments that we're proud of\nWhat we learned\nWhat's next for SamiHack\nshave his hair", 
    "project_name": "SamiHack", 
    "project_tags": [
      "amazon-alexa"
    ], 
    "project_url": "https://devpost.com/software/samihack"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nFiverr was a major inspiration along with the common use of instant messaging for asking for favours.\nWhat it does\nThe website allows you to create a favour you wish for someone to do for you in exchange for your time used elsewhere in a one way platform.\nHow we built it\nWe used C# and ASP.NET Web Forms to build the entire system and a MySQL database for storing the data.\nChallenges we ran into\nOriginally we wanted to use the Google OAuth API but couldn't get it working with our implementation and went with just using an inbuilt login system. We also had issues with the inbuilt SQL Server implementation and went with a standard MySQL server.\nAccomplishments that we're proud of\nLearning how to use OAuth within C#\nCreating a functional website in ASP.NET\nWhat we learned\nSee above.\nWhat's next for Favourr\nWe want to extend Favourr and add more of the nice to have features to it and ensure that it would work in an online environment with concurrent users.", 
    "project_name": "Favourr", 
    "project_tags": [
      "c#", 
      "asp.net"
    ], 
    "project_url": "https://devpost.com/software/favourr"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nNational Geographic and travelling the world.\nWhat it does\nOdyssey is our method to make our users discover the world in an interactive way, by engaging their colour perception. By choosing one of our 360 colours, you can virtually travel to different places in the world.\nYou could also discover the world by enabling the face recognition system, and the places that you will discover will be\ninfluenced by your current feeling.\nA different Spotify playlist will be generated for each of our videos from different areas of the world:\nGrand Canyon, Sri Lanka, Gobi Desert, Costa Rica, Dominican Republic, Cocos Islands, Norway, Kuala Lumpur.\nIs Samsung VR you could actually use our application, to focus/click on a colour, and then to redirect you to a place that you need to find.\nAccomplishments that we're proud of\nFeatures:\n\nemotion recognition  which helps you find a place in the world, your emotion is associated with a colour from the spectrum\ngenerates a different playlist to listen to that day,\nenables you to find more educational information about the geographical areas that you are are discovering\n\nWhat's next for Odyssey\nFor further implementation in Virtual Reality, you could actually use our application, to focus\n3 seconds on a colour, and then to redirect you to a place that you need to find.", 
    "project_name": "Odyssey", 
    "project_tags": [
      "javascript", 
      "html", 
      "css3", 
      "spotify", 
      "youtube", 
      "google-maps"
    ], 
    "project_url": "https://devpost.com/software/odyssey-fb63zq"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe loved the idea of using image recognition to improve customers experience, although the technology is not quite there yet so we made a travel-inspired image recognition game.\nWhat it does\nYou play in small groups of friends either in the same location or in different places. You are given 5 things to take pictures of, within one minute. The first one to get them all wins!\nHow we built it\nThe front end is an Android app. It communicates via socket.io to a node.js server that keeps track of the session and sync. The images are recognised using Google Cloud Vision API's.\nChallenges we ran into\nIntegrating the API with the Android was a challenge. We tried multiple APIs, settling with Google's for precision and generous trial plan. Multithreading caused some weird issues.\nAddressing heavily nested objects took several attempts in node.js.\nAccomplishments that we're proud of\nHaving no experience with node.js and socket.io we were surprised what we managed to achieve.\nWe were surprised to obtain a rather polished app after going through various designs.\nWhat we learned\nNode.js and socket.io\nImage recognition API's behave weirdly quite often. (e.g. sometimes pens are recognised as shotguns)\nWhat's next for SnapIt!\nThe server now runs locally but we are planning to have it available on the cloud with multi-server support.\nMore game modes e.g. random group creation.", 
    "project_name": "SnapIt!", 
    "project_tags": [
      "socket.io", 
      "java", 
      "android", 
      "android-studio", 
      "node.js", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/snapit"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe were inspired by the presentation of the CakeSolutions guy (Alex i think).\nWhat it does\nIt is a bell with a camera linked to it which detects your face and will do a specific action depending if it detects a person or not, and it send an email with a picture of the person in front of the door.\nHow we built it\nUsing pycharm and the opencv library.\nChallenges we ran into\nFinding a way to respons to your emotion, which we did not implement at the end. \nAccomplishments that we're proud of\nWe are proud that most of the things we wanted to do we managed to achieve.\nWhat we learned\nImage processing, python, and how to work together as a team. \nWhat's next for Future Bell\nTransforming it into a product which will be in every household :) .", 
    "project_name": "Future Bell", 
    "project_tags": [
      "python", 
      "opencv", 
      "pygame"
    ], 
    "project_url": "https://devpost.com/software/future-bell-6p7w4h"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nLife\nWhat it does\nIt's a way to keep track of fake profiles, people, who use social media as a harassment platform or in general have questionable intents. It is a chat bot which allows people to report such behaviour along with some details and the offenders name or phone number. Later this can be accessed by looking up one of the latter, allowing people to check if their new facebook friend or aquaitance has a history of disrespectful behaviour.\nHow I built it\nUses the recast.ai API and node.js\nChallenges I ran into\nNot knowing node.js at the beginning, difficulties with building conversation flow.\nFuture Plans\n//TODO facebook (friendlist) integration", 
    "project_name": "CreepBot", 
    "project_tags": [
      "javascript", 
      "node.js", 
      "postgresql", 
      "heroku"
    ], 
    "project_url": "https://devpost.com/software/messenger-bot"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "What it does\nThe game is about a character travelling the UK trying to visit as many cities as possible in order to gathe rpoint. but crime rates in different cities are decreasing its health stats. So the character must pay for healthcare.\nChallenges we ran into\nBig Data Challenge - Used data.gov.uk for information like hospitals locations and police.gov.uk to get info about crime rates n different cities across the UK.\nGaming Challenge - Our project is a travel themed game", 
    "project_name": "UK Big Data Travel Game", 
    "project_tags": [
      "three.js", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/uk-big-data-travel-game"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nUniversity can be very lonely, especially for shy, first-year students. Sometimes, all you want is somebody to hang out with for lunch, for a beer, for a movie, maybe for the length of a flight. You're not alone in the struggle. Many other people may be looking for the very same thing. How about we bring two lonely kids together for coffee and conversation?\nAskOut aims to do just that: facilitate contact and the inner courage in everybody to ask out a complete stranger.\nWhat it does\nAskOut is a web-app, pinpointing all users in close proximity to each other and allowing them to talk to each other and organise a meet-up. It displays interests and topics of discussion, so that, if small talk fails, you can always bring out the big questions and see yourself fall into an enthralling conversation on politics, religion and whether or not Mary Poppins is a trickster God.\nYou have to register an account and enter short edgy bits of information about yourself, that could start a conversation and keep it going. You can login, logout, update your information.\nCheck it out HERE: 80a3e5ca.ngrok.io (Temporary Link)\nHow I built it\nThe design is meant to be minimalist and easy to navigate, as well as robust across platforms and browser sizes. All forms works and are meant to improve the user experience. A mixture of Web-design and PHP was required for the final result.\nChallenges I ran into\nInitial plan included Cordova and Twilio integration, but it proved impossible to implement on time.\nAccomplishments that I'm proud of\nA beautiful website and having pushed my team in a direction with a lot of potential. The PHP Nikita wrote is quite impressive and I was thrilled to have worked with him and Ilias on this idea.\nWhat I learned\nTeamwork, team management, advanced CSS and forms.\nWhat's next for AskOut\nImproved PHP, ability to add personal pictures, Twilio implementation for chats, turning everything into an app, perhaps even pushing it on Google App Store.", 
    "project_name": "AskOut", 
    "project_tags": [
      "javascript", 
      "java", 
      "css", 
      "html", 
      "php"
    ], 
    "project_url": "https://devpost.com/software/askout-fl9xgv"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe wanted to make it easier to people to gather together and explore different cities' culture and sights.\nWhat it does\nImagine you are an English person who goes to the Bahamas for the first time ever in you life. You want to socialize and do sightseeing, understand something new about the culture of that distant place. If you are a user of our app you are given a number of suggested routes in a menu and you pick one. Each route has a starting point so all the users who want to visit the same tour should gather together at the starting point at predefined time, meet with each other and visit all the places from the picked option. The role of Twilio is to make sure that all the users are notified about the incoming beginning of the gathering. All the users are being sent an smses reminding them about the gathering. Our virtual guide using google maps' functionality shows the group around an array of landmarks and sights in general. \nHow we built it\nWe used android java, android studio and SQLite\nChallenges we ran into\nVarious debugging problems, the difficulty of binding a database to an android app, and 'querrying' it in java. Database architectural issues.\nAccomplishments that we're proud of\nThe teamwork was top quality and even at the very early stages of the day we were concentrated and devoted entirely on the project.\nWhat we learned\nWe gained more complete understanding of how databases work, how to build and structure them. We understood a lot about how to the view system of Android, resource loading and debugging.\nWhat's next for TourTeam\nWe may continue its development.", 
    "project_name": "Tour Team", 
    "project_tags": [
      "android-studio", 
      "sqlite", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/tourteam"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nBeing our first ever app we wanted to combine many functionalities while still making something catchy and innovative.\nWhat it does\nIt is both a skill for Alexa that challenges you to recognize some of the world's most iconic places just by a (more or less) vague description and a text message game with the same functionality but which doesn't require and internet connection on the phone. The later was implemented through the Twilio API.\nHow we built it\nWe have used a piece of open source code from Krishnaraj Varma (https://github.com/krvarma/Amazon-Echo-and-Twilio) that allowed us to send text messages via Alexa which we have then altered to allows us to start the game on the phone by sending a text message to the target client. We have extended the code further to implement the interactive version of the game so you Alexa can ask you questions and you can respond.\nChallenges we ran into\nBeing new to Alexa and especially JavaScript it was difficult at first to make sense of the code and understand it well enough so we can model it to our advantage. Also debugging on AWS was a bit of a pain. \nAccomplishments that we're proud of\nWe are definitely proud of what we managed to achieve in such a short timeframe given the fact that none of us had done this before.\nWhat we learned\nI would say we all learned a great deal not only about JavaScript, Python and how they use libraries to implement awesome functionalities but also about development on AWS.\nWhat's next for Enigma\nEnigma 2.0 should find better strategies of implementing the question/answer part using maybe a decision tree structure , maybe make it work for many clients and add many different questions about different locations around the world while still keeping the informative aspect.", 
    "project_name": "Enigma", 
    "project_tags": [
      "javascript", 
      "python", 
      "twilio", 
      "amazon-alexa"
    ], 
    "project_url": "https://devpost.com/software/enigma-ocnjlz"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nDue to lack of inspiration, we thought about tackling one of the most annoying things that can happen pretty often, especially in the UK - NO MOBILE INTERNET CONNECTION (but access to sms/regular gsm voice calls)\nWhat it does\nMake some of the simple Internet services available via sms\nHow we built it\nWith the struggle of python/flask/heroku and a little help of some APIs\nChallenges we ran into\nAWS - Flask integration and lot of tiredness because of the side challenges\nAccomplishments that we're proud of\nWe made it happen in such a short time\nWhat we learned\nWe learned a lot from security challenge (aka. check all the possibilities) and the importance of APIs\nWhat's next for py-twy\nTake it one step further and bring more of social media to users that don't have internet connectivity, mainly through the use of Twilio's SMS API", 
    "project_name": "py-twy", 
    "project_tags": [
      "python", 
      "twilio", 
      "google-maps", 
      "openweathermap", 
      "flask", 
      "heroku"
    ], 
    "project_url": "https://devpost.com/software/py-twy"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nBeer.\nWhat it does\nFetches it.\nHow I built it\nC# serverside, proccessing on arduino\nChallenges I ran into\nLOTS.\nAccomplishments that I'm proud of\nIt kinda works.\nWhat I learned\nLOTS.\nWhat's next for Lateral\nA lot of improvements.", 
    "project_name": "Lateral", 
    "project_tags": [
      "c#", 
      "arduino"
    ], 
    "project_url": "https://devpost.com/software/lateral"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nFinding solutions for Sudoku's online can be cumbersome due to tedious text inputs. We want to make this process easier by recognizing untouched and partially completed Sudoku's from photographs and solving them.\nWhat it does\nRecognizes Sudoku's from photographs and solves them. Implementing web-UI to allow for custom user input.\nHow we built it\nImage recognition and classification in MATLAB. Solution algorithm and logistics in Python.\nUses parts of Chars74K dataset: http://www.ee.surrey.ac.uk/CVSSP/demos/chars74k/\nChallenges we ran into\nClassification of numbers in a noisy and non-ideal environment.  \nAccomplishments that we're proud of\nFunctioning solver algorithm. Good performance. Decent recognition. Acceptable classification rate.\nWhat we learned\nMATLAB can be faster and more convenient than OpenCV.\nWhat's next for Swagdoku\nImprove classifiers with larger and/or more fitting training data. Improve UI. Make solving more reliable and better in giving feedback on solvability/mistakes in the Sudoku.", 
    "project_name": "Sudokode", 
    "project_tags": [
      "matlab", 
      "python", 
      "javascript", 
      "flask"
    ], 
    "project_url": "https://devpost.com/software/swagdoku"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWhen we heard about the travel game challenge, we wanted to make an app that encourages players to go out and explore, but also different from Pokemon Go in some way. \nWhat it does\nIt is a game where players have to explore areas of the world they have not explored before to uncover treasures and loot, and survive against hunger, thirst and monsters.\nHow we built it\nWe used Google Maps Android SDK to display the area around the player. The sdk has extensive capabilities to draw images and shapes onto the map, which let us implement a \"fog of war\" around the player, and also draw treasures, monsters and other game objects onto the map. The game uses Firebase Database to store game data, and a Java server is used to create game objects and manage other game data.\nChallenges we ran into\nAlthough Google Maps SDK is powerful, it wasn't designed for gaming. We had to try different ways of drawing to get the results that we wanted. Organizing the development process and making sure we're on the same page was also challenging. All of us ran into various problems that slowed us down, but we somehow managed it in the end.\nAccomplishments that we're proud of\nWe made some progress.\nWhat we learned\nProgramming while being sleepy is not a good idea.\nWhat's next for A traveling survival game\nWe want to finish the prototype.", 
    "project_name": "A traveling survival RPG", 
    "project_tags": [
      "android", 
      "firebase", 
      "google-maps", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/a-traveling-survival-game"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspirations\nWe all remember space invaders, so we decided to recreate a small part of it \nWhat it does\nIt is being played\nHow I built it\nWe used lua and the love2d engine to build it. Photoshop for the images\nChallenges I ran into\nOnly one of our team members had actually used lua before that. So we had to learn on the go for the most part of it.\nAccomplishments that I'm proud of\nThat we managed to put together a working version of the game\nWhat I learned\nlua\nWhat's next for Deep space\nDeeper space", 
    "project_name": "Deep space", 
    "project_tags": [
      "lua"
    ], 
    "project_url": "https://devpost.com/software/deep-space"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "student-hack-V\nTrump O'Meter is a project which represents a chrome extension which classifies a piece of text on how likely it is to be a Trump's thought. \nIt uses: \n\nPython ANN (Artificial Neural Network) build from scratch;\nTwitter API to fetch previous Trump's posts;\nHTML/CSS for the chrome extension;\nYoutube to mp3 converter to fetch Trump's voice;\nTwilio API to send and receive messages;\n\nAuthors: Simeon Kostadinov (University of Birmingham), Yusof Bandar and Pritam Sangani (Manchester Metropolitan University).", 
    "project_name": "Trump O'Meter", 
    "project_tags": [
      "python", 
      "css", 
      "html", 
      "javascript", 
      "flask"
    ], 
    "project_url": "https://devpost.com/software/student-hack-v"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe ran out of time and the only idea that we were left with was this one because of the frequent use of it \nWhat it does\nIt turns on your webcam automatically and it recognizes your face, no matter how people fit in the frame\nHow we built it\nWith Pythn and OpenCV\nChallenges we ran into\norganizational, communication and lack of techinal experience\nAccomplishments that we're proud of\nHavng something functional to present\nWhat we learned\nNever come unprepared for such an event, do your research ahead of time, be optimistic and never abandon your original idea(s)\nWhat's next for FaceRec\nWe want to implement this further into a larger app where it can crop your body out of the image and place you in a tropical/fascinating new lands so it gives the illusion that you travel throughout the entier globe.", 
    "project_name": "FaceRec", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/facerec-5us702"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "It's a trivia bot for matrix. Just invite @triviabot:matrix.org to your room and type !start_#number of questions to play (hopefully)", 
    "project_name": "hackalton-2017", 
    "project_tags": [
      "javascript", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/hackalton-2017"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe were in need of a way to find out information quickly in any situation - even being abroad.\nWhat it does\nWhen the user sends a text to our number in the format of \"[What they need] in [Where they need it]\" (an example being \"Nandos in MediaCityUK\"), they are sent a reply of the nearest one to them. This is useful if one is abroad, where data romaing can be really expensive or when a person simply does not have enough data or battery to get them to their destination.\nHow we built it\nUsing the Twilio API and the Google Places API (within the Google Maps API), the context of the text form a request to the GoogleMaps API.\nChallenges we ran into\nAccomplishments that we're proud of\nNone of us knew Python and we managed to not only learn it, but complete a working project in it (yay!).\nWhat we learned\nListen to someone when they say the Python SDK is much easier to set up than the Java SDK in Twilio.\nWhat's next for Assistio\nWhen out $25 runs out (thanks for that by the way), who knows?\nOn a serious note, this can grow in several different ways, one can get translations for words if abroad, or simply directions to the place you would like to go to. All we'd have to do is increase the specificity of the text we recieve. For now it is for \"emergency cases\" and we are happy with it.", 
    "project_name": "Assistio", 
    "project_tags": [
      "python", 
      "twilio", 
      "google-maps"
    ], 
    "project_url": "https://devpost.com/software/assistio"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe are 2 friends who like to take every opportunity, especially volunteering ones, so our student lives pretty lack in free time. Since we do so many things and having also a a job at the same time, we find it hard to keep track of everything that we are supposed to do and sometimes we mess it up. \nWhat it does\nBullet journaling si a very efficient way of organizing your tasks and it is based on daily, weekly and monthly calendars with tasks marked by different symbols in order to make it easy to differentiate between categories of tasks. \nHow we built it\nWe used Ionic 2 and made components for daily tasks and for days. For weekly and monthly calendar we made pages that integrate the tasks. \nChallenges we ran into\nWe encountered a very unexpected challenge now at the end, because of an infinite loop, but even if we resolved that, the app was still broken and it took a while until we made it functional again.\nAccomplishments that we're proud of\nWe are proud of the fact that we have made an useful applications and the ones with whom we talked about it requested to have it after the hackathon and we are seriously thinking about publishing it afterwards.\nWhat we learned\nWe learned more about Ionic 2 and how Typescript works. Also, we learned more about Google Calendar API.\nWhat's next for Journal in my Pocket\nWe are thinking about adding  some more interesting features like journal posts, Social Media integration, as well as the posibility to doodle or to add images to your journal.", 
    "project_name": "Journal in my Pocket", 
    "project_tags": [
      "html5", 
      "css3", 
      "typescript"
    ], 
    "project_url": "https://devpost.com/software/journal-in-my-pocket"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "", 
    "project_name": "SpaceTrip", 
    "project_tags": [
      "c#", 
      "unity", 
      "leap-motion"
    ], 
    "project_url": "https://devpost.com/software/spacetrip"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nI want to make a good murder mystery game.\nHow I built it\nI built it in gamemaker.\nChallenges I ran into\nI very quickly realised I don't know gamemaker\nAccomplishments that I'm proud of\nI like the inventory works\nWhat I learned\nA lot about gamemaker\nWhat's next for Murder in Hackathon Land\nI'll probably keep working on it", 
    "project_name": "Murder in Hackathon Land", 
    "project_tags": [
      "gamemaker"
    ], 
    "project_url": "https://devpost.com/software/murder-in-hackathon-land"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe wanted a fun and easy to use travel related party game application.\nWhat it does\nA two player web based application where both players must guess the allocated point of interest of the other player. This is done through a chat without using any of the words in the place name! Points are added for every correct answer to a scoreboard. We even cleverly educate people by teaching them how to use latitude and longitude!\nHow we built it\nWe used javascript; primarily through node.js utilising npm modules such as socket.io, express, nodemon and sass. The Google Places API was used to fetch data about the points of interest. \nChallenges we ran into\nUtilising the Google Places API to integrate well with the Socket.io system that was already in place required some thought.\nAccomplishments that we're proud of\nFull implementation of a full chat protocol and deployment of a multi user working application. Also, working efficiently as a team and collaborating well throughout the duration of the project.\nWhat we learned\nChoosing technologies that none of us were previously familiar with ensured that we gained the most out of the project; not only learning how one would produce such an app, but also implementation using new technology tools.\nWhat's next for PlaceIt\nAccounts API for permanent user leaderboard. Add levels. Also including better checking of answers and even possibility to answer questions using location (by going there) to gain bonus points!", 
    "project_name": "PlaceIt", 
    "project_tags": [
      "node.js", 
      "express.js", 
      "heroku", 
      "sass", 
      "google-places", 
      "javascript", 
      "socket.io"
    ], 
    "project_url": "https://devpost.com/software/placeit-egfu6k"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe are sick of using remote controllers in the era of smartphones.\nWhat it does\nUsing the LEAP MOTION SENSOR, we use human gestures to control a Parrot AR Drone.\nHow we built it\nWe used the PS_Drone api and the LeapMotion API to program it in python\nChallenges we ran into\nCommunication between the LEAP and the computer, and between the computer and the drone is really tough\nAccomplishments that we're proud of\nWe accomplished in making the drone fly using basic motions, manipulating the vertical speed, yaw, roll and pitch of the drone's orientation and movements.\nWhat we learned\nWe learned how to use API effectively, as this is our first hackathon as a team, it was really hard at the beginning, but then we adapted and managed to finished our basic features.\nWhat's next for LeapMotion Drone\nThis project is a pathway to the future, where drones, cars, and VR can be more adaptive using hand gestures, and even body gestures.", 
    "project_name": "LeapMotion Drone", 
    "project_tags": [
      "python", 
      "leap-motion"
    ], 
    "project_url": "https://devpost.com/software/leapmotion-drone"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nPokemon, Top Trumps and wanting to learn alexa\nWhat it does\nReads out the stats of a randomly generated pokemon card\nHow I built it\nUsing node.js and the services amazon provides to develop for the alexa so lambda and aws)\nChallenges I ran into\nGetting the alexa to work\nAccomplishments that I'm proud of\nGetting the alexa to work\nWhat I learned\nBetter use of node js\nWhat's next for Alexa Pokemon Card Generator\nMore cards, battle other people", 
    "project_name": "Alexa Pokemon Card Generator", 
    "project_tags": [
      "node.js", 
      "alexa"
    ], 
    "project_url": "https://devpost.com/software/alexa-pokemon-card-generator"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe're all busy students, we wanted to never forget something important again!\nWhat it does\nYou give us all your contact and social media details and set a reminder...we do the rest\nGet ready to be buried in an avalanche of notifications!\nHow we built it\nWith lots of coding and little sleep\nChallenges we ran into\nWe had lots of faff with making a server and then wrestled with way too many APIs, but made it in the end!\nAccomplishments that we're proud of\nWe built a thing that actually works!!\nWhat we learned\nAPIs be crazy\nWhat's next for Bomb Scheduler - Reminder App\nAdd all of the platforms until it's literally impossible to avoid your reminders (unless you sleep through everything)", 
    "project_name": "Bomb Scheduler - Reminder App", 
    "project_tags": [
      "python", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/bomb-scheduler-remind-app"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Harassment blocker was created as part of the #HackHarassment program, with the intention of preventing or reducing online harassment. \nThe program uses an IBM Watson API designed to analyse the tone of an provided message. By using this API, our program takes messages, posts, and comments online and is able to return a Boolean value based on the different emotional levels of the text - either the post is suitable or it should be blocked. This was achieved by using a Python Flask back-end to carry out this function, and a java-script google chrome extension client-side to allow access in the browser. \nThe primary challenge was accurately identifying the posts that were suitable as opposed to the posts that were classified as harassment and so should be blocked. This was achieved using a comparison of the results given by IBM Watson's Tone analyser, results are given as different levels of emotions in the provided text - for example Fear or Anger. By comparing the positive emotions to the negative ones, we were able to identify which posts were harassment and which were not with a reasonable level of accuracy. \nIn the process we have become experienced with the creation of Google Chrome Extensions as well as the difficulties of identifying negative content online. \nTo futher the harassment blocker project, ideas would include implementation in other browsers, and most importantly, development of our own algorithms to identify harassment rather than reliance on a outside API. This for instance would be extremely interesting to implement using Machine Learning in the future.", 
    "project_name": "Harassment Blocker", 
    "project_tags": [
      "html5", 
      "css", 
      "python", 
      "flask", 
      "jquery", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/harassment-blocker-vj8fsi"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWhen coming to the U.K. from the US for this hackathon, we found it surprisingly difficult to find cheap tickets. We theorized that if you could find the absolute cheapest flight from any city in the US to any city in Europe, you could connect with budget airlines for cheap.\nWhat it does\nOur website takes as input the user location, final destination, and their travel dates to find the main intercontinental flight. Currently, only North America and the EU are implemented.\nHow we built it\nWe wrote a program in Python and used Flask (Python Microframework) to interact with and feed data to the skyscanner API, as well as display the information using an integrated Google Maps API. Built simple website using HTML and CSS. This is how we get our price information and overall display.\nChallenges we ran into\nThe greatest challenge was figuring out how to get the API to return the information we wanted and how to give it the information it needed to do that. We also had formatting issues with the website we built for the project.\nAccomplishments that we're proud of\nWe are most proud of creating the Python algorithm that drives this program. No other service does exactly what we do and we're excited to have done something new.\nWhat we learned\nWe learned how to interface the API for the least amount of data possible and parse it for the desired results. Also learned better uses for Python, like how tuples worked, and how to interface skyscanner API.\nWhat's next for Smart Flights\nWe hope to implement connecting flights within continents to give users the absolute cheapest price. We would also like to implement the rest of the world and polish up the website.", 
    "project_name": "Smart Flights", 
    "project_tags": [
      "html", 
      "python", 
      "flask", 
      "css", 
      "google-maps"
    ], 
    "project_url": "https://devpost.com/software/smart-flights"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nIt was the challenge that most grabbed our attention. We really thought we could learn a lot from completing this project.\nWhat it does\nThere is a webcam live feed that takes a snapshot when the door bell rings. It detects the face of person or multiple persons with the click of a button, and sends the detected image to the \"owner\" via email. \nHow we built it\nWe started with a raw javascript webcam script that accessed the video tag of HTML5. In order to capture stills we had to change focus to angularJS to create our own webcam tag. In order to get around security problems of writing to disc\nthis webcam module must be hosted on a HTTP Server, we will be using python SimpleHTTPServer. Upon capturing a still, the image is sent to our own python server that we coded to accept a base64 string representation of an image. This is the medium through which we needed to send our image. Our server decodes the image and writes to disc. Our next python script takes said image from file store and uses the openCV API to detect any faces. If multiple faces are detected a separate image file is created for each. Finally we have a script that sends the cropped image to a user(person whose door this is) via email. \nChallenges we ran into\nNever used angularJS and the openCV before so the syntax was challenging to get our heads around at first. We also learned a lot about VirtualBox settings as that presented enough of a challenge on its own!\nAccomplishments that we're proud of\nIt works! Just to leave the weekend with a working product is awesome.\nWhat we learned\nUsing APIs. Introduction to writing our own server. Manipulating mail clients. Time management.\nWhat's next for Face Detect Doorbell\nImplementing face recognition so  that the doorbell recognises friends and relatives and can report who they are. Use the Messenger API instead of sending emails.", 
    "project_name": "Face Detecting Doorbell", 
    "project_tags": [
      "python", 
      "javascript", 
      "css", 
      "html5", 
      "angular.js"
    ], 
    "project_url": "https://devpost.com/software/face-detect-doorbell"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nDriven by love for music and innovation, we discovered Ultrahaptics, which makes your DJ experience real.\nWhat it does\nIt scans the moves of your hands, computes them and synthesizes an audio file in real time, while sending vibrations to towards each hand.\nHow we built it\nThe hand gestures are computed in C++ and the music is modified with a Pure Data.\nChallenges we ran into\nUsing CMake, finding a sound editor API, youtube API, connecting C++ to JS.\nAccomplishments that we're proud of\nHave a working prototype, learned about Pure Data and used a state-of-the-art device.\nWhat we learned\nUltrahaptics API, JS, Pure Data, more C++.\nWhat's next for Haptic DJ\nMore complex DJ features, hand gestures and different vibrations, based on the qualities of the sound.", 
    "project_name": "Haptics DJ", 
    "project_tags": [
      "c++", 
      "leap-motion"
    ], 
    "project_url": "https://devpost.com/software/haptic-dj"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe really love Artificial Intelligence and all that comes with it, therefore bettering the world using these as tools was the next obvious step\nWhat it does\nWe are building the future of baking. Transactions made easy. Just snap a picture of the receiver and we will send them the money for you. \nHow we built it\nWe started with the Microsoft Cognitive Services for the Face Detection. With the data we got from that, we would train our Convolutional Neural Network and further use it to recognize both the sender and the receiver.\nChallenges we ran into\nAt first, we started with a Deep Neural Network but soon we run into problems. We wanted to use it as it provided us with an easy way to deploy as we did not need to trouble ourselves with the feature selection. We ended up training our Convolutional Neural Network based on the features mined from the Microsoft API. \nAccomplishments that we're proud of\nThe face recognition runs better than expected at even small training data. We believe the execution will only improve as the sets will grow.\nWhat we learned\nWe learned that great things can be accomplished just by starting with a dream and 36 hours.\nWhat's next for Vision4Manchester\nLunch.", 
    "project_name": "Vision4Manchester", 
    "project_tags": [
      "python", 
      "flask"
    ], 
    "project_url": "https://devpost.com/software/vision4manchester"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe like to travel and we're passionate about memes\nWhat it does\nTreasure hunt game in a city where you get rewarded with memes everytime you finish a challenge\nHow we built it\nUsing Vlad's blood, sweat and tears\nChallenges we ran into\nAll of them... Literally anything you can come across \nAccomplishments that we're proud of\nThe project is working to a good degree and we learned a lot from it\nWhat we learned\nHow to work with google maps API and twilio and javascript and node.js. Learned how to solve problems after running into virtually every problem we could have run into\nWhat's next for MemeSnooper\nIt's snooping time", 
    "project_name": "MemeSnooper", 
    "project_tags": [
      "firebase", 
      "javascript", 
      "html5", 
      "jquery", 
      "twilio"
    ], 
    "project_url": "https://devpost.com/software/memesnooper"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nInspired by Stick RPG\nWhat it does\nHow we built it\nUsing Unity and C#\nChallenges we ran into\nAccomplishments that we're proud of\nWhat we learned\nWhat's next for UNISIM", 
    "project_name": "UNISIM", 
    "project_tags": [
      "unity", 
      "c#"
    ], 
    "project_url": "https://devpost.com/software/unisim"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nThe team started off with the idea of using the Twilio API to implement a bot of sorts, over telephony network (SMS)\nWhat it does\nIn its current state, Askii is capable of utilising the WolframAlpha computational knowledge engine to query for you, and respond within a short time (also some limited reddit usage)\nHow we built it\nPython for the majority of manipulation: listener server; reading input, passing to, and receiving from the WolframAlpha API, as well as processing for SMS output\nTwilio for telephony interface\nAndroid app to attempt to use different types of response\nChallenges we ran into\nQuery responses from WolframAlpha are variable in length, metadata, and content, therefore interpreting these was challenging in its complexity\nHandling of encoded unicode characters\nAccomplishments that we're proud of\nSuccessfully reading and replying to SMS, impossible without the Twilio API (huge help!)\nAndroid app as we had little prior experience with the development environment and implementation\nWhat we learned\nWeb is hard!\nHTML parsing, GET & POST requests using Python, SMS handling in Android, git / GitHub\nWhat's next for Askii\nMultiple web service capable - wikipedia / reddit / IFFFT\n(as long as you can code it, you can have it!)\nEasy plugin integration\nThanks for having us Manchester!", 
    "project_name": "Askii", 
    "project_tags": [
      "python", 
      "twilio", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/askii2"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nMobile games of the same genre. We decided to make one with a twist as it is realistic to make in 2 days.\nWhat it does\nGet through the labyrinth, pick up power ups to modify your journey. Find secrets, dodge traps and get the highest score you can! You control a ball that moves through a maze. Maximise your time to get the best score possible.\nHow I built it\nWe built it using unreal engine 4, made models with Maya and visual effects with the aid of photoshop. We seperated the tasks by the three of us. Vasile for map creation, Ezekiel for scripting/coding and Klavs for animations/visuals.\nChallenges I ran into\nBugs in scripting which took a while to fix, making the map interactive and fun and creating a user interface for the game.\nAccomplishments that I'm proud of\nCreating the base of a game that can be expanded in just 2 days, we added quite a lot of features and are proud of how much we got done.\nWhat I learned\nWe gained valuable experience in teamwork, using unreal for advanced scripting, advanced particles/animations and  creating an inuitive map and interface.\nWhat's next for Kinetic Dash\nWe hope to add more levels, features and polish up the game in the coming weeks and expand it to have a multiplayer mode. From there we will release it onto PC and Mobile and see how it does.", 
    "project_name": "Kinetic Dash", 
    "project_tags": [
      "photoshop", 
      "maya", 
      "unreal-engine"
    ], 
    "project_url": "https://devpost.com/software/kinetic-dash"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "", 
    "project_name": "Touch Team", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/touch-team"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWhat it does\nHow we built it\nChallenges we ran into\nAccomplishments that we're proud of\nWhat we learned\nWhat's next for SamiHack\nshave his hair", 
    "project_name": "SamiHack", 
    "project_tags": [
      "amazon-alexa"
    ], 
    "project_url": "https://devpost.com/software/samihack"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nFiverr was a major inspiration along with the common use of instant messaging for asking for favours.\nWhat it does\nThe website allows you to create a favour you wish for someone to do for you in exchange for your time used elsewhere in a one way platform.\nHow we built it\nWe used C# and ASP.NET Web Forms to build the entire system and a MySQL database for storing the data.\nChallenges we ran into\nOriginally we wanted to use the Google OAuth API but couldn't get it working with our implementation and went with just using an inbuilt login system. We also had issues with the inbuilt SQL Server implementation and went with a standard MySQL server.\nAccomplishments that we're proud of\nLearning how to use OAuth within C#\nCreating a functional website in ASP.NET\nWhat we learned\nSee above.\nWhat's next for Favourr\nWe want to extend Favourr and add more of the nice to have features to it and ensure that it would work in an online environment with concurrent users.", 
    "project_name": "Favourr", 
    "project_tags": [
      "c#", 
      "asp.net"
    ], 
    "project_url": "https://devpost.com/software/favourr"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nNational Geographic and travelling the world.\nWhat it does\nOdyssey is our method to make our users discover the world in an interactive way, by engaging their colour perception. By choosing one of our 360 colours, you can virtually travel to different places in the world.\nYou could also discover the world by enabling the face recognition system, and the places that you will discover will be\ninfluenced by your current feeling.\nA different Spotify playlist will be generated for each of our videos from different areas of the world:\nGrand Canyon, Sri Lanka, Gobi Desert, Costa Rica, Dominican Republic, Cocos Islands, Norway, Kuala Lumpur.\nIs Samsung VR you could actually use our application, to focus/click on a colour, and then to redirect you to a place that you need to find.\nAccomplishments that we're proud of\nFeatures:\n\nemotion recognition  which helps you find a place in the world, your emotion is associated with a colour from the spectrum\ngenerates a different playlist to listen to that day,\nenables you to find more educational information about the geographical areas that you are are discovering\n\nWhat's next for Odyssey\nFor further implementation in Virtual Reality, you could actually use our application, to focus\n3 seconds on a colour, and then to redirect you to a place that you need to find.", 
    "project_name": "Odyssey", 
    "project_tags": [
      "javascript", 
      "html", 
      "css3", 
      "spotify", 
      "youtube", 
      "google-maps"
    ], 
    "project_url": "https://devpost.com/software/odyssey-fb63zq"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe loved the idea of using image recognition to improve customers experience, although the technology is not quite there yet so we made a travel-inspired image recognition game.\nWhat it does\nYou play in small groups of friends either in the same location or in different places. You are given 5 things to take pictures of, within one minute. The first one to get them all wins!\nHow we built it\nThe front end is an Android app. It communicates via socket.io to a node.js server that keeps track of the session and sync. The images are recognised using Google Cloud Vision API's.\nChallenges we ran into\nIntegrating the API with the Android was a challenge. We tried multiple APIs, settling with Google's for precision and generous trial plan. Multithreading caused some weird issues.\nAddressing heavily nested objects took several attempts in node.js.\nAccomplishments that we're proud of\nHaving no experience with node.js and socket.io we were surprised what we managed to achieve.\nWe were surprised to obtain a rather polished app after going through various designs.\nWhat we learned\nNode.js and socket.io\nImage recognition API's behave weirdly quite often. (e.g. sometimes pens are recognised as shotguns)\nWhat's next for SnapIt!\nThe server now runs locally but we are planning to have it available on the cloud with multi-server support.\nMore game modes e.g. random group creation.", 
    "project_name": "SnapIt!", 
    "project_tags": [
      "socket.io", 
      "java", 
      "android", 
      "android-studio", 
      "node.js", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/snapit"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe were inspired by the presentation of the CakeSolutions guy (Alex i think).\nWhat it does\nIt is a bell with a camera linked to it which detects your face and will do a specific action depending if it detects a person or not, and it send an email with a picture of the person in front of the door.\nHow we built it\nUsing pycharm and the opencv library.\nChallenges we ran into\nFinding a way to respons to your emotion, which we did not implement at the end. \nAccomplishments that we're proud of\nWe are proud that most of the things we wanted to do we managed to achieve.\nWhat we learned\nImage processing, python, and how to work together as a team. \nWhat's next for Future Bell\nTransforming it into a product which will be in every household :) .", 
    "project_name": "Future Bell", 
    "project_tags": [
      "python", 
      "opencv", 
      "pygame"
    ], 
    "project_url": "https://devpost.com/software/future-bell-6p7w4h"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nLife\nWhat it does\nIt's a way to keep track of fake profiles, people, who use social media as a harassment platform or in general have questionable intents. It is a chat bot which allows people to report such behaviour along with some details and the offenders name or phone number. Later this can be accessed by looking up one of the latter, allowing people to check if their new facebook friend or aquaitance has a history of disrespectful behaviour.\nHow I built it\nUses the recast.ai API and node.js\nChallenges I ran into\nNot knowing node.js at the beginning, difficulties with building conversation flow.\nFuture Plans\n//TODO facebook (friendlist) integration", 
    "project_name": "CreepBot", 
    "project_tags": [
      "javascript", 
      "node.js", 
      "postgresql", 
      "heroku"
    ], 
    "project_url": "https://devpost.com/software/messenger-bot"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "What it does\nThe game is about a character travelling the UK trying to visit as many cities as possible in order to gathe rpoint. but crime rates in different cities are decreasing its health stats. So the character must pay for healthcare.\nChallenges we ran into\nBig Data Challenge - Used data.gov.uk for information like hospitals locations and police.gov.uk to get info about crime rates n different cities across the UK.\nGaming Challenge - Our project is a travel themed game", 
    "project_name": "UK Big Data Travel Game", 
    "project_tags": [
      "three.js", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/uk-big-data-travel-game"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nUniversity can be very lonely, especially for shy, first-year students. Sometimes, all you want is somebody to hang out with for lunch, for a beer, for a movie, maybe for the length of a flight. You're not alone in the struggle. Many other people may be looking for the very same thing. How about we bring two lonely kids together for coffee and conversation?\nAskOut aims to do just that: facilitate contact and the inner courage in everybody to ask out a complete stranger.\nWhat it does\nAskOut is a web-app, pinpointing all users in close proximity to each other and allowing them to talk to each other and organise a meet-up. It displays interests and topics of discussion, so that, if small talk fails, you can always bring out the big questions and see yourself fall into an enthralling conversation on politics, religion and whether or not Mary Poppins is a trickster God.\nYou have to register an account and enter short edgy bits of information about yourself, that could start a conversation and keep it going. You can login, logout, update your information.\nCheck it out HERE: 80a3e5ca.ngrok.io (Temporary Link)\nHow I built it\nThe design is meant to be minimalist and easy to navigate, as well as robust across platforms and browser sizes. All forms works and are meant to improve the user experience. A mixture of Web-design and PHP was required for the final result.\nChallenges I ran into\nInitial plan included Cordova and Twilio integration, but it proved impossible to implement on time.\nAccomplishments that I'm proud of\nA beautiful website and having pushed my team in a direction with a lot of potential. The PHP Nikita wrote is quite impressive and I was thrilled to have worked with him and Ilias on this idea.\nWhat I learned\nTeamwork, team management, advanced CSS and forms.\nWhat's next for AskOut\nImproved PHP, ability to add personal pictures, Twilio implementation for chats, turning everything into an app, perhaps even pushing it on Google App Store.", 
    "project_name": "AskOut", 
    "project_tags": [
      "javascript", 
      "java", 
      "css", 
      "html", 
      "php"
    ], 
    "project_url": "https://devpost.com/software/askout-fl9xgv"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nWe wanted to make it easier to people to gather together and explore different cities' culture and sights.\nWhat it does\nImagine you are an English person who goes to the Bahamas for the first time ever in you life. You want to socialize and do sightseeing, understand something new about the culture of that distant place. If you are a user of our app you are given a number of suggested routes in a menu and you pick one. Each route has a starting point so all the users who want to visit the same tour should gather together at the starting point at predefined time, meet with each other and visit all the places from the picked option. The role of Twilio is to make sure that all the users are notified about the incoming beginning of the gathering. All the users are being sent an smses reminding them about the gathering. Our virtual guide using google maps' functionality shows the group around an array of landmarks and sights in general. \nHow we built it\nWe used android java, android studio and SQLite\nChallenges we ran into\nVarious debugging problems, the difficulty of binding a database to an android app, and 'querrying' it in java. Database architectural issues.\nAccomplishments that we're proud of\nThe teamwork was top quality and even at the very early stages of the day we were concentrated and devoted entirely on the project.\nWhat we learned\nWe gained more complete understanding of how databases work, how to build and structure them. We understood a lot about how to the view system of Android, resource loading and debugging.\nWhat's next for TourTeam\nWe may continue its development.", 
    "project_name": "Tour Team", 
    "project_tags": [
      "android-studio", 
      "sqlite", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/tourteam"
  }, 
  {
    "hackathon_name": "StudentHack V", 
    "project_description": "Inspiration\nBeing our first ever app we wanted to combine many functionalities while still making something catchy and innovative.\nWhat it does\nIt is both a skill for Alexa that challenges you to recognize some of the world's most iconic places just by a (more or less) vague description and a text message game with the same functionality but which doesn't require and internet connection on the phone. The later was implemented through the Twilio API.\nHow we built it\nWe have used a piece of open source code from Krishnaraj Varma (https://github.com/krvarma/Amazon-Echo-and-Twilio) that allowed us to send text messages via Alexa which we have then altered to allows us to start the game on the phone by sending a text message to the target client. We have extended the code further to implement the interactive version of the game so you Alexa can ask you questions and you can respond.\nChallenges we ran into\nBeing new to Alexa and especially JavaScript it was difficult at first to make sense of the code and understand it well enough so we can model it to our advantage. Also debugging on AWS was a bit of a pain. \nAccomplishments that we're proud of\nWe are definitely proud of what we managed to achieve in such a short timeframe given the fact that none of us had done this before.\nWhat we learned\nI would say we all learned a great deal not only about JavaScript, Python and how they use libraries to implement awesome functionalities but also about development on AWS.\nWhat's next for Enigma\nEnigma 2.0 should find better strategies of implementing the question/answer part using maybe a decision tree structure , maybe make it work for many clients and add many different questions about different locations around the world while still keeping the informative aspect.", 
    "project_name": "Enigma", 
    "project_tags": [
      "javascript", 
      "python", 
      "twilio", 
      "amazon-alexa"
    ], 
    "project_url": "https://devpost.com/software/enigma-ocnjlz"
  }, 
  {
    "hackathon_name": "BullHacks", 
    "project_description": "DoYouThinkHeSaurus\nAn implementation of a thesaurus in Python using the algolia API.\nNone of it really works right now, but we tried.", 
    "project_name": "DoYouThinkHeSaurus", 
    "project_tags": [
      "php", 
      "html", 
      "python", 
      "css", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/doyouthinkhesaurus"
  }, 
  {
    "hackathon_name": "BullHacks", 
    "project_description": "Inspiration\nOn the train to BullHacks, we trying to come up with the idea of visualising trains in the real time using a 3D map.\nWhat it does\nThe website takes real time data from various rail services to get the position of trains on their journey, and then uses that data to build a 3D map. \nHow we built it\nWe used TransportAPI to get real time information about trains, including their origin and destination, and how late they are running. We then used various APIs from Network Rail to get the full schedule information for the various trains so we could track them on their whole journey. \nThe visualisation was built using Three.JS to build a 3D world with stations and trains. The train postion is updated as they progress on their journey.\nThe whole project is then hosted on an AWS Lightsail VPS.\nChallenges we ran into\nWe ran into many challenges in this project. First, it took a long time to decide how we would tackle the problem and the best techniques. We struggled to find the APIs we needed, since the Network Rail ones required manual account activation. \nOur first attempt at the server side code was in Node.JS, which we soon found to be quite difficult to get working. After a few hours, we decided to abandon Node and switch to using Ruby with the Sinatra library.\nOnce our network rail account was approved (at 9PM!), we could get the data from them we needed. However, it turned out this was only available as a 2.5GB JSON file! Turning this into a database we could use took over an hour for it to import!", 
    "project_name": "Train Tracks", 
    "project_tags": [
      "ruby", 
      "sql", 
      "javascript", 
      "three.js"
    ], 
    "project_url": "https://devpost.com/software/train-tracks"
  }, 
  {
    "hackathon_name": "BullHacks", 
    "project_description": "Inspiration\nMatt bought a linear motorised potentiometer - basically a slider like what you find on a sound mixing desk. The position can be moved by a motor, and it can sense when you're touching it.\nWe thought it would be a great idea to make a game (or set of games) using this as a controller, along with another potentiometer.\nWhat it does\nYou can use the pot to control the position of the putter in a golf game. When you putt, the potentiometer slides to one end, as if it was hitting the ball.\nHow we built it\nThe voltage of the pots is measured by an arduino, as well as whether or not the linear pot is being touched. These values are then sent via serial to the Raspberry Pi which is running the game. It works out what these values should correspond to in the game.\nChallenges we ran into\nWe first tried using H-bridges with an arduino to control the position of the linear pot, but ended up wiring it up wrong, and fried 2 of the things. Then we tried to use a RPi HAT with an arduino, which (surprise, surprise) didn't work. Eventually we had to settle with using the RPi, which was way more effort.\nAccomplishments that we're proud of\nEverything pretty much works, and we all learned something new about python and hardware.\nWhat we learned\nHow to control a linear motorised potentiometer (I love saying that).\nWhat's next for Potentio-meter\nWe have a lot of room to expand, especially through making more games. It would also probably be a nice idea to put the pots in some kind of enclosure.", 
    "project_name": "Potentio-meter", 
    "project_tags": [
      "python", 
      "arduino", 
      "raspberry-pi"
    ], 
    "project_url": "https://devpost.com/software/potentio-meter"
  }, 
  {
    "hackathon_name": "BullHacks", 
    "project_description": "Inspiration\nSort.AI is an Windows service concept that sorts your files automatically using the Google Natural Language API. While doing coursework, I noticed that my file system could be abit more organised. Thats when my friend and I thought about using AI to organise our systems so we don't have to. That's where Sort.AI comes, inspired from the winner of BrumHack 5.0 who used the Google Natural Language API.\nWhat it does\nSort.AI is told where your 'Sort Bin' is and opens each text document and places it into the correct location. For example a document about Dogs would go into the Animals folder.\nHow we built it\nUsing our experience with C# and knowledge within the Google Cloud API, we worked within the Visual Studio 2017 IDE to create both the form interface and the Windows Service. Unfortunately due to many things out of our hands we were unable to complete the Windows service. However, parts of the implementation have been included already, for example, the notification tray icon appearing and the ability to minimize to tray. We also used the Google Cloud API libraries to create our code.\nChallenges we ran into\nEverything! Literally everything, whether it was the API not connecting or the Windows service not running we came across many challenges while creating Sort.AI. Each of us had some form of battle whether it was against Visual Studio, GitHub or even the Google API. We collectively made decisions on how to tackle these issues including at times even swapping jobs around.\nAccomplishments that we're proud of\nBeing able to understand the Google API a bit better and design methods where we can utilise the API for the general market.\nWhat we learned\nIf in doubt, Google's about!\nWhat's next for Sort.AI?\nWe will possibly begin to develop on the idea after BullHacks however due to other commitments and projects this may be unlikely but we might regroup and focus on working on this product in the near future.", 
    "project_name": "Sort.AI", 
    "project_tags": [
      "c#", 
      "google-cloud"
    ], 
    "project_url": "https://devpost.com/software/bullhack1-0-sort-ai"
  }, 
  {
    "hackathon_name": "BullHacks", 
    "project_description": "Inspiration\nFakebook sounds like Facebook and that's pretty funny\nWhat it does\nFakebook lets you use a site that is like a clone of Facebook, and post as your friends.Also using Algolia you can search all of these posts.\nHow we built it\nWe split up the task with Iva and Callum on the front end, Adam working on Facebook login, and Aaron working on the Database.\nWe also used vagrant to make our environments identical.\nChallenges we ran into\nVagrant did not work on all of our machines :(\nHackers trying to hack into our site :'(\nXSS\nAccomplishments that we're proud of\nAWS Worked!!!\nAWS?\nWhat we learned\nNot to open source our API keys\nWhat's next for Fakebook\nAnother Lawsuit", 
    "project_name": "Fakebook", 
    "project_tags": [
      "javascript", 
      "node.js", 
      "html5", 
      "algolia", 
      "jquery", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/fakebook"
  }, 
  {
    "hackathon_name": "BullHacks", 
    "project_description": "Inspiration\nIf you're bored click the button.\nWhat it does\nClick the button and it will  take you to a website randomly from a list.\nHow I built it\nI used HTML, CSS, Javascript\nChallenges I ran into\nHad to figure out how to get it to redirect to the different websites.\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for Click Me\nStill thinking.", 
    "project_name": "Click Me", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/click-me"
  }, 
  {
    "hackathon_name": "BullHacks", 
    "project_description": "Inspiration\nMario Kart\nWhat it does\nDrive karts around a track! 4-player local split-screen!\nHow we built it\nNo sleep, and lots of trial and error.\nChallenges we ran into\nFeature creep\nAccomplishments that we're proud of\nSPLINES!!\nWhat we learned\nSPLINES!! Unity.\nWhat's next for BullKart\nPOLISH\nMore feature(-creep)", 
    "project_name": "BullKart", 
    "project_tags": [
      "c#", 
      "unity"
    ], 
    "project_url": "https://devpost.com/software/bullhacks17"
  }, 
  {
    "hackathon_name": "BullHacks", 
    "project_description": "Inspiration\nThe Financial Times\nWhat it does\nWhatever you ask it to, within reasonable effort\nHow we built it\nWith Passion\nChallenges we ran into\nWe couldn't tell which was which\nAccomplishments that we're proud of\nWe figured out the difference\nWhat we learned\nMay contain Minotaur\nWhat's next for What is the difference between a Maze and a Labyrinth\nWhat's the difference between people with beards and werewolves : discrimination !", 
    "project_name": "What is the difference between a Maze and a Labryinth", 
    "project_tags": [
      "sass", 
      "oxford-english-dictionary"
    ], 
    "project_url": "https://devpost.com/software/what-is-the-difference-between-a-maze-and-a-labryinth"
  }, 
  {
    "hackathon_name": "BullHacks", 
    "project_description": "Inspiration\nHaving dealt with simpler proc gen before, I decided to look into something a bit more in-depth after early ideas dried out.\nWhat it does\nCurrently generated a single chunk of a map, looking to be make infinitely expandable alter on.\nHow I built it\nWrote my own Diamond-Square algorithm to get the general shape of the map, then implemented a basic renderer and camera controls.\nChallenges I ran into\nDealing with Quaternion math in unity can be confusing.\nAccomplishments that I'm proud of\nIt performs reasonable well and generates quite fast considering how quickly I wrote it.\nWhat I learned\nRefreshed my memory on a lot of different aspects of unity. Learnt a lot about how unity deals with vectors and rotations in different scenarios.\nWhat's next for ProcGen Voxel Map\nGenerating more chunks as the camera moves, colouring the terrain dependent of height, moisture maps etc\nPossibly simulating natural processes such as erosion and tectonics.", 
    "project_name": "ProcGen Voxel Map", 
    "project_tags": [
      "c#"
    ], 
    "project_url": "https://devpost.com/software/procgen-voxel-map"
  }, 
  {
    "hackathon_name": "BullHacks", 
    "project_description": "Inspiration\nThe inspiration of this site was to help organisers of the popular party game http://www.playwerewolf.co/rules/ by allowing a host to create a lobby and participants to receive their role privately without the need for cards. \nWhat it does\nAllow for organisers to host, start and restart games of Werewolf.\nUpon realising that creating the entire app wouldn't be possible with just an hour left to go, we redirected our focus towards a new project... wherewolf. Simply type in your postcode and find out whether you should be worried about a wolf attack!\nHow I built it\nThe site uses jQuery, socket.io, node.js, javascript and some other magic\nChallenges I ran into\nMost of us had very limited web experience so learning sockets from scratch as an interesting time for us and caused us the most heartache.\nAccomplishments that I'm proud of\nWe learnt (albeit, to a non-fully functional degree) how to use web sockets. \nWhat I learned\nExpanded my knowledge of web technologies and got to play around with cool web technologies.\nWhat's next for Werewolf / Wherewolf\nStartup investment rounds", 
    "project_name": "Werewolf / Wherewolf", 
    "project_tags": [
      "node.js", 
      "javascript", 
      "jquery", 
      "socket.io"
    ], 
    "project_url": "https://devpost.com/software/werewolf-wherewolf"
  }, 
  {
    "hackathon_name": "BullHacks", 
    "project_description": "Inspiration\nFinal year project\nWhat it does\nSearches the solution for a matching string\nIt used to index it as well but searching indexes are hard\nHow I built it\nCoffee\nChallenges I ran into\nSearching indexes, sleep deprivation\nAccomplishments that I'm proud of\nNothing, I am so sad\nWhat I learned\nBit about indexing and all that jazz\nWhat's next for Visual Studio Searching Stuff\nI complete it and submit it for my final year project.", 
    "project_name": "Visual Studio Searching Stuff", 
    "project_tags": [
      "c#"
    ], 
    "project_url": "https://devpost.com/software/visual-studio-searching-stuff"
  }, 
  {
    "hackathon_name": "BullHacks", 
    "project_description": "Inspiration\nMy primary school ICT teacher made a similar one for our school and also games like, Secret of Monkey Island. \nWhat it does\nit takes you to the main landmarks in Birmingham and you have to collect puzzle pieces on the way. Bill, the spirit of the bullring bull is there to give you hints along the way. (Work in Progress)\nHow we built it\nRahima did all of the unity, c# stuff and also the bull. Kelsey found the images, the buttons and did the resource finding. \nChallenges we ran into\nMS paint has a limited number of undos and Rahima had to learn about how to do scenes and audio and all the Unity UI and view elements. We had bigger ideas but had to be realistic and start super small. \nAccomplishments that we're proud of\nWe've been to 1-2 hackathons in the past, but weren't confident enough to actually create something. So this is our first ever actual submission and demo. \nWhat we learned\n24 hours isn't a lot of time. We were a bit too relaxed at the beginning and didn't have time to make what we envisioned. Also learnt a lot about the technical aspects of game building. \nWhat's next for Bull Hunt\nWe'd quite like to finish it off and give it a nice UI. Some more challenges would also be nice.", 
    "project_name": "Bull Hunt", 
    "project_tags": [
      "unity", 
      "c#", 
      "mspaint"
    ], 
    "project_url": "https://devpost.com/software/bull-hunt"
  }, 
  {
    "hackathon_name": "BullHacks", 
    "project_description": "Inspiration\nThe Hackathon's deadline.\nWhat it does\nAllows the player to play as 2016 Presidential Candidate Bernie Sanders to crush world leaders and protect the all-important nuclear launch codes. \nHow we built it\nWe used the Python library RenPy, a visual novel library.\nChallenges we ran into\nGitHub posed a significant challenge for us, as well as the limited functionality of RenPy.\nAccomplishments that we're proud of\nThe game is finished :)\nWhat we learned\nHow to use RenPy and to be patient when coding.\nWhat's next for Go Go Bernie Sanders!\nMulti-character support and multiplayer.", 
    "project_name": "Go Go Bernie Sanders!", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/go-go-bernie-sanders"
  }, 
  {
    "hackathon_name": "BullHacks", 
    "project_description": "hackaTrack\nHackathon Event Tracker\nA Hackathon Tracker\nFeatures\n\nCountdown Timer to the end of the Hackathon\nEvent Panels to describe the official hackathon events\n\n\nEvent page also used to fully detail the page\n\nSponsor Panels with its own sponsor page\nMOBILE RESPONSIVE!!!\n\nProblems Faced\n\nUnderstanding Bootstrap correctly from simple front-end development\nUI Interface for usability and readability\n\nFuture Updates:\n\nIntegration with EJS or SQL\nStandard templates for all general pages\nIntegration \n\nCreated by:\n\nKelvin M\nMilton R", 
    "project_name": "hackaTrack", 
    "project_tags": [
      "css3", 
      "html5", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/hackatrack"
  }, 
  {
    "hackathon_name": "BullHacks", 
    "project_description": "Inspiration\na demo that does this but with less images\nWhat it does\nHow I built it\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for WebVR Image Dome\ntried to get bullhacks.tech", 
    "project_name": "WebVR Image Dome", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/vr-image-dome"
  }, 
  {
    "hackathon_name": "Hack@Brookes 2017", 
    "project_description": "", 
    "project_name": "portaudio expert", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/piano-2"
  }, 
  {
    "hackathon_name": "Hack@Brookes 2017", 
    "project_description": "Winning Student\nPurpose\nWe created a way for students to easily upload their timetables to Google Calendar as well share them with other students. We integrate Google Calendar with Amazon Echo to create a convenient tool for students to access their course schedules.\nTechnicalities\nWe extracted the calendar events from html files as json files, uploaded the files into the Google Calendar, and integrated it with the Amazon Echo.\nChallenges\n-The Calendar in the webpage was difficult to convert into the acceptable json files. \n-The Google Calendar API and OAuth2 integration\n-Alexa sometimes didn't recognize commands\nLearned About\n-OAuth2 protocol\n-Webpage scraping\nAuthors\n-Alice Ly\n-Andy Jiang\n-Damian Czarnecki\n-Omar Diab\nInstallation Notes\nDependency:\nPython 3.x,\nhttplib2,\nurllib,\nflask,\ngoogle-api-python-client\nIf you are setting up this for yourself, you will need to first set up OAuth 2.0 credentials such as a client ID.", 
    "project_name": "Winning Student", 
    "project_tags": [
      "html", 
      "python", 
      "css", 
      "google-calendar"
    ], 
    "project_url": "https://devpost.com/software/calendar-flask"
  }, 
  {
    "hackathon_name": "Hack@Brookes 2017", 
    "project_description": "Inspiration\nI love video games, and i like to create some.\nWhat it does\nIt's a video game where you should survive against zombie.\nHow I built it\ncoding in c# with Unity\nChallenges I ran into\nmake a full video game in one night\nAccomplishments that I'm proud of\nI make a genetic algorithm based on the Darwin theory about evolution\nWhat I learned\nhow to make a genetic algorithm\nWhat's next for Survive\nSurvive and live in other computers", 
    "project_name": "Survive", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/survive"
  }, 
  {
    "hackathon_name": "Hack@Brookes 2017", 
    "project_description": "A backend application which attempts to classify login attempts - easier for the user than 2FA, but more secure than blind acceptance of a single factor of authentication. See more at the pitch.", 
    "project_name": "Login Heuristic", 
    "project_tags": [
      "android-studio", 
      "django", 
      "python", 
      "bootstrap", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/https-github-com-josh-richardson-login-heuristic"
  }, 
  {
    "hackathon_name": "Hack@Brookes 2017", 
    "project_description": "Code on Android Studio\nPresentation on PowerPoint.", 
    "project_name": "Mooder", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/mooder"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "Inspiration\nUpon many hours of discussion we decided to maker a game and integrate it with alexa. since the theme of the hack is star wars and we all like Dungeons and Dragons we decided to combine the two. Later we decided to add Alexa to the control panel for the dungeon master.\nWhat it does\nA basic rpg represented with 2.5d graphics when a user moves around a map though a subset of rooms. Rooms can contain enemies, treasures or obsitcles in rooms and must collect the the treasures and kill the enemies without dieing first.\nHow I built it\nWith Java. Our lead developer Ryan W. Build the majority of the game with myself and Will M. Building the outscirts.\nChallenges\nI ran into\nThe main challenge of this was to get a working game within the time limit. Another problem we had was getting the echo to work within the department.\nAccomplishments that I'm proud of\nWe managed to make a basic form of the game.\nWhat I learned\nmany things. \nWhat's next for InternalServerError", 
    "project_name": "InternalServerError", 
    "project_tags": [
      "java", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/internalservererror"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "Inspiration\nMore and more students are catching what is called, the meme virus. Students with it lie in bed days on end tagging their friends on social media such as Facebook. It's time to tackle this problem head on.\nWhat it does\nMemeBlocker+ uses a trained neural net to classify scraped images on the current webpage into either 'Meme' or 'Not-Meme'. If the image falls under the category of meme, then it deletes it from the displayed html.\nHow we built it\nWe first built a database filled with thousands of memes and non-meme photos as our two categories. Next we trained our neural net using this database.\nChallenges we ran into\nAccomplishments that we're proud of\nUsing machine learning and helping reduce the meme virus.\nWhat we learned\nWhat's next for MemeBlocker+\nMemeBlocker+ can be expanded to replace non-meme pictures with memes if wanted using SIFT. A user could potentially ask for meme (or non-meme) images to be replaced with images belonging to a tagword of their choice.", 
    "project_name": "MemeBlocker+", 
    "project_tags": [
      "python", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/memevision"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "Inspiration\nStar Wars themed Hackathon! :)\nWhat it does\nThe fight against the Galactic Empire rages on, a Rebel X - Wing fighter jumps out of hyperspace to be met by an on-going battle within an asteroid field.\nHow we built it\nUsing an arduino in a lightsaber we get accelerometer and potentiometer readings to control the X-Wing via a node.js server.", 
    "project_name": "X-Wing Survival", 
    "project_tags": [
      "javascript", 
      "node.js", 
      "arduino", 
      "html5", 
      "css3"
    ], 
    "project_url": "https://devpost.com/software/x-wing-survival"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "Inspiration\nStar wars and the quote \"I am with the Force, the Force is with me\". Also, brainwaves.\nWhat it does\nYou put on the Emotiv headset and control the lightsaber with your brain to defend the empire from the innocent younglings.\nHow we built it\nWe used Emotiv API and additional applications to control the human brain. The game was made in blender software.\nChallenges we ran into\n1) Emotiv.\n2) Emotiv.\n3) ???? (Emotiv probably)\nAccomplishments that we're proud of\nWe spent 24 hours trying to make the Emotiv device work. And it works. Sort of. \nWhat we learned\nNever ever use the emotive SDK. Also, learnt to use blender and apply different software to work in pair.\nWhat's next for Brain Force\nWhen the SDK actually works, we'll be able to analyse peeks and troughs from alpha and theta brain waves to determine the concentration and flow control of the user to master the use of the Force.", 
    "project_name": "Brain Force", 
    "project_tags": [
      "blender", 
      "java", 
      "emotiv", 
      "python", 
      "c", 
      "git"
    ], 
    "project_url": "https://devpost.com/software/brain-force"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "stackhack", 
    "project_name": "Code4Food", 
    "project_tags": [
      "javascript", 
      "css", 
      "html"
    ], 
    "project_url": "https://devpost.com/software/stackhack"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "Inspiration\nWe wanted a way of finding out what the average person thinks about anything and everything.\nWhat it does\nSearches Twitter for opinions on a given subject.\nHow we built it\nIt's a website which makes a request to a node.js server, which retrieves and filters tweets to find opinions.\nChallenges we ran into\nTwitter API issues, client-server communication\nAccomplishments that we're proud of\nThe CSS, and the excellent functionality\nWhat we learned\nA lot of things about Node.js, JavaScript, and the Twitter search and embed APIs.\nWhat's next for What Does Twitter Think About...\nAlexa integration", 
    "project_name": "What Does Twitter Think About...", 
    "project_tags": [
      "javascript", 
      "html", 
      "css3", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/what-does-twitter-think-about"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "", 
    "project_name": "waves of focus", 
    "project_tags": [
      "java", 
      "android-studio"
    ], 
    "project_url": "https://devpost.com/software/focus-rmfa1z"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "Inspiration\nCan we not?\nWhat it does\nIt compiles\nHow we built it\nJava, Slick2d trial and error and sadness\nChallenges we ran into\neverything\nAccomplishments that we're proud of\nBorks why not\nWhat we learned\nCode am hard\nWhat's next for This guy's a \"space knight\"\nHe's depressed", 
    "project_name": "This guy's a \"space knight\"", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/this-guy-s-a-space-knight"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "Inspiration\nPersonalLife\nWhat it does\nmake people drunk\nHow I built it\nMercuriel\nChallenges I ran into\n24 hours\nAccomplishments that I'm proud of\nWorks !\nWhat I learned\nJava, JavaFX, Mercuriel\nWhat's next for Drink Wars\nNumber of groups", 
    "project_name": "Drink Wars", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/drink-wars"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "It works.... sometimes :P", 
    "project_name": "Asteroids", 
    "project_tags": [
      "java", 
      "processing"
    ], 
    "project_url": "https://devpost.com/software/stacshackiii"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "Inspiration\nWe are all native to countries outside the UK and often search for places to visit or consider moving to. However, we have found that current tools do not give us a good overview of a specific location.\nWhat it does\nPresents points of interest (e.g.  food, social areas, etc.) near a selected area, crime statistics, weather data, broadband connection speed, etc.\nAllows the user to select the place they want to search for.\nHow we built it\nJavaScript, CSS, HTML, JSON, NodeJS\nChallenges we ran into\nFinding APIs that would provide us with free data.\nAccomplishments that we're proud of\nEncompassing lots of different APIs into a usable, easy to read dashboard.\nWhat we learned\nAPIs can be expensive!\nWhat's next for AroundME\nWe hope to continue developing the product and introduce new information areas that would be of benefit. This includes creating different pre-set profiles that would auto select a range of points of interest to be displayed.", 
    "project_name": "AroundME", 
    "project_tags": [
      "javascript", 
      "css3", 
      "html5", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/aroundme-w785lc"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "Inspiration\nWe always wanted to know who would win in a fight between Donald Trump and Barack Obama.\nWhat it does\nGathers data using Wolfram Alpha's api on each celebrity.\nHow we built it\nUsing the api and a proxy node server which must be running on the machine it is accessed from (still a work in progress)\nChallenges we ran into\nBypassing the lack of a cross origin resource sharing policy that Wolfram Alpha have by using the node proxy.\nAccomplishments that we're proud of\nBarack Obama beats Donald Trump\nWhat we learned\nBarack Obama beats Donald Trump\nWhat's next for Celebrity Smackdown\nAdd celebrity images and winner image (lack of time)", 
    "project_name": "Celebrity Smackdown", 
    "project_tags": [
      "javascript", 
      "html5", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/celebrity-smackdown"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "Inspiration\nPartying.\nWhat it does\nWhen you tell Alexa a line from song lyrics it can:\n\nGet Alexa to sing the following lyrics.\nTell you its artist name and song title.\nPlay its Youtube video.\n\nHow we built it\n\nWe used Python.\nInteraction using Amazon Alexa through flask-ask.\nSongs titles from Last.fm Top Tracks API.\nLyrics from LyricsWiki.\nLyrics processing using NLTK.\nSongs searched using Youtube API.\n\nChallenges we ran into\nTune lyrics to feed into Alexa.\nAccomplishments that we're proud of\nIt works and is actually quite cheeky.\nWhat we learned\nWe got to learn all those new APIs.\nWhat's next for Auto DJ\nSleep.\n--Team Dark", 
    "project_name": "Auto DJ", 
    "project_tags": [
      "python", 
      "alexa", 
      "amazon-alexa", 
      "youtube", 
      "last.fm", 
      "nltk"
    ], 
    "project_url": "https://devpost.com/software/auto-dj"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "Inspiration\nSometimes you have a break of flow when making commands, this allows you to make them with ease\nWhat it does\nIt allows the user to make commands to atom through voice\nHow we built it\nWe used Node js for both programming Alexa commands and making the atom plugin\nChallenges we ran into\nAll the problems. Using librarys that were broken, St. Andrews firewalls\nAccomplishments that we're proud of\nAcually making the project we first defined\nWhat we learned\nWe learnt about using Alexa to create an application, and creating Atom plugins\nWhat's next for Hi D E\nExtend it for more commands, make it more robust when making commands", 
    "project_name": "Hi D E", 
    "project_tags": [
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/hi-d-e"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "Inspiration\nWanted to bang my mate, didn't I?\nWe wanted a game about wall banging and haven't used 3D modelling, as such we built it top down and changed some mechanics to work as with it.\nWhat it does\nSpawns 4 players into a small arena. Each player has controls on the same keyboard for movement and firing. This causes it to feel really interactive/cosy. They can shoot walls to make them their colour, if a wall is already your colour you can shoot through it. The aim is to make everyone your colour by shooting them.\nHow we built it\nWe implemented a grid system that contains information about a board. Then every time the game goes through the main loop it checks if anyone is trying to move, if they are it moves them as appropriate. If a player presses fire then they shoot a \"laser\" from themselves in the direction they are moving. Firing only occurs if the player is moving to force fast paced play.\nChallenges we ran into\nFor some reason certain keys were a little buggy while acting as the fire key but we mostly sorted it. \nNeither of us had ever used swing or other graphics systems for this sort of project and thus made that a bit annoying.\nAccomplishments that we're proud of\nDat interface doe but mainly a function game even if it isn't the prettiest.\nWhat we learned\nImplementation of a game style project in swing.\nWhat's next for BANGER\nBANGER 2: Now with new dimensions\n(A 3D version)", 
    "project_name": "BANGER", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/banger"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "Inspiration\nWe wanted a way to keep up with our events on Facebook, and wanted to make a hands-free way to interact with them\nWhat it does\nGets events that are coming up, and events that are happening in a given location\nHow we built it\nUses the Facebook API to get events\nUses bing maps to get geocode from a query\nUses SUTime natural language processing to parse time instructions (e.g. tonight, next week, before May)\nAll this included in an Amazon Alexa Lambda, written in Java\nChallenges we ran into\nFacebook API keys kept expiring\nThe Alexa API is very difficult to debug\nAccomplishments that we're proud of\nCreated a working interface for getting events\nUsed geocoding to get locations\nUsed natural language processing to get times\nWhat's next for Alexa Events\nNotifications\nInteract with events (accept invitations etc.)\nGoogle calendar implementation", 
    "project_name": "Alexa Events", 
    "project_tags": [
      "amazon-alexa", 
      "facebook-graph", 
      "bing-maps"
    ], 
    "project_url": "https://devpost.com/software/alexa-events"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "What is it\nYou know what, I am ridiculously tired of writing the same code over and over again. Would it not be better if somebody else wrote them for me?? This is where Diane comes into play. This Amazon Alexa-inspired helper with a voice interface is qualified coder that will save you the effort of writing endless \"print hello worlds\" and create an ideal environment for your creativity.\nWhat it does\nListens patiently for you to give it pseudo-code to translate into a programming language (Java, C and Python supported so far), as well as acting as a vocal command line interface to save you typing all those \"cd\"'s and \"mkdir\"s.\nHow we built it\nDiane is a parser that uses the sphinx4 Java library to parse voice input from either a microphone or a wav file into pseudo code or bash commands, which then get executed.\nChallenges we ran into\nTo reliably recognise human speech, sphinx4 has to be trained on a specific human's voice, which requires a large dataset of recordings and a knowledge of machine learning. We avoided that problem by narrowing down the dictionary to the bare minimum needed, which, as we found out, makes the speech recognition more reliable.\nWe have also had to dance around homonyms such as \"four\" and \"for\" and \"two\" and \"to\". Eventually Diane should be smart enough to deal with ambiguity from context, but that is beyond the scope of a 24-hour hackathon.\nAccomplishments that we're proud of\nWe have familiarised ourselves with a speech recognition library and strengthened our knowledge in parsing.\nWhat we learned\nSpeech recognition is a fiddly tool and natural language parsing is much harder than it seems!\nWhat's next for Diane\nSupport for more expressions, commands and languages, as well as better AI and the ability to deal with ambiguity.", 
    "project_name": "Diane", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/diane"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "Inspiration\nJ.P. Morgan Challenge\nWhat it does\nHow we built it\nChallenges we ran into\nAccomplishments that we're proud of\nWhat we learned\nWhat's next for Ninja kittens", 
    "project_name": "Ninja kittens", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/ninja-kittens"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "Inspiration\nThis currently no social media skill for the alexa. We wanted to take the useful aspects of social media and them easily accessible.\nWhat it does\nUses multiple APIs from to get data from your social media profiles and make posts. Once authorisation is given for all APIs we tried to use we can easily implement all three of our target social medias Instagram, Facebook and Twitter.\nHow I built it\nWe used AWS to create a Lambda function that used the APIs to retrieve data and send post requests based on the intents that were input (including custom slots for comment posting) into the alexa skill. \nChallenges I ran into\nThe AWS lambda function does not allow for extra node libraries to be brought in. This makes finding example code online quite difficult. The API authorisation was also a major problem.\nAccomplishments that I'm proud of\nWe managed to make the alexa work with instagram and had working code for posting comments that unfortunately did not fully translate through the alexa skill. We also have the twitter API working outside of the lambda function but again could not fully bring everything together.\nWhat I learned\nWe learned a lot about node and skills. We feel a lot more confident using the social media APIs\nWhat's next for Social Notes\nAdd more functionality and more APIs for a better experience", 
    "project_name": "Social Notes", 
    "project_tags": [
      "javascript", 
      "amazon-web-services", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/social-notes-3qr1di"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "Features:\n\nHear your notifications and mark them as read\nCheck details of your last activity\nGet the names of all your repositories and:\n\n\nGet the open issues\nGet the open pull requests\nGet the most recent commit message\nGet the most recent activity\n\nStalk a user to find out what they've done recently\nFind an angry programmer's commit message\n\nand more!\nTech:\nMain server runs on AWS Lambda using Python 2.7 (sadly Python 3 isn't available on Lambda yet), while the sign up runs on Flask with Python.", 
    "project_name": "GitHub Echo", 
    "project_tags": [
      "alexa", 
      "amazon-alexa", 
      "amazon-web-services", 
      "python", 
      "html5", 
      "javascript", 
      "css3", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/github-echo"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "Inspiration\nInspired by our immense love of Star Wars, we wanted to bring the experience of owning your own lightsaber to the world in the convinced of being in your pocket\nWhat it does\nYou can record your own voice or pick from a database of other recorded lightsaber sounds so pose as yours, when you swing your phone with all your Jedi might, it will sound just like the real thing!\nHow we built it\nWe used Python (using flask) for the sound server and Java (using Android Studio) for the UI and functionality of the app \nChallenges we ran into\nGetting the audio data between the server and the app\nAccomplishments that we're proud of\nCompleting this task and learning everything we did to overcome our challenges\nWhat we learned\nAndroid Studio mainly, especially android networking \nWhat's next for MySaber\nGalactic Domination!! (or maybe a smartwatch app or something)", 
    "project_name": "MySaber", 
    "project_tags": [
      "flask", 
      "java", 
      "android-studio", 
      "python", 
      "python-package-index"
    ], 
    "project_url": "https://devpost.com/software/mysaber"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "Inspiration\nWe wanted to build cool dev-ops tools with alexa\nWhat it does\nIt can manipulate docker and do stuff\nHow we built it\nPythom, some redis, some docker and trials with alexa\nChallenges we ran into\nAccomplishments that we're proud of\nWhat we learned\nWhat's next for DockBlock", 
    "project_name": "DockBlock", 
    "project_tags": [
      "python", 
      "docker", 
      "alexa"
    ], 
    "project_url": "https://devpost.com/software/dockblock"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "inspired, sponsored and motivated by snax.", 
    "project_name": "Snackshack", 
    "project_tags": [
      "java", 
      "emotiv", 
      "python", 
      "netbeans"
    ], 
    "project_url": "https://devpost.com/software/snackshack"
  }, 
  {
    "hackathon_name": "StacsHack III", 
    "project_description": "neutrino", 
    "project_name": "neutrino", 
    "project_tags": [
      "javascript", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/neutrino"
  }, 
  {
    "hackathon_name": "BCUHack 2.0", 
    "project_description": "", 
    "project_name": "FightAR", 
    "project_tags": [
      "unity", 
      "vuforia"
    ], 
    "project_url": "https://devpost.com/software/fightar"
  }, 
  {
    "hackathon_name": "Coventry University Computer Club Hackathon", 
    "project_description": "Inspiration\nThe election in America and head to head fight between Donald Trump and Hilary Clinton for running for the president.\nWhat it does\nSentiment Analysis on Twitter Posts using the Twitter API\nCollect tweets by using input from a user (Username or #ashTag)\nTweets are analysed and evaluated using Sentiment Analysis\nMachine Learning used for automation of the program\nAnalysis plotted on a graph to visualise public opinion on the matter\nHow we built it\nWe have built it by using Twitter API, Python and MySQL database. In python we have used multiple libraries, such as; TextBlob, Matplotlib and PyMySQL.\nChallenges we ran into\nTwitter API Limitations:\n180 Requests/15minutes\nPyQt4 GUI:\nNot extremely appealing\nLimited customisability\nMatplotLib type errors\nAccomplishments that we're proud of\nAchieved our main aim which was using sentiment analysis depending on polarity and subjectivity from scraped posts from chosen users/hashtags on twitter.\nWhat we learned\nUsing the Twitter API, larger team needed.\nWhat's next for SentiTweet\nFurther development of the project with more intuitive front-end design and analysis.", 
    "project_name": "SentiTweet", 
    "project_tags": [
      "twitter", 
      "python", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/sentitwitter-sj62y9"
  }, 
  {
    "hackathon_name": "Coventry University Computer Club Hackathon", 
    "project_description": "Went to a hackathon, saw they had one of the muse headbands and I gave it a go.\nI worked solo on this project.\nInitially I attempted to make it with openframeworks but I ran into issues and decided using Python would be a better approach about 18 hours in.", 
    "project_name": "brain watcher", 
    "project_tags": [
      "python", 
      "flask", 
      "redis"
    ], 
    "project_url": "https://devpost.com/software/brain-watcher"
  }, 
  {
    "hackathon_name": "Coventry University Computer Club Hackathon", 
    "project_description": "", 
    "project_name": "HackHamster", 
    "project_tags": [
      "amazon-web-services", 
      "amazon-ec2", 
      "amazon-rds-relational-database-service", 
      "html5", 
      "jquery", 
      "mysql", 
      "php", 
      "ajax", 
      "json", 
      "sql", 
      "css", 
      "bootstrap"
    ], 
    "project_url": "https://devpost.com/software/hackhamster"
  }, 
  {
    "hackathon_name": "Coventry University Computer Club Hackathon", 
    "project_description": "DeepHack\nAn deep learning system that will decide the best and easiest way to win some Hackathon swag\nWhat is it?\nDeepHack is a system based on big data analysis and deep learning with the focus of analysing the current hackathon scene. The main feature is the big data analysis based on over sixty thousand 'hacks' all hosted on Devpost.\nHow it works?\nWe built a web scrapper that scrapes all hacks from Devpost and later on parses all that data in an incredible small JSON, this JSON is imported in a mongo database, where we use aggregations and various methods of data analysis to find out correlations between various data. This Json is also fed into a Tensorflow model built by us Using a triple input with 5 biases to calculate what we call a DeepHack score, this score is supposed to approximate the amount of prizes one hack will win at a hackathon. At the current state we have around 75% accuracy on our predictions. However we believe we could easily increase this value to over 84% without a lot of work. However working with big data requires incredible amounts of time.\nThe problems\nThe hackathon went fairly easily. However we faced many big data problems along the way, waiting for over an hour for scrappers and parsers to run and even reaching a peak of over 80GB or RAM in use by a single process in our processing server.", 
    "project_name": "deepHack", 
    "project_tags": [
      "css", 
      "javascript", 
      "python", 
      "html", 
      "coffeescript", 
      "shell", 
      "mongodb", 
      "node.js", 
      "chart.js"
    ], 
    "project_url": "https://devpost.com/software/deephack-emi9rt"
  }, 
  {
    "hackathon_name": "Coventry University Computer Club Hackathon", 
    "project_description": "", 
    "project_name": "Trump Toupee", 
    "project_tags": [
      "unity"
    ], 
    "project_url": "https://devpost.com/software/trump-toupee"
  }, 
  {
    "hackathon_name": "Coventry University Computer Club Hackathon", 
    "project_description": "Inspiration\nWhen you're somewhere with little or no signal you have GPRS or EDGE or something equally as rubbish. But you're still gagging to tweet.\nWhat it does\nYou can text various commands to tweet,post to facebook and translate text.\nHow we built it\nUsing APIs such as Twillio for SMS, the Twitter API,Google Translate and Facebook-Graph API. Users may interact without a reliable internet connection.\nAccomplishments that we're proud of\nWe made a working service!\nhaltnproblem.tech", 
    "project_name": "SOS SMS", 
    "project_tags": [
      "python", 
      "html", 
      "css", 
      "javascript", 
      "twitter", 
      "facebook-graph", 
      "google-translate", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/sos-sms"
  }, 
  {
    "hackathon_name": "Coventry University Computer Club Hackathon", 
    "project_description": "Inspiration I wanted to create a 2D procedurally generated game\nWhat it does I creates procedurally generated terrain\nHow I built it I built it through Unity\nChallenges I ran into Worked alone for the whole period\nAccomplishments that I'm proud of Accomplished the procedural generation of platforms script\nWhat I learned Developing games alone for 24 hours is very hard\nWhat's next for Monsieur Monster I will work on it on my own time", 
    "project_name": "Monsieur Monster", 
    "project_tags": [
      "c#"
    ], 
    "project_url": "https://devpost.com/software/monsieur-monster"
  }, 
  {
    "hackathon_name": "WarwickHACK 2017", 
    "project_description": "Inspiration\nNeeded to know where to go\nWhat it does\nBuilds and shares maps and guides users\nHow I built it\nWith lots of difficulty\nChallenges I ran into\nAPI very hard to use cry face\nAccomplishments that I'm proud of\nWe made a map, it sort of works, we can track people\nWhat I learned\nNot to mess with arcgis\nWhat's next for TrackX\nAutomatic mapping, location tags", 
    "project_name": "Traxx", 
    "project_tags": [
      "javascript", 
      "esri", 
      "html", 
      "css", 
      "php"
    ], 
    "project_url": "https://devpost.com/software/trackx"
  }, 
  {
    "hackathon_name": "WarwickHACK 2017", 
    "project_description": "", 
    "project_name": "How_Does_Trump_Feel", 
    "project_tags": [
      "python", 
      "alexa", 
      "azure", 
      "amazon-web-services", 
      "machine-learning"
    ], 
    "project_url": "https://devpost.com/software/how_does_trump_feel"
  }, 
  {
    "hackathon_name": "WarwickHACK 2017", 
    "project_description": "Inspiration\nWe enjoy GIFs. We've used services like \"Gify\" which helpfully allow searching of a large index of GIFs but find that often the GIFs we want do not exist.\nWhat it does\nOur hack allows users to split their movies into frames, index captions and use these elements to generate niche GIFs on the fly. The aim was to be able to search such obscure phrases as \"I have the high ground\" and acquire exactly the GIF we have envisioned.\nAlong the way we integrated the ability to create and caption GIFs from a webcam very quickly. \nHow we built it\nWe split several films into their frames using ffmpeg and saved them in such a structure that would allow a selection of them to be easily accessed.\nTo build and search our caption index, we used nodejs to write a simple script which interprets .srt subtitle files and indexes them using elastic search. Each subtitle file has its entries indexed alongside their timestamps which is used to determine which frames from the movie are associated with the line being said. \nThe caption and associated frames is sent to the browser where we use gifshot to generate the GIF from the frames and overlay the caption (webcam GIFs are also generated client-side, similarly to this)\nChallenges we ran into\nThere are a lot of parts to this hack. We split our tasks between three people and then needed to stitch everything together quite close to the end.\nAccomplishments that we're proud of\n\nSomebody said \"This is quite possibly one of the coolest things I've seen at a hackathon\" and that's quite nice.\nSeeing the GIFs actually working was really nice\n\nWhat we learned\n\nSysAdmin skills\nTeam Workflow management\nSome pitfalls to avoid when using version control\nAaron has very good ideas aweh\nImage manipulation and GIF creation\nA little about searching\n\nWhat's next for Jiphy\nA lawsuit (also it would be really nice to index youtube videos and make the virtual machine much easier to use so that anybody can build their own GIF index)", 
    "project_name": "Jiphy", 
    "project_tags": [
      "ubuntu", 
      "java", 
      "elasticsearch", 
      "node.js", 
      "javascript", 
      "json", 
      "bash"
    ], 
    "project_url": "https://devpost.com/software/jiphy"
  }, 
  {
    "hackathon_name": "WarwickHACK 2017", 
    "project_description": "Lego Landscape\nDescription: Converts hightmap data into 3D landscapes make of LEGO bricks.\nClick here to try yourself\nLanguages Used:\n\nFront-End Web Development (HTML5/CSS/JavaScript)\nEsri ArcGIS for JavaScript API\nThree.JS\nSpecial shoutout from Esri: Richie Carmichael's Terrain Explorer\n\nImages Currently Include:\n\nCanyon\nGrand Canyon\nMount Everest\nHoover Dam\n\nCollaborators:\n\nJakub - University of Birmingham\nJames - University of Birmingham\nKelvin - Aston University\nHarvey - University of Birmingham\n\nProblems Faced:\n\nHaving to get WebGL to work co-inside with ArcGIS\nGetting to fix Three.JS's RequireJS declare methods\nSQL not working with AWS S3\nUnable to link Leap Motion Correctly due to poor documentation\n\nFuture Improvements:\n\nIntegration with Leap Motion Hardware\nHave it hosted", 
    "project_name": "LegoLandscape", 
    "project_tags": [
      "javascript", 
      "html", 
      "css", 
      "webgl", 
      "three.js", 
      "esri"
    ], 
    "project_url": "https://devpost.com/software/legolandscape"
  }, 
  {
    "hackathon_name": "WarwickHACK 2017", 
    "project_description": "Inspiration\nI came up with the idea because of my tutor at University of Birmingham, who cannot remember faces. So I decided to build a mobile application for people with this kind of desease (Alzheimer), who cannot remember associations of faces with names.\nWhat it does\nThe mobile application allows the user to develop their own face database, by being able to take a picture of a humans face, associate a name to it and save it to the database. Then they are able to recognize a face, by taking a picture of the desired person and get the name of the person returned.\nHow I built it\nI build it using Swift, Apple's lates programming language.\nChallenges I ran into\nUsing the Microsoft Face API with Swift was quite challenging, since there is no tutorial in Swift, just in Objective-C.\nAccomplishments that I'm proud of\nI am happy that I have a working MVP and it can MOST OF THE TIME recognize faces correctly.\nWhat I learned\nI learned a little bit about face recognition methods and how to use the Face API.\nWhat's next for DrFace\nThe next thing that I would do is to create my own face recognition API, because I found that the Face API is not always really accurate. And after that I would start optimizing the mobile app and add different features to it, like user browser or speech recognition for name input for images.", 
    "project_name": "DrFace", 
    "project_tags": [
      "ios", 
      "swift"
    ], 
    "project_url": "https://devpost.com/software/drface"
  }, 
  {
    "hackathon_name": "WarwickHACK 2017", 
    "project_description": "Just to upload something, since it was our very first touch with Unity, there's little things done. We plan to develop it next week at HackUPC (Barcelona).\nPlease, don't lose time with it. ;)\nThere's an .exe, a menu, a game scene with draggable cards and all the cards assets (108) converted to a usable image file using a Photoshop script.", 
    "project_name": "Illuminati", 
    "project_tags": [
      "unity"
    ], 
    "project_url": "https://devpost.com/software/illuminati"
  }, 
  {
    "hackathon_name": "WarwickHACK 2017", 
    "project_description": "Adams-Curry-Generator\nOur flatmate loves making curry. It's gotten to the point where he can't keep track of what spices he has and what he needs, so we decided to create this application for him! It allows him to look through his cupboards and specify ingredients, then scrape a recipe with those ingredients from a Mongo databases.", 
    "project_name": "Adams-Curry-Generator", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/adams-curry-generator"
  }, 
  {
    "hackathon_name": "WarwickHACK 2017", 
    "project_description": "Inspiration\nMake a tool to quickly deploy a web server for testing purposes\nWhat it does\nIt creates an ssh tunnel between the user's computer to the server which, hosts the port to anyone with an internet connection\nHow I built it\nWe wasted 16h on a Rust implementation to then give up and switch to Node.js a more usual approach\nChallenges I ran into\nRust type safety and really strict compiler can be a huge time consumer. Due to all the time wasted on Rust, I was unable to finish the full project but we did manage to achieve a usable stage.\nlink 139.59.173.210", 
    "project_name": "Quick Serve", 
    "project_tags": [
      "node.js", 
      "c"
    ], 
    "project_url": "https://devpost.com/software/quick-serve"
  }, 
  {
    "hackathon_name": "WarwickHACK 2017", 
    "project_description": "Inspiration\nWe wanted to make something fun and gimmick-y (as this is all of our first hackathon's), and thought what better than something that makes you look so wonderful!\nAs a gimmick, we decided to combat cyber-bullying in the most ridiculous way possible - if you take a photo of yourself, use our program to exchange parts of your face with other people's, then if somebody were to insult your picture - technically they're not insulting a picture of you! Instead they are insulting a collage of pictures of other people!\nWhat it does\nIt takes a 500x500 image (preferably of somebodies face!), and divides it into an n x n grid. It then swaps out each division of the grid to the 'most appropriate' face we could find! The 'most appropriate' part is decided by an algorithm we wrote in our program!\nHow I built it\nWe wrote it entirely on Java, throwing around several ideas and implementing them (such as being able to change how many 'divisions' in the image there are). We made sure to structure out program well throughout the event, documenting the files (albeit minimalistically), so that modification of the code was much easier (especially in the morning!).\nChallenges I ran into\nAlgorithmically, there were a few initial bugs in the program, which weren't originally obvious. However, we managed to spot all of them and now have a working Java program!\nWe wanted to develop this as an android application, however none of us have ever had any experience in this field.. we just about added a button to an app before we had to submit our projects!\nAccomplishments that I'm proud of\nIt compiled the first time we wrote it, somewhat amazingly! However, as complete novices with only 1 of us being confident in java (and none of us studying computer science), I think we are more amazed at the fact we got anything at all!\nWhat I learned\nWe developed our skills in Java, attended all 3 workshops in the afternoon (which were very helpful!), and we introduced ourselves to Android Studio. We also learnt to work together as a coherent team, and really enjoyed doing so!\nWhat's next for MakeMeBeautiful\nAs it\u2019s entirely written in java, we could probably make an android app out of it! \nWe could also seek to further improve the algorithm which finds the \u2018most appropriate\u2019 substitute for your face, and then swaps them out.\nWe could also add some facial recognition API, which detects faces, and automatically swaps them out for their new 'improved' face!", 
    "project_name": "MakeMeBeautiful", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/makemebeautiful"
  }, 
  {
    "hackathon_name": "WarwickHACK 2017", 
    "project_description": "The Beginning\nAs computer science students we basically run on coffee. With that there are some difficulties, especially lanes. It is awful to wait for 15 minutes for one coffee or not to get one because you only have five minutes in between lectures.\nThat is why we created coffee2.me, a coffee ordering system, optimized for mobile.\nWhat it does\nCoffee2.me is a coffee ordering system featuring user accounts, listing coffee shops around the user and the ability to directly order through the interactive system. Using client-sided javascript the user does not see the server working but gives him the experience of a native app.\nHow we built it\nWe used php 7 for everything server related and jquery for client-sided stuff.\nChallenges we ran into\nGetting the layout to work was sometimes tricky. Apart from that this laptop decided to shutdown in the process of submitting this here.\nAccomplishments that we're proud of\nIt works, isn't that wonderful.\nWhat we learned\nIf you have a dream... No seriously it was fun.\nWhat's next for Coffee2Me\nWe have to implement a dashboard for coffee shops, give the user control over settings and want to enable push notifications.", 
    "project_name": "Coffee2Me", 
    "project_tags": [
      "php", 
      "javascript", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/coffee2me"
  }, 
  {
    "hackathon_name": "WarwickHACK 2017", 
    "project_description": "Inspiration\nWe have a shitty computers so we decided to run games over aws instead.\nWhat it does\nrunning games\nHow we built it\nUsing steam on a Windows Server 2012 with a VPN server on there, running on a g2,2xlarge aws server.\nThat way we can use steam in-house streaming to run games on the aws machine from anywhere in the world.\nChallenges we ran into\nopenVPN is awful, slow connection speed as well.\nAccomplishments that we're proud of\nWe can play games.\nWhat we learned\nYou do not need a 2000 \u20ac build to be able to play triple A titles in 4K.\nWhat's next for Gaming on the go\nGetting it more stable, thinking about a modular system", 
    "project_name": "Gaming on the go", 
    "project_tags": [
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/gaming-on-the-go"
  }, 
  {
    "hackathon_name": "WarwickHACK 2017", 
    "project_description": "ToneAnalyserForReddit\nAWS\nI wanted to do something with Reddit API. While thinking about it I stumbled upon IBM's API that allows to gauge what kind of emotions are present in text. So I came up with an idea to merge both of these. My program parses Reddit's comments and then allows you to search for some topic and shows how often it was mentioned. It could help to determine that something is currently trending or being discussed particularly much and help to correlate event with that. Another feature is tone analysis. I used ToneAnalyzer API from IBM's Bluemix. The emotions shown are averaged over interval to show how they change. Sadly, free account only allowed me to make 1000 requests, so the only topic for which I could analyse emotions was Trump.\nIt was quite an interesting project as I had no experience with either of these APIs and this was my first time coding with Python, which made up most of the project.\nAt first I tried to figure out how PRAW API for retrieving content from Reddit worked. After that I needed to tie it with ToneAnalyzer. Lastly, I used PHP and Google Graph API to create interactive graphs.", 
    "project_name": "ToneAnalyserForReddit", 
    "project_tags": [
      "php", 
      "python", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/toneanalyserforreddit"
  }, 
  {
    "hackathon_name": "WarwickHACK 2017", 
    "project_description": "Inspiration\nWe feel like you should be rewarded if you have to walk outside, but especially if it's raining. And in London, that's pretty much every other day.\nWhat it does\nIt allows the user to insure themselves against bad weather (well, currently just against rain).\nHow we built it\nWe must have broken some kind of record in the number of APIs (at least ten!) we used on this project. Our email accounts were full of API keys by the end of the weekend!\nWe used the Yahoo Weather Api to get weather data for the front-end, and we built an API that scrapes weather websites and calculates payouts, in Haskell(?!).\nThe insurance uses smart contracts for Ethereum, written in Solidity, and we used Oraclize to validate the transaction.\nChallenges we ran into\nFinding a weather api that gives us exactly what we needed - we spent like 6 hours Googling the options and in the end we found that none of them were suitable, and working out a risk algorithm that was fair to both sides using the data we could get hold of.\nWriting web-stuff in Haskell was super tough (we started as a joke), but it was definitely a good learning experience!\nTurns out Solidity is pretty difficult to use too - it doesn't support most of the functionality you expect in a basic high-level language! We also ran into some concurrency issues - because we had to use the Web3 library to call Solidity methods in the Ethereum network.\nWe had one Git nightmare, but luckily we were able to recover pretty quickly.\nAccomplishments that we're proud of\nGetting all the components to communicate with each other.\nWhat I learned\nThat floats don't exist in solidity. :(\nWhat's next for wEther\nChanging the world, fixing everything. Insuring against low and high temperatures?", 
    "project_name": "wEther", 
    "project_tags": [
      "yahoo-weather", 
      "weather-underground", 
      "javascript", 
      "html", 
      "css", 
      "google-maps", 
      "meteor.js", 
      "jquery", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/weather-g8lp3r"
  }, 
  {
    "hackathon_name": "WarwickHACK 2017", 
    "project_description": "Inspiration\n** Financial problems for students **\n\n\u00a35.8 billion needed from Bank of Mum and Dad in the UK each year\n89% of students feel confident managing their finances.\nHowever, more than half of students use their maintenance loan before the end of term.\nInitial UK market of 2.28 million students\n1 out of 10 students will spend \u00a32,700 in the first fortnight of term!\n\nWhat it does\nIt connects up to a student's Monzo account and gets all their financial transactions and balance data. It then shows how much money they have their account. Additionally, it shows their recent transactions in a very easy to understand, categories way. This enables the student to understand their spending habits in a concise manner.\nALL THIS HAPPENS IN VIRTUAL REALITY.\nHow we built it\nMoneyBuddy is a web based VIRTUAL REALITY application which runs from within the web browser. It works on all modern desktop and mobile web browsers.\nThe VR world is built using the A framework inspired by Ada Rose Edwards. Each of the components including the coins, floating signs and the graphs are manually drawn using the polygons. We built the engine for drawing the graphs and the coins. The objects in the virtual reality world are built using various A-framework polygons attached together to form complex structures. \nChallenges we ran into\n\nDrawing components, complex structures and graphs in VR using very basic polygons.\nPerformance to rendering web based virtual reality when there are too many polygons on the screen.\nAuthenticating using JWT.\nUsing the A-Framework to draw shapes in VR and making them look realistic.\nIntegrating all sub-systems together to create the entire project.\nLack of documentation as this is very new.\n\nAccomplishments that we're proud of\n\nUsing the A-Framework\nCreate a web based virtual reality application\nUse the Monzo API and get transaction and balance data\nBe able to use the app in GearVR\n\nWhat we learned\n\nAttaching basic polygons to form complex structures.\nWork with the A-Framework.\nWorking with the Monzo API.\nAuthorisation via Bearer tokens (Javascript web tokens)\n\nWhat's next for Money Buddy VR\n\nIntegrate live data to show transactions in real-time.\nImprove performance.\nUse machine learning to help students budget.", 
    "project_name": "MoneyBuddy VR - Financial data visualisation 4 student", 
    "project_tags": [
      "node.js", 
      "amazon-web-services", 
      "javascript", 
      "npm", 
      "domain", 
      "galaxy", 
      "google-cardboard", 
      "html5", 
      "css3", 
      "samsung-gear-vr", 
      "apache", 
      "github"
    ], 
    "project_url": "https://devpost.com/software/money-buddy-vr"
  }, 
  {
    "hackathon_name": "WarwickHACK 2017", 
    "project_description": "Running out of time, cant fill this out!", 
    "project_name": "CompLing", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/compling"
  }, 
  {
    "hackathon_name": "WarwickHACK 2017", 
    "project_description": "Team AirDraw\nInspiration\nWhat if you could draw without paper or touchscreen? What if air was your medium? How about working with others? We explored the possibilities of working collaboratively, without physical touch.\nWhat it does\nAirDraw allows for wireless drawing on a collaborative whiteboard, by moving your fingers through the air to mimic the movements of a pen. Users can simultaneously draw and observe, with the \"air pen\", or opting for the traditional mouse movements. \nAirDraw provides \"air-pressure\" sensitivity, where moving closer forces the pen to draw on the collaborative inkboard, and moving back simply shows the cursor. There are also gestures available for convenience, such as swiping to rub the board. You're finally able to save the canvas as a PNG image.\nHow I built it\nSockets.io was used to transmit data between all the collaborating clients. Native HTML5 canvas drawing techniques were used to draw onto the boards. Finally, the Leap Motion device was used to detect air gestures and air pen movements. \nChallenges I ran into\n\nIntegrating Leap Motion into Node and the Javascript API\nCalibrating the Leap Motion to produce reasonable movements.\nProducing replays, and socket mayhem.\nDrawing to canvas (or lack of!)\n\nAccomplishments that I'm proud of\n\nDrawing to canvas\nBasically completing all the challenges we faced above.\nProducing a collaborative prototype that works across multiple devices.\n\nWhat I learned\n\nHow to use HTML5 canvas\nHow to integrate Leap Motion with Javascript\nWorking with variety of technologies as newcomers and oldcomers alike.\n\nWhat's next for Airdraw\n\nFurther calibration for accuracy.\nUser rooms for different meetings.", 
    "project_name": "AirDraw", 
    "project_tags": [
      "leap-motion", 
      "node.js", 
      "html5", 
      "canvas", 
      "websockets", 
      "socket.io", 
      "css3", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/airdraw-skermj"
  }, 
  {
    "hackathon_name": "WarwickHACK 2017", 
    "project_description": "Inspiration Wow\nWhat it does\nHow I built it\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for Improv Story", 
    "project_name": "Improv Story", 
    "project_tags": [
      "python", 
      "flask", 
      "html"
    ], 
    "project_url": "https://devpost.com/software/improv-story-1x7y5g"
  }, 
  {
    "hackathon_name": "WarwickHACK 2017", 
    "project_description": "Inspiration\nProviding secure communications over proprietary chat apps in a way that is seamless for the end user and gives them full control over their security without having to trust a third party.\nWhat it does\nProvides a seamless PGP encryption over facebook chat.\nHow we built it\nIt is a Chrome extension that uses openpgp.js and jquery to edit messages available in active facebook chats to decrypt encrypted messages in real time and provide an easy way of encrypting them in the same page.\nChallenges we ran into\nFacebook source is a nightmare to navigate.\nMinimal knowledge of webdev and javascript when starting the project.\nCaching issues in Chrome caused literally hours of painful and useless debugging.\nWhat we learned\nJavascript was a mistake.\nWhat's next for Cryptom\nEasy to set up encryption on a chat by chat basis.\nEncrypting messages directly from the facebook text box rather than the extension button.", 
    "project_name": "Cryptom", 
    "project_tags": [
      "javascript", 
      "chrome", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/cryptom"
  }, 
  {
    "hackathon_name": "StrathHack17", 
    "project_description": "Inspiration\nThe need for a faster and more comfortable way to obtain information about student loans. We wanted to make it as easy to access and use as possible. That's why we chose to have our chat bot on Facebook Messenger, eliminating the need to install a separate app. It also works on Skype, just to be sure it is as easy to reach as possible!\n   We also started working on a website to handle queries using voice recognition. Right now it recognizes voice and outputs it to text. This can now be passed to our bot to handle the rest.\nWhat it does\nWe have trained the bot to answer a number of questions about student loans. Application process, tuition fees, how you will repay the loan etc. Apart from that,  If you still have questions, after asking you where you're from, it can put you in touch with a student from your country who has experience with student loans so he can give you some tips.\nHow we built it\nWe used node.js for our scripts. We created a bot using the Microsoft bot framework. Then, using the messenger platform for developers, we connected it to our Facebook page. Now the input from the user would be passed by the bot framework to our server, hosted using ngrok. The input was passed to our RECAST.AI bot, which we trained to recognize multiple intents. We made it recognize the key words, as well as more natural language (e.g \"uni\" or \"postgrad\"). This would provide another layer of comfort for the user. After the input is interpreted, the appropriate answer is sent to the user.\nChallenges we ran into\nNone of us had done anything like this before. We had no idea how any of the services we used worked, or even what the syntax of node.js was.\nAccomplishments that we're proud of\nWe made a bot! It talked back, it answered our questions! We managed to understand new technology quickly, and most importantly understand what else we need to learn in order to make better bots.\nWhat we learned\nApart from the languages and individual services we used for the first time, we managed to learn how to use them all at once. We learned that connecting services to a script and one another is not as tough as it looks.\nWhat's next for SLC: The Bot.\nThe bot's intents are implemented in separate files. This means new things can be added quickly, and parts can be updated. In the future, we could make the bot understand language even better, add new things it can answer or connect it to a database of information regarding your personal student loan. The data provided by Recast.ai also has many other components, like sentiment analysis, which could be used.", 
    "project_name": "SLC: The Bot.", 
    "project_tags": [
      "node.js", 
      "html5", 
      "css3", 
      "json", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/slc-the-bot"
  }, 
  {
    "hackathon_name": "StrathHack17", 
    "project_description": "", 
    "project_name": "Loanly", 
    "project_tags": [
      "python", 
      "node.js", 
      "html5", 
      "css", 
      "javascript", 
      "amazon-web-services", 
      "twilio"
    ], 
    "project_url": "https://devpost.com/software/loanly-m8q4lj"
  }, 
  {
    "hackathon_name": "StrathHack17", 
    "project_description": "SLC App\nMemeworks, Inc.\nThis is a webapp made with Google's Material Design standards in mind. Since it runs in the browser, it can be used on both Desktop and Mobile. When adding it to the Home screen (on Android, at least), it appears to function pretty closely to a native app.\nIt has:\n\nVoice recognition search\nKeyword identification, making adding new actions extremely easy\nText-to-speech results, so you can talk to the app and it will talk back\nData visualisation and retrieval, making it easy to find out loan information", 
    "project_name": "Memeworks - SLC App", 
    "project_tags": [
      "html", 
      "python", 
      "css", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/strathhack2017"
  }, 
  {
    "hackathon_name": "StrathHack17", 
    "project_description": "Inspiration\nWe weren't able to do the assigned challenge for multiple reasons, including a lack of required skills. So we came up with our own. We visited the MLH hardware lab to see what was avaliable, then came back to the desk to brainstorm ideas. We eventually settled on Secret Handshake\nWhat it does\nSecret Handshake is a 'proof-of-concept' app which uses hand gestures to perform user authentication\nHow we built it\nWe used version 2 of the LeapMotion SDK, along with java, to build Secret Handshake\nChallenges we ran into\nGetting the same versions of the SDK installed and working on our machines.\nDetecting the individual digits on click\nConfiguring the sensitivity of the password checker\nAccomplishments that we're proud of\nGetting it working within the time limit\nWhat we learned\nHow to work with the Leap Motion API\nUsing git branches is veryy very important\nWhat's next for Secret Handshake\nFinding a way to make it easy to slot into another application for authentication, and improving the accuracy of the detection.", 
    "project_name": "Secret Handshake", 
    "project_tags": [
      "java", 
      "leap-motion"
    ], 
    "project_url": "https://devpost.com/software/secret-handshake"
  }, 
  {
    "hackathon_name": "StrathHack17", 
    "project_description": "Classic game implementing  modern technology\nUses the neuro headset to identify moves and gestures\nTake readings from the headset and translate them into movements\nSetting the headset up\nThat we learn a new technology\nHow brain waves can be read\nMaybe implement mind commands", 
    "project_name": "NeuroPong", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/neuropong"
  }, 
  {
    "hackathon_name": "StrathHack17", 
    "project_description": "Strathack17 -\nThis is the repository for team", 
    "project_name": "strathack17-union", 
    "project_tags": [
      "php", 
      "javascript", 
      "html"
    ], 
    "project_url": "https://devpost.com/software/strathack17-union"
  }, 
  {
    "hackathon_name": "StrathHack17", 
    "project_description": "Inspiration\nWhat it does\nIt is a system that offers Union Web Services, mostly listing adverts.\nHow we built it\nWe started by gathering the requirements, coming up with the initial designs, spiting up the tasks between the member's, and continuously improving and building on top of what we have.\nChallenges we ran into\nSynchronising the project between members.\nAccomplishments that we're proud of\nDeveloping a working system from scratch in a short period of time.\nWhat we learned\nEveryone learn new technologies and techniques for developing web apps.\nWhat's next for StrathclAD", 
    "project_name": "StrathclAD", 
    "project_tags": [
      "php", 
      "css", 
      "javascript", 
      "html5", 
      "bootstrap", 
      "jquery", 
      "mysql", 
      "netbeans", 
      "phpmyadmin"
    ], 
    "project_url": "https://devpost.com/software/lackofabettername"
  }, 
  {
    "hackathon_name": "StrathHack17", 
    "project_description": "Hammertime\nRestful Web Service & React.Js Front End\nWorks With\n\nEclipse Neon\nJava JDK 1.8 (Not Just Java JRE)\nProject Lombok (Must Be Installed To Eclipse Locally)\n\npom.xml: META-INF/MANIFEST.MF (No such file or directory)\nhttp://stackoverflow.com/questions/14659891/m2e-wtp-error-path-target-m2e-wtp-web-resources-meta-inf-manifest-mf-no-such", 
    "project_name": "Hammertime", 
    "project_tags": [
      "javascript", 
      "java", 
      "html", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/hammertime-gruj76"
  }, 
  {
    "hackathon_name": "StrathHack17", 
    "project_description": "Mouse control", 
    "project_name": "TabsVsSpaces", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/tabsvsspaces"
  }, 
  {
    "hackathon_name": "StrathHack17", 
    "project_description": "Basically we got told to do some things so we done some things and this is the things that we done\n_ ta da _", 
    "project_name": "SLCApp", 
    "project_tags": [
      "python", 
      "html", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/team_name"
  }, 
  {
    "hackathon_name": "StirHack", 
    "project_description": "Inspiration\nA few months ago I read a report on a Google service that imposed censorship on certain offensive words and phrases, and substituted them for others. Although I question the legitimacy of this claim, I am convinced that censorship is not the way to defeat online and offline harassment.\nWhat it does\nThe Android keyboard (soft input device) that we developed is based off an older version of the vanilla keyboard. It reads and temporarily stores a buffer of the last 30 characters typed with it, and analyzes it against a dictionary of words that might be used to harass someone. The list, for the purpose of this project, has been kept as family friendly as possible, and is more of a demonstration of the potential capabilities of software like this. The software briefly interrupts with a message to the one typing, when it deems that potential harassment may occur as result of the message.\nHow we built it\nWe built the application by using an older version of the vanilla Android soft input device, that is available on the Google Git. We did an override of the method calls that it makes to the system, and added our own code into it. We used Android Studio for that purpose. \nChallenges we ran into\nUnderstanding how the original keyboard worked was the main challenge for our group. None of us are active android developers, but we think that it is worth it to convey our idea in some way.\nAccomplishments that we're proud of\nManaging to make the user typing think twice about what they are sending without censoring their text, and without being too disruptive to the typing process itself.\nWhat we learned\nWe learned a lot about the android services and activities lifecycles, and how an android application works internally in general.\nWhat's next for Harassment Filter Android Keyboard\nWe would love to see opportunities to develop this idea into a finished product, with proper natural language recognition algorithms, that would void the need to use phrase dictionaries.", 
    "project_name": "Harassment Filter Android Keyboard", 
    "project_tags": [
      "java", 
      "android", 
      "android-studio", 
      "gradle"
    ], 
    "project_url": "https://devpost.com/software/harassment-filter-android-keyboard"
  }, 
  {
    "hackathon_name": "StirHack", 
    "project_description": "TeamCC\nTeam Coffee Compilers - StirHack 2017\nWe used domain.com and AWS vouchers to host the webpage. We made it as a progressive app that integrates a phone camera within HTML to upload pictures directly with your device.\nIt is envisioned that the upvote icons will be interactive and allow other users to endorse and rank maintenance issues.", 
    "project_name": "FixIt!", 
    "project_tags": [
      "python", 
      "html", 
      "css", 
      "django", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/teamcc"
  }, 
  {
    "hackathon_name": "StirHack", 
    "project_description": "Inspiration\nWe wanted to create accurate diet plans, based on blood test results. Also, we wanted to scan a barcode and find the nutritional values of the product using this.\nWhat it does\nIt scans blood test results and extracts the information, using Google Vision (text-recognition). Based on this, the app suggests diet plans to the user and checks whether products are suitable to eat (using the barcode to identify the product and its nutritional values)\nHow we built it\nDivided the group on front-end and back-end development. Front-end team made use of the Ionic2 framework, Angular2 and Typescript in order to create a GUI and deliver data (text-recognition) to processing. The back-end team integrated various APIs together in order to deliver accurate diet recipes and decide whether a product is suitable for the user, based on his blood tests.\nChallenges we ran into\nReading the 13 digit EAN of the barcode. \nFinding a recipe database.\nSynchronizing text recognition.\nAccomplishments that we're proud of\nManaged to develop the full application. Managed to use Google Vision (text-recognition) API.\nWhat we learned\nAdvanced skills in Node.js\nIntegrating multiple APIs together\nWhat's next for MediDiet\nBecome a part of the NHS Five Year Forward View. #MakeADifference #MakeItBetter", 
    "project_name": "MediDiet", 
    "project_tags": [
      "node.js", 
      "angular.js", 
      "ionic", 
      "typescript", 
      "edamam-nutrition"
    ], 
    "project_url": "https://devpost.com/software/medidiet"
  }, 
  {
    "hackathon_name": "StirHack", 
    "project_description": "The application is a work in progress. \nThe main elements are already complete; just some connections are not generated yet.", 
    "project_name": "Hatch", 
    "project_tags": [
      "android-studio", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/hatch-49ftim"
  }, 
  {
    "hackathon_name": "StirHack", 
    "project_description": "", 
    "project_name": "Assassins", 
    "project_tags": [
      "node.js", 
      "express.js", 
      "socket.io", 
      "javascript", 
      "mongodb", 
      "apache"
    ], 
    "project_url": "https://devpost.com/software/assassins-z9pgkh"
  }, 
  {
    "hackathon_name": "StirHack", 
    "project_description": "Need someone to help you out for a good did? \nYou have 5 minutes to offer your time? Or you want to catch up on your karma? Or maybe helping is your thing? \nOr you are a charity wanting the perfect volunteer for a specific task? \nWell, basically, any reason is good to use our app and website: VolunteerHere   (all under process)\nBased on finding the nearest charity with the timing that fits your schedule and with the best person for your charity, our app will bring smiles to our users faces.", 
    "project_name": "VolunteerHere", 
    "project_tags": [
      "android-studio", 
      "html", 
      "php", 
      "mysql"
    ], 
    "project_url": "https://devpost.com/software/volunteerhere-hjfeqv"
  }, 
  {
    "hackathon_name": "StirHack", 
    "project_description": "We are a team strongly focused on computing. We really enjoy coding diferent algorithms and resource-intensive programms.\nWe recently started reading about neural networks, and decided to do something useful with them.\nThe SignatureAuthentifier is a programm that uses neural networks and a set of signatures to learn how to identify a given signature while not being fooled by forges. While showing a small version of it, a complete programm would be extremely useful in any area where strong security is required.\nWe build it with a combination of Python to code images and C++ to do the computing bulk.\nThe biggest challenge was working with a  neural network, since we had never worked with one before. We used a third-party programm as the base, and then built on it to make it specific to solve our situation. Getting the data was sometimes hard, since changes in the light would trigger unintended responses. \nAs a team, we are really proud of what we have done. We have learnt how to work with neural networks from scratch, and been able to make a strongly efficient code, both in time and the size of the data set required. We feel like we really did what we wanted to do in a stylish way.\nWe have learnt how to choose a proper topology, how to spot errors in data sets that make the neuronal network contaminated, and A LOT about how neuronal networks work.\nThe next step would be making an embeded version for things like phones, safes and similars, the gadgets where it would really shine.", 
    "project_name": "Signature authentfication", 
    "project_tags": [
      "c++", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/sginature-authentfication"
  }, 
  {
    "hackathon_name": "StirHack", 
    "project_description": "Inspiration\nHonours madness.\nWhat it does\nIt skips (sometimes). Hates usb3.\nHow we built it\nThrowing code together to get mpv to play and skip, and read from a TTY on the host end.\nArtistically crafted, bespoke C++ code on the 'duino. \nChallenges we ran into\nX86 and ARC was a marriage made to be broken. An AVR would've been more reliable, and Serial over USB turned out to be really flakey.\nAccomplishments that we're proud of\nIt works when it feels like it.\nWhat we learned\nSome microcontrollers are very regressive and anti-progress when it comes to the latest universal serial bus specifications and implementations.\nWhat's next for Hit to skip\nYou tell me.", 
    "project_name": "Hit to skip", 
    "project_tags": [
      "arduino"
    ], 
    "project_url": "https://devpost.com/software/hit-to-skip"
  }, 
  {
    "hackathon_name": "StirHack", 
    "project_description": "stirhack-2017\nRepository for StirHack 2017\nA food guessing game thing.", 
    "project_name": "stirhack-2017", 
    "project_tags": [
      "css", 
      "python", 
      "javascript", 
      "html"
    ], 
    "project_url": "https://devpost.com/software/stirhack-2017"
  }, 
  {
    "hackathon_name": "StirHack", 
    "project_description": "productiv\nA tongue in cheek productivity app", 
    "project_name": "productiv", 
    "project_tags": [
      "python", 
      "html", 
      "css", 
      "django"
    ], 
    "project_url": "https://devpost.com/software/productiv"
  }, 
  {
    "hackathon_name": "StirHack", 
    "project_description": "Inspiration\nStudents no matter who they are enjoy ease of use. With this system, registration becomes much easier and less time consuming.\nWhat it does\nAllows students to sign into lectures, seminars and tutorials just by enabling Bluetooth at the beginning.\nHow we built it\nWe used a Raspberry Pi and Bluetooth API to detect bluetooth devices that once linked to a student, can be used to sign into lectures, seminars and tutorials without doing more than enabling bluetooth\nChallenges we ran into\nWe originally intended on using Java however as the current Raspberry Pi 3 does not support javac this halted this method and forced us into using Python; a language which none of us have much experience with\nAccomplishments that we're proud of\nWe managed to produce something which we honestly believe will make a difference. More than a simple in and out system.\nWhat we learned\nOver the course of the hackathon it feels like we have all learned another language; Python\nWhat's next for Bluetooth Registration System\nWe hope to get the university involved so that they can implement this into everyday life at uni making student life a little bit easier and a little bit less wasteful with paper", 
    "project_name": "Bluetooth Registration System", 
    "project_tags": [
      "python", 
      "bluetooth"
    ], 
    "project_url": "https://devpost.com/software/bluetooth-registration-system"
  }, 
  {
    "hackathon_name": "StirHack", 
    "project_description": "Train Your Spaceship\nStirHack Project\nThe aim of this project is to create a game where while you are playing you train your own bot.\nThe game is an spaceship battle with two player.\nThe bot works with a neural networks wich are train by the user when playing vs other users.\nAfter bots can play vs each other.", 
    "project_name": "TrainYourSpaceShip", 
    "project_tags": [
      "javascript", 
      "html", 
      "css", 
      "node.js", 
      "socket.io"
    ], 
    "project_url": "https://devpost.com/software/trainyourspaceship"
  }, 
  {
    "hackathon_name": "StirHack", 
    "project_description": "Inspiration\nThe task was to build something that would solve a problem, so we thought that people may have many problems and two heads are always better than one, thus this idea was born.\nWhat it does\nAllows users to chat with their anonymous peers who ended up with the same problem either through phone app or website.\nHow I built it\nWe built Android Client App using Java and Website Client using web technologies (HTML, JS, CSS). Then we used a server and maintained the communication between clients using yii2 framework together with Ratchet Web Socket library (all powered by PHP).\nChallenges I ran into\nError detection.\nAccomplishments that I'm proud of\nWe are happy about our teamwork skills because each member contributed a lot and carried out their responsibilities to the fullest. We are also proud that we managed to make the main idea and basic functionality of this piece of software to work.\nWhat I learned\nWe learned to use web sockets.\nWhat's next for ProbChat\nImplementing features which time did not allow us to do like flagging of offensive messages, filtering messages and possibly some auto-flagging, safety meter based on users score accumulated from upvotes and downvotes of other users he had conversation with. (will apply to ip address since this app is anonymous).", 
    "project_name": "ProbChat", 
    "project_tags": [
      "php", 
      "javascript", 
      "css", 
      "html", 
      "java", 
      "europeana"
    ], 
    "project_url": "https://devpost.com/software/probchat"
  }, 
  {
    "hackathon_name": "StirHack", 
    "project_description": "Analyticat\nGoogle analytics in real life\nAnalyticat was built during the StirHack 2017 MLH event, over the course of 24 hours.\nWhat is Analyticat designed to do?\n\nRegister IoT video sources to gain analytics about your customers; including:\n\n\na measure of recurring customers on an individual, but anonymous level, using AWS-powered facial recognition (you will not be able to track individual customers)\nestimate demographics including gender, age etc.\n\nView analytics in a clean dashboard. You can view analytics over various discrete timesteps (hours, days, weeks, etc.) for your registered video sources (or groups thereof).\nUtilise our own REST API so that you can use your own analytics data for something more unique!\n\n\nCurrent Functionality\n\nThe analyticat.net frontend mockup is available to view.\nOur REST API is somewhere in the region of 50% finished:\n\n\nfinished:\nemotional and sentiment analysis of people in uploaded images\ncheck similarity between two people in uploaded images\nnot finished:\ndemographic analysis (age, gender, etc.)\ncoordination and interfacing between the IoT layer, the front end and our AWS MySQL database\n\nWe currently have a camera watcher which continually watches over the default camera - whenever a face is detected the image is saved (but would be uploaded via our REST API upon completion).", 
    "project_name": "Analyticat", 
    "project_tags": [
      "amazon-web-services", 
      "opencv", 
      "d3.js", 
      "python", 
      "mysql", 
      "rabbitmq", 
      "digitalocean", 
      "apache"
    ], 
    "project_url": "https://devpost.com/software/analyticat"
  }, 
  {
    "hackathon_name": "StirHack", 
    "project_description": "Our Inspiration\nIn order that a flat, including ourselves, can easily cooperate and make sure that the kitchen and chores are kept under control. \nWhat it does\nIt allows the flat to collaborate in order to shop sustainably, no more buying 4 separate cartons of milk! This is done using a specific cyclic timeline events system. Keep track of finances, with completing reported chores (such as full trash) resulting in anti-fines; and easily split the money owed for the shopping in the process.\nHow we built it\nThe application is a fully responsive web based platform built in ruby on rails. Using a multitude of custom controllers and relational databases paired with algorithms to serve the application.\nChallenges I ran into\nInstallation of Ruby on Rails and cross-platform development.\nAccomplishments that we are proud of\nWe worked on technologies none of us are familiar with to create an application that solves a real world problem. We effectively used content collaboration tools to efficiently monitor progress of the project.\nWhat we learned\nMost of us had never used Ruby or Rails before so it was a good learning experience for all of us. This was also the first hackathon for most of us so it proved valuable in more ways than one.\nWhat's next for flatm8\nMany extra features planned to implement, including custom rotas for flatmates and QR codes for easy joining of a flat. Inclusion of APIs such as shopping apis for direct purchase and banking APIs such as Monzo would add to the fluidity of the application.", 
    "project_name": "flatm8", 
    "project_tags": [
      "ruby", 
      "ruby-on-rails", 
      "sass", 
      "sqlite"
    ], 
    "project_url": "https://devpost.com/software/flatm8-7odzak"
  }, 
  {
    "hackathon_name": "StirHack", 
    "project_description": "Inspiration\nWe initially wanted to build a power glove that a user could connect to their phone, but we weren't sure what exactly the user could then do with it. We solved this problem by exposing the glove to other apps on the phone as an API and building some sample apps ourselves.\nWhat it does\nThe glove has buttons on three of the fingers, that the user can press to control various things on their phone. Currently our sample apps are a trumpet synthesiser and a test scrolling application.\nHow we built it\nThe buttons are registered on inputs to the Micro:bit, that then exposes them in a BLE service to any phone that wants to connect to it. We have a base app that runs a service to talk to this Micro:bit and listen for these presses. This service then broadcasts these presses as events in the phone that can be subscribed to by any other app.\nChallenges we ran into\nBluetooth is really hard and neither of us had worked with GATT before. This caused a lot of problems. We also weren't able to solder due to health and safety constraints, so we had to wire together the glove using pliers, scissors, cardboard and lots of tape.\nAccomplishments that we're proud of\n\nThe wires run nicely through the glove\nWe got most of the GATT code working\nWe ended up getting IPC to work fairly quickly on Android\n\nWhat we learned\n\nHow Android services work\nMore about activity lifecycles\nThe BLE GATT flow\nRubber gloves are both good for hacking and very stylish\n\nWhat's next for yellow\nWe have an API, so the next step will be documenting it and releasing it to the world, perhaps in the form of build instructions.", 
    "project_name": "yellow", 
    "project_tags": [
      "android", 
      "c"
    ], 
    "project_url": "https://devpost.com/software/yellow"
  }, 
  {
    "hackathon_name": "StirHack", 
    "project_description": "Inspiration\nTry and describe what R&B is to the person next to you? It's really difficult isn't it?\nWhat it does\nPredicts music genre based on album artwork alone.\nHow we built it\nMillion Song dataset -> Spotify API -> Clarifai API -> Machine Learning -> Results!   <- Machine Learning <- Clarifai<- Google <- User Interface \nChallenges we ran into\nTried to build a web app, react is way harder than I remember.\nClarifai changing input types \nForgetting to install SQL\nPython3\nReading HDF5 files are farcical\nAccomplishments that we're proud of\nIt works!\nWhat we learned\nThere is a genre called 'Heavy Christmas' and people are really bad at guessing genre from album artwork. \nWhat's next for s4ML\nGoing back to our dissertations", 
    "project_name": "s4ML", 
    "project_tags": [
      "clarifai", 
      "spotify", 
      "python", 
      "bash", 
      "google", 
      "scikit-learn", 
      "pandas", 
      "numpy", 
      "sql", 
      "scipy"
    ], 
    "project_url": "https://devpost.com/software/s4ml"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "", 
    "project_name": "Flames of Agartha", 
    "project_tags": [
      "blender", 
      "unity", 
      "c#", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/flames-of-agartha"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nWe went Interrailing in the summer and found it awkward having to manually add in each of the travel journeys and things we wanted to see. The idea of the project was to create an automated trip planner that would take any existing information, such as flights or hotels booked, and then create a fully-detailed schedule for you, that included things to see and all transit journeys between the places.\nWhat it does / will do\nA web app with a schedule and options for adding in travel or visit events, and then a button to automatically fill in the schedule with content. \nCurrently we have a Python script for finding local attractions, calculating journeys between locations via public transport, and recommending local attractions (FlaskWebProject1/models.py), but we have not yet been able to implement this into the web app.\nHow I built it\nThe web app is written in HTML / CSS / JS / Flask, and the route finding is done in Python, using the Google Maps API.\nChallenges I ran into\n\nLinking the Python script into the web app\nGoogle Maps API did not have the facility to calculate routes with waypoints, so finding an optimum path around the desired attractions (i.e. travelling salesman problem) was difficult\nEach API code is only valid for 1,000 requests, so we regularly had to create new projects to get new codes\n\nAccomplishments that I'm proud of\n\nStaying awake for 23 hours (at the time of writing)\nManaged to use the Google API effectively in Python to get good content\n\nWhat I learned\n\nManaging large quantities of JSON data\nWeb apps are difficult\n\nWhat's next for Trip Planner Web App\n\nWriting our own pathfinding algorithm to find an optimum route\nCombining the Python code with the web app", 
    "project_name": "Trip Planner Web App", 
    "project_tags": [
      "html5", 
      "css3", 
      "javascript", 
      "jquery", 
      "bootstrap", 
      "python", 
      "flask"
    ], 
    "project_url": "https://devpost.com/software/trip-planner-web-app"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nI was inspired by one of the pages in G-Research's leaflet about identifying market-affecting data within tweets.\nWhat it does\nThe project searches the Twitter API for tweets about a given company that a user wants to be monitored, and uses sentiment analysis to identify general sentiment about the company. Using the general time of those tweets, it would then find the change in stock market price for the company after a short delay to allow for those changes, and note whether the stock increased or decreased. This data was then fed into a machine-learning algorithm in order to predict whether a stock would rise or fall, given a general sentiment from tweets.\nHow I built it\nI built it using a variety of APIs, notably:\n\nTweepy for getting access to tweets about the companies\nScikit-learn for the machine-learning\nMicrosoft Text Analytics API to provide the sentiment analysis of the tweets\nYahoo-Finance API in order to grab historic stock market data to learn from\n\nChallenges I ran into\nThe Yahoo-Finance API only allowed for checking on a daily level when looking at historic data, meaning I could not achieve the granularity I would have required while at the hack. It should be feasible to record tweets now and see the impact later on in the day to provide training data, but this was not practical to do at the hack due to time-constraints.\nAccomplishments that I'm proud of\nMore-or-less implementing a system to predict a rise or fall in company stock. While it may not be the most accurate method, it could be potentially be improved in order to be really useful for this field.\nWhat I learned\nHow to use REST APIs, how to form JSON objects of my own, how to get set up with Microsoft Azure\nWhat's next for CompanyTracker\nImprovements to the algorithm to allow it to be more accurate in its predictions.", 
    "project_name": "CompanyTracker", 
    "project_tags": [
      "python", 
      "scikit-learn", 
      "azure"
    ], 
    "project_url": "https://devpost.com/software/companytracker"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nThe main inspiration behind Blended's story were the books written by George Orwell and Aldous Huxley. These themes are highly relevant to the present global situation with the rapid increase and development in IoT and other similarly linked technological topics. Furthermore, the style of the game is entirely unique not based on any other works of people but more personal works. The gameplay was heavily influenced by games such as 'Papers Please' and 'The Westport Independent'.\nWhat it does\nBlended is a 2D/3D puzzle game set in a dystopian alternative reality. You work as a new employee in Olga.co, a company that runs the detention facilities in Naraka. Naraka is a totalitarian state that controls its citizens to an extent well beyond that of any other government. The state imposes on its citizens restrictions as tight as birth control with no choice, pre-selected career paths for certain specially bred individuals and a casted hierarchical system that cannot be broken. Your job in this detention center is to treat the inmates with specially brewed concoctions to correct their ways, in order to make them fit for society, conforming and even more patriotic than before.\nHow we built it\nWe used Unity3D and C# for programming, 3ds Max for 3D modelling and Photoshop for 2D modelling, sprites and GUI.\nAs a team of 3 people, we split the tasks evenly into game design, programming and art.\nChallenges we ran into\nThe main challenge we tried to overcome was the use of fluids on Unity. Fluids are some of the hardest physics objects to implement in game development, and we soon realised it would not have been possible for us to implement them on time. So we decided to brainstorm for alternatives and we came up with the idea of exploiting the 2D part of our game to use a 2D sprite that gives the illusion of being a 3D mesh.\nAccomplishments that we're proud of\nWe are proud of managing to reach the main targets we had for our hack, since we thought we were being really ambitious! We are proud of having been able of using version control to manage efficiently the sharing of files between the 3 of us... and we are proud of having pulled an all-nighter for this!\nWhat we learned\nEach one of us learnt from the others, since we were all specialising in different tasks. We learnt how to solve merge conflicts and how to work together in such a diverse team.\nWhat's next for Blended\nWe are now ready for virtual reality!", 
    "project_name": "Blended", 
    "project_tags": [
      "c#", 
      "unity", 
      "3ds-max", 
      "photoshop"
    ], 
    "project_url": "https://devpost.com/software/blended"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nWanting to expand our horizons in a setting we were not accustomed to before, we had the idea of implementing a strategy game, deciding to combine multiple genres of games together; reimplementing a classical game with a twist.\nWhat it is\nA top-down shooter game, where the player fights off hordes of zombies while building and defending a base.\nHow I built it\nUsing C# in Unity.\nChallenges I ran into\nPhysics world component interaction with navigational tools.\nAccomplishments that I'm proud of\nMaking a randomly generated world with an exponentially increasing difficulty level. \nWhat I learned\nTo collaborate in a project with others through the Git system and to work as a team in a time constraint environment.", 
    "project_name": "ICHack", 
    "project_tags": [
      "c#", 
      "unity"
    ], 
    "project_url": "https://devpost.com/software/ichack"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "IT'S (not) A BOMB!\nThe attacker hides the bomb and arms it with a custom disarm profile.\nThe defender has limited time to find (with the help of bluetooth signal strength) and disarm it.\nThe bomb is complicated.\nThere are 4 conditions to be simultaneously satisfied before it can become fully disarmed.\nSwing by to have a go at disarming it yourself!\nHow we built it?\nWith surprisingly great difficulty...\n       Android App \n            |\n          (REST)\n            |\n    Raspberry Pi (Flask)\n     |              |\n  (serial)     GPIO (7-Segment)\n     |\n  Arduino\n     |\n(electrons?)\n     |\n  Sensors\n\nIn particular, co-ordinating a load of device threads with the network stuff on the Pi was a bit harder than we anticipated. \nWhat's next for The Manhattan Pi-ject\nMore traps!\nMore interface!", 
    "project_name": "The Manhattan Pi-ject", 
    "project_tags": [
      "raspberry-pi", 
      "arduino", 
      "android", 
      "python", 
      "flask"
    ], 
    "project_url": "https://devpost.com/software/the-manhattan-pi-ject"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nWe wanted to make people happy\nWhat it does\nMakes people happy\nHow we built it\nWith happiness\nChallenges we ran into\nsadness\nAccomplishments that we're proud of\nbringing happiness\nWhat we learned\nhow to make people happy\nWhat's next for HappyBot\nMake even more people happy", 
    "project_name": "HappyBot", 
    "project_tags": [
      "java", 
      "android-studio", 
      "android", 
      "json", 
      "microsoft-project-oxford"
    ], 
    "project_url": "https://devpost.com/software/happybot-1nhpry"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nOnline dating lacks real commitment. We swipe left and right without even properly looking at the profiles. We collect matches but don't bother starting a conversation. \nWe bring real commitment back to online dating.\nWhat it does\nWhenever you swipe right on someone (yes), you are required to record a short video. The video is analyzed by Microsoft Cognitive Services, to make sure the system captures its quality.\nThe app then presents you the people who recorded the best videos first (the ones that are most committed to you).\nAs soon as there is a match, you can see the other persons video.\nHow we built it\nWe built this app as a web app using React, Redux, webpack etc. on the frontend, NodeJS, mongoDB, express.js on the backend.\nChallenges we ran into\nReactJS can sometimes be a difficult choice when all you want to do is a dirty hack.\nAccomplishments that we're proud of\nWe have a basic, working version.\nWhat we learned\nIt is impressive how much you can accomplish within 24h. Without Microsofts Cognitive Services, our app wouldn't be possible.\nWhat's next for turtle\nBuild a native app, include push notifications, include a chat.", 
    "project_name": "turtle", 
    "project_tags": [
      "azure", 
      "react", 
      "redux", 
      "express.js", 
      "node.js", 
      "facebook-graph", 
      "mongodb"
    ], 
    "project_url": "https://devpost.com/software/turtle"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nWe are programmers. We can be very lonely at times.\nWe wanted to find a way to make people engage into events more easily even if they don't know each other but share a common interest.\nWhat it does\nThe app allows users to see what events are happening around them. By being on an event (using GPS location) each user can post a 5 second short video on how the event goes. Those 5 second videos can be viewed by anyone to see how is the event and decide whether to go or not. Our server rates the events using the Cognitive Services API provided by Microsoft according to happiness/feelings of participants and displays a public mark for them.\nHow we built it\nWe used Ionic to build a cross-platform mobile application. The app communicates with a back-end server deployed on Azure Services which is written using Django. The videos are analysed with Microsoft Cognitive Services.\nChallenges we ran into\n401 Unauthorised on Microsoft Cognitive Services, for a few hours...\nAwesome Documentation of JS frameworks\nAccomplishments that we're proud of\nWe split in a way that people tried something new rather than in a way to finish the project. Surely the result is not perfect and a lot of things need improvement but we are proud we have reached a certain point of functionality.\nAnd also..\nWe don't get 401 Unauthorised anymore!\nWhat we learned\nNever use Javascript.\nBut seriously.. We never setup a server before and people making the mobile app never used Ionic/Angular before. It was mainly one helping another, a great learning experience and things are not always as easy as they seem (ref: Javascript)\nWhat's next for 5secs\nFurther integration of social network.\nEvent Participation - friendships - requests.\nExporting events from other applications (e.g. eventbrite, facebook)", 
    "project_name": "5secs", 
    "project_tags": [
      "ionic", 
      "azure", 
      "django", 
      "typescript", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/5secs"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nCommunal gatherings.\nWhat it does\nIt allows a user to queue up songs from both Spotify and Soundcloud to be played as if they were from the same service.\nHow I built it\nUsing the Spotify API and WebViews to display Soundcloud. We use android studio to make these so we could test regularly.\nChallenges I ran into\nWe struggled to access Spotify at first being given the error of Invalid Redirect URI. We couldn't use https as this has a habit of launching chrome during its use. \nAccomplishments that I'm proud of\nI am proud that having struggled with the connecting to Spotify through perseverance we got there. In addition to this having never used android studio we were able to make a working application.\nWhat I learned\nDon't go out the night before a hackathon\nWhat's next for Grack\nAdd server integration so multiple people can add to the same queue.", 
    "project_name": "Grack", 
    "project_tags": [
      "java", 
      "android", 
      "xml"
    ], 
    "project_url": "https://devpost.com/software/grack"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nSometimes, you're busy. You don't have time to respond to messages. Maybe your grandma has sent you a link to a cake recipe she found. It would be rude to ignore her, but you're very busy indeed!\nWhat it does\nHullo taps into your conversation data from facebook messenger, google hangouts and the like to train a computer to talk like you. When you're not available, Hullo can step in and respond to simple queries.\nHow we built it\nWe downloaded corpuses of message data from various services, cleaned and regularised them, fed them through some machine learning, built an actor out of the learned model and attached it to a lightweight webserver. Then we built a web app to chat with it. And plugged it into Alexa.\nChallenges we ran into\nMachine learning, it turns out, is quite hard. Our original plan to use a differentiable neural computer fell through after many hours of experimentation. We're currently implementing an alternative model using stacked LSTMs.\nAccomplishments that we're proud of\nFinally getting Alexa to work. Ish.\nWhat we learned\nBefore you go to a hackathon, become familiar with your tools.\nWhat's next for hullo\n\nMimic your voice?\nPlug into more services\nMore and better ML\nMore convenient import of chat data", 
    "project_name": "hullo", 
    "project_tags": [
      "python", 
      "alexa", 
      "typescript"
    ], 
    "project_url": "https://devpost.com/software/hullo"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nThere are two scenarios in the life of a coder.\nThe first: you make a trip to the stores, buy everything your eye lands on, and end up throwing out half of it by the end of the week.\nThe second: you take a break from your laptop at 10 PM, you're starving, but you find nothing in the fridge.\nWe thought it was time to put an end to this.\nWhat it does\nMegaBite is an intelligent food planner. You can choose what you'll eat in the following week from a list of delicious recipes. Our app will work its magic to tell you how much of each ingredient to buy. Then, when 10 PM comes rolling around, you can ask your Amazon Echo to speak out the recipe.\nHow we built it\nStarting from a Material Design CSS template, we designed a responsive web application with a PHP backend. Behind the scenes, we keep track of user accounts and store food plans in an SQL database. We process this information on the fly with PHP to calculate recipes and shopping lists.\nWe also integrate with Amazon's Alexa Skills API, which required two parts. On Amazon's developer console, we defined the interaction model and recognised phrases for the skill. Secondly, our server listens for HTTP requests from Alexa, processes the information, and returns a JSON-formatted response.\nChallenges we ran into\nHaving only begun working on the project during the Hackathon, it was a challenge to handle the tricky and poorly documented Alexa APIs, in a short amount of time. It was also incredibly difficult to debug the PHP behind Alexa, as Amazon's error message gave us no insight into the problems.\nAccomplishments that we're proud of\nWe are very pleased with the fact that our app \"Just Works\". With a fully functional user account system, and a flawless integration with Alexa, MegaBite is more than a minimum viable product.\nWhat we learned\nWorking with voice interaction was an interesting experience. We learned how to deal with the ambiguities of the English language when defining the Echo's interaction model. On the other end of the line, we also had to write our responses in ways that Alexa could successfully speak out loud.\nWhat's next for MegaBite\nThe road ahead for MegaBite is full of possibilities. Food is an enormous part of our daily life, and having an intelligent platform can be of great help. We have many ideas lined up for the future:\n\nCrowd-sourced recipes with peer reviews\nNutritional facts calculations for healthier meals\nIntegration with popular supermarkets for prices and budgeting\n\nSoon, we hope to distribute MegaBite for general use.", 
    "project_name": "MegaBite", 
    "project_tags": [
      "php", 
      "web", 
      "amazon-alexa", 
      "mysql"
    ], 
    "project_url": "https://devpost.com/software/megabite"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nWanted to create a VR game, and the old-school originality of Quake made it the perfect candidate!\nWhat it does\nRuns Quake, on an oculus rift\nHow I built it\nWe used OpenHMD linux libraries to use the oculus, paired with the quake sourcecode (which is shareware), and a paid copy of the game (as the story isnt part of the sourcecode, only the engine is). With these tools, we compiled quake from source and started to implement the oculus' display.\nChallenges I ran into\nUsing the linux drivers to connect to a partiall-supported oculus\nGetting the image on the oculus to display properly (with no borders, in 3D)\nImplementing joystick movement as an alternative to the oculus' motion tracking\nAdding distortion to the image to account for VR headset lenses\nAccomplishments that I'm proud of\nPorting a 21 year old classic to VR in under 24hrs\nWhat I learned\nOpen source libraries can be a giant mess\nWhat's next for Jeffa-Quake\nThe purchase of a VR headset...! Hard to do anything without one", 
    "project_name": "Jeffa-Quake", 
    "project_tags": [
      "c", 
      "opengl"
    ], 
    "project_url": "https://devpost.com/software/jeffa-quake"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "What it does\nOur website lets you collaborate with others to create a crowd sourced book. People can visit the website and view books that have been finished or books that are currently being voted on in an animated book with real pages. You can then go to a voting page and write a suggestion for what you think should be the next sentence. After an allotted time the sentence with the most votes is immortalised in the book, the poll refreshes and you move onto the next sentence.\nHow we built it\nWe built the website using mySQL for the database that holds the book and voting information, and php which interacts with this database, sending results to the client which is displays information using a combination of HTML, CSS and JavaScript.\nChallenges we ran into\nWe originally set out using node.js and socket.io, but since none of us had experience with socket.io, and the documentation was very poor, we decided to switch to php. Unfortunately this meant our voting system was no longer real-time, but we felt this was justified. We also have little experience with HTML, CSS or JavaScript, so it was challenging to dive into web development looking at code we didn't understand. This meant a lot of our website has some shocking code in it, using some very hacky techniques to bodge a solution (Don't tell anyone).\nAccomplishments that we're proud of\nDespite not achieving everything we wanted to, we managed to create a fully working solution from front to back end. We are quite impressed with the results, especially considering much of the technical skills we used were completely new and alien to us. \nWhat we learned\nWe learnt A LOT. Despite the obvious answers of the programming languages themselves we learnt how to use GitHub to streamline our workflow, and split the workload across the group so we all get some experience on front and back end development.\nWhat's next for Bookforge\nWho knows! Maybe introduce some more advanced features such as user login, or fix some of our awful code so that is doesn't break every time someone pushes to GitHub.", 
    "project_name": "Bookforge", 
    "project_tags": [
      "javascript", 
      "jquery", 
      "html5", 
      "css3", 
      "php"
    ], 
    "project_url": "https://devpost.com/software/bookforge-ym2p6f"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nWe are all concerned about the environment and recycling plays a major role in saving it. Waste sorting has been around for decades but people still tend to throw stuff to general waste bin even when it should go in recycling. We wanted to build an IoT solution to the problem, which will help recycling by automatically telling the user where the thing he is holding goes.\nWhat it does\nMr. Bin saves the planet. When approaching Mr Bin with litter the camera will detect the object with a certain accuracy, then it will classify it as recyclable, general waste or non-recyclable. It will finally point to one of the bins below the screen for the user to throw your waste in.\nHow we built it\nWe built Mr Bin with Python and Microsoft Computer Vision APIs deep learning algorithms. We also used OpenCV and multithreading to capture the live stream video. After the program recognizes a frame, we used the image tags and confidence levels to go through a data base of possible waste items and then sorted them accordingly. We have also used Microsoft's TextToSpeech API to have Mr Bin saying the destination bin out loud. Finally we wrote a welcoming GUI using tkinter.\nChallenges we ran into\nAt first we had to familiarise with the APIs, but the hardest part was allowing live stream video capture. We achieved this by capturing the video and sending every 10th frame to a seprate thread that will analyse it and display the result, while the main thread keeps capturing and dispatching.\nAccomplishments that we're proud of\nWe had never worked with computer vision before and trying to understand so working with it raised a few problems.\nThe hardest task was indeed allowing live stream computer vision since there wasn't an API for it. We managed it by analysing evey 10th frame of the video capture.\nWe're also very proud of managing to work well in a team that had never work together before.We had to coordinate in order to deal with spaghetti code and finally get the product ready.\nWhat we learned\nWe have been using computer vision algorithms for the first time. We familiarised with python multithreading and Microsoft's APIs for Congnitive Services and Text-toSpeech.\nWhat's next for Mr Bin\nThe biggest improvement we want to bring to this IoT solution is some electronic component such that Mr Bin will be a stand alone product which will automatically dispatch the waste in the right bag after detecting it. In this scenario the user just throws waste in the it and the bin will operate automatically by detecting the type of waste and putting it in the right bag using motors and a scale. We believe that this would reduce user effort and improve recyclability like never before.", 
    "project_name": "Mr. Bin", 
    "project_tags": [
      "python", 
      "azure-iot-suite", 
      "azure", 
      "opencv"
    ], 
    "project_url": "https://devpost.com/software/mr-bin"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\n\nAn interest in computer music.\nLearning socket.io for ~live communication between server and client\n## What it does\nMaintains sets of separated tracks for each connected client\nKeeps clients informed of the current note sequences\nSome functionality to keep the client's playback somewhat in time\n## How we built it\nNode.JS server, servering page to client with Express and bidirectional communication using Socket.io\nJQuery for handing user input and informing the server through Socket.io events\n## Challenges we ran into\nInitially only the server was going to output audio but this was not possible to implement with limited time.\nFinding a reliable way of producing audio on the client from node descriptions.\nSynchronising the playback of clients to the point where they can be playing at the same time.\n## Accomplishments that we're proud of\nDrum input\n## What we learned\nUsing Node.JS to create a webapp\nUsing Socket.io for realtime communication between server and cleint\n## What's next for Resonance\nA clearer UI to indicate current note playback\nBetter UI scaling for smaller devices\nBugfixes and general improvements", 
    "project_name": "Bugband", 
    "project_tags": [
      "node.js", 
      "socket.io", 
      "jquery", 
      "javascript", 
      "express.js", 
      "css", 
      "html"
    ], 
    "project_url": "https://devpost.com/software/resonance-kyltdb"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "We\u2019re plagued by a social media epidemic.\nSelf reflection and private thoughts are pervaded by the relentless stream of distractions we have come to consider normal.\nMeasures of happiness are usurped by possibilities of external validation of self.\nDon\u2019t trust the evaluation of others. Trust Microsoft\u2019s Cognitive Services. For the first time you can experience true validation free from bias or grudge.\nIt\u2019s a network with you, yourself and, most importantly, yourself.\nIn essence, this diary is just for you. It uses sentiment analysis to, with unbeatable precision, evaluate your mood. It will also find the high points of your day and represent them with a complex array of emojis and related images. The scrolling timeline of entries is the best and only way to see your progression through life.", 
    "project_name": "The Anti-Social Network", 
    "project_tags": [
      "ruby-on-rails", 
      "javascript", 
      "sentiment-analysis-online", 
      "google-image-search", 
      "github"
    ], 
    "project_url": "https://devpost.com/software/the-anti-social-network-2ljp0e"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "As I couldn't find a team, I didn't have enough time to use the APIs I wanted to (Advanced Search - Microsoft Cognitive Services), so it is just a proof of concept \"hack\".\nThis webapp allows you to order coffee before arriving at the store, or get information about any other queues wherever, for whatever.\nThe user will be given an estimated time and a \"worth your time coefficient\" (between  0 and 1), and will then decide whether or not to queue.\nInformation about the queue is crowdsourced from other users in the queue, giving information about their position in the queue and the approximate service time, as well as their opinion as to whether or not the think the queue is worth entering. \nThis hack was inspired by my friend Olivia.", 
    "project_name": "Q", 
    "project_tags": [
      "javascript", 
      "html", 
      "css", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/q-fg7hj9"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Always looking for new seasons of your favourite series, downloading latest albums of bands,..? We have a better solution.\nMedia-server will listen to your requests, search in your library or download your files from legal sources. Uses luis microsoft language recognition to specify your requests, then scrapes through possible sources online and then uses torrent to download it for you.", 
    "project_name": "media-server", 
    "project_tags": [
      "python", 
      "ai-applied-language-detection", 
      "github"
    ], 
    "project_url": "https://devpost.com/software/media-server"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nThe jump from gifs to music, we wanted to sing our messages\nWhat it does\nYou type a message, and the app will convert it into song lyrics, make a file that you can send in whatsapp and sing your message\nHow we built it\nFrontend on android phones, communicates with backend to get file to share to whatsapp.\nBackend java server listens on a port and also communicates with a mysql server to match lyrics. Builds the file to send.\nChallenges we ran into\nProblems building the file in ruby.\nWas a challenge to get phone and server to communicate.\nAccomplishments that we're proud of\nCan hold a basic conversation using the app.\nWhat we learned\nServer communication with a phone, creating an android app, setting up servers.\nWhat's next for MusicMessenger\nMore songs, better algorithm to convert your message into lyrics.", 
    "project_name": "MusicMessenger", 
    "project_tags": [
      "java", 
      "ruby", 
      "android", 
      "android-studio", 
      "mysql", 
      "azure"
    ], 
    "project_url": "https://devpost.com/software/musicmessenger"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nThe main source of inspiration was enabling business, from small to large, to embed Snapchat Code-like inside their client apps. Since Snapchat's have their own proprietary platform, now everyone can have their own new fancy QR Codes at their fingertips.\nWhat it does\nThe API provides two main functionalities. One, it knows how to generate a unique codification for every client requesting it. Two, it knows how to take unfiltered images, for example like those taken from a real life camera, and extract the information from the image.\nHow we built it\nThe API is built on top of the Spring REST Framework. For the iOS app, we used standard libraries in order to showcase the functionality. What's more important is that all the picture processing is done directly on pixels, without using any 3rd party vision libraries.\nChallenges we ran into\nOne of the main challenges was to get the geometry and the algorithms behind scanning the image, since real life camera data can be rotated on multiple axis. This part took more than 20 hours to get it right.\nAccomplishments that we're proud of\nWe are extremely happy to be able to call the whole project a great achievement. We believe that not only is this a great implementation of something that is not open for everyone, but it also changes the future of QR Codes, the way we used to know them.", 
    "project_name": "ScanCode", 
    "project_tags": [
      "java", 
      "linux", 
      "swift", 
      "ios"
    ], 
    "project_url": "https://devpost.com/software/scancode"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nThe inspiration for Snaploop came during a hackaton. We came to Imperial Hack 2017 with a plan to make a bot that deals with travel plans, but after spending 6 hours on it, it felt quite boring and we brainstormed some ideas. \nWe wanted something fun, interesting, using Messenger and some cool APIs like image recognition, so Snaploop was born. (we didn't know the name until 2 a.m. though)\nWhat it does\nSnaploop is very simple: just send a message to bot, and it randomly selects one of the players that are playing the game to take a photo. The photo gets analysed by our awesome 3rd party AI services, and shows some tags. If user is happy with those tags, they are sent to all other players, which have to snap something that matches the tags.\nThe first user who gets the picture close enough gets to set the new challenge, and it repeats. Infinitely. Looping. Infinite snaps. Snaploop. You get the idea.\nHow we built it\nIt was built using the Microsoft bot framework which provides an awesome way to handle actual interaction between the actual bot code and Facebook Messenger platform. node.js was used for all of the code, with image recognition provided by ClarifAI.\nChallenges we ran into\nMain challenge was fine tuning the gameplay flow so it keep being fun, without getting players frustrated. Other than that, there were no significant issues.\nAccomplishments that we're proud of\nIt is fun, works without any additional apps as 2 billion people already use Messenger, its quite snappy (pun intended) and has a viral potential. It was funny looking at my teammates running around at 2a.m. looking for fire extinguisher. ( lit)\nWhat we learned\nWe learned that there is such this as too much pizza, that SQL Server is very hard to set up, and that a cool and minimum viable product can be built in a very small team in less than a day. Also, sleep is overrated.\nWhat's next for Snaploop\nIPO\nHonorable mentions\nDomino's, those guys behind us, Justin Bieber, yoga activity, and inflatable sleeping pillows", 
    "project_name": "Snaploop", 
    "project_tags": [
      "node.js", 
      "botplatform", 
      "clarifai", 
      "facebook"
    ], 
    "project_url": "https://devpost.com/software/snaploop"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Why?\nBecause monadic bind operator (>>=) in Haskell looks cool so I thought that it would be great to be a part of my game graphics.\nHow?\nI started writing a shooting game a few weeks ago, from which I borrowed most codes of lambda-rush. The game is written in Rust, which is both highly efficient and fault-proof, ie. no time wasted solving segmentation faults. For the graphical part I used SFML which provided a nice layer of abstraction over openGL and such.\nAnything Else?\nNo.", 
    "project_name": "lambda-rush", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/lambda-rush"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nAs students and workers, we frequently don't have enough time to go out to eat somewhere far especially during the day. At the same time, we don't want to eat alone. So, our group decided to create an app that suggests optimal places to eat within the time limit you have with your friend that is nearby.\nWhat it does\nAs mentioned in the inspiration, we created an app that gives suggestions of places to eat to two friends who are willing to meet during their short break. You are allowed to input the time you have into the app, and the app will accordingly let you know which places are safe for you guys to attend and not be late to your next lecture/meeting!\nHow we built it\nWe used APIs such as Google Maps and Firebase to provide data for our app. We also simplified the logging in process using the Facebook login API.\nChallenges we ran into\nWe got git conflicts in the beginning because we were not familiar with the git pushing/pulling process. Also, gathering the right APIs we need were bit of a challenge because some did not meet our expectations.\nAccomplishments that we're proud of\nWe're proud that we got to connect all the APIs together and create the desired app.\nWhat we learned\nWe used how to use APIs, Firebase, and git properly. We also learned that developing an application in 24 hours is a very different task.\nWhat's next for ICHack17 - YUNE\nAs of now, the application only works for two people so we could increase the number of users allowed. Also, since we are using Facebook friends as a source of connection, we could add a separate sign up button and possibly a security check so that some friends who you aren't close to don't see you on the map. In addition, transportation could be added such that the time calculated for distance isn't just done for walking. There are many implementations that can be made, and hopefully be used worldwide.", 
    "project_name": "ICHack17 - YUNE", 
    "project_tags": [
      "java", 
      "google-maps", 
      "facebook-login-api", 
      "firebase", 
      "android"
    ], 
    "project_url": "https://devpost.com/software/ichack17-yune"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nPlatforms like Expedia and Skyscanner provide easy to use access to flights and package holidays, and they're great for finding good prices. What they lack is the interface to provide inspiration, and the ability to quickly explore different places around the world.\nWhat it does\nGlobeScope is a web-app that allows the user to quickly find information about a destination, like flight prices, general description, photos, weather reports and so on. The app returns the data quickly, and the interface is responsive. This allows the user to efficiently explore different areas and find inspiration by hopping from place to place.\nHow we built it\nThe web-app is a primarily front end application. The site was built in HTML, CSS and JavaScript. All the APIs were called using jQuery in JavaScript. We needed a responsive and fluid globe with a map overlay, to do this we used and open source JavaScript library called Cesium, and accessed this with Node.JS.\nChallenges we ran into\nA large problem we had was synchronisation of API functions. In some functions, we needed to pass one or more API calls, into another API call. Simply writing line by line would not have given the AJAX requests enough time to return their responses. To allow time for this, we used a combination of chaining callback functions, and using 'promises' in JavaScript where appropriate. We also had to consider that sometimes, API requests do not come back successful, and we had to be ready to accept failed, or partial responses. The Expedia API, whilst containing very rich data, had a complex data structure which involved retrieving a 'LegID' from one area of the structure, and looking that ID up in another part.\nBeing first years and in our first hackathon, we also found the division of tasks and merging of code an interesting challenge, sometimes we had performed unit testing that had passed, and later found that when the functions were chained together, they often had unexpected edge cases that we had to account for. This required good planning and prior agreements of what data and arguments we would be passing to each other.\nAccomplishments that we're proud of\nOnly one of the members of our group had ever had experience with front end and web development. Within 2 days, the rest of us had learnt how to use HTML, CSS and JavaScript with jQuery and AJAX calls to make and process API requests, and render their results to the webpage. We were proud to produce a finished and smart product that works as designed.\nWhat we learned\nWe learned about the challenges of delayed responses in AJAX requests, and how to handle them using chained callbacks and JavaScript promises. We also learned how to traverse JSON data structures to build objects and 'craft' the data that we required from them.\nWhat's next for GlobeScope\nGlobeScope could make use of far more APIs, in particular (if we were able to become reputable), using the TripAdvisor API, as it is only available to reviewed applicants or their API. This would enable us to not only return reviews of places, but find similar places to the destinations that the user is searching. We could also link the user's profile to Facebook or other social networks, and use big data algorithms to match their attributes to other user's search responses, and even more intelligently suggest places that the user might like to visit.\nIf we had had a little more time, we would have incorporated package holidays from Expedia's API, as well as finding the most popular times of year to visit, to develop infographics of price changes throughout the year.", 
    "project_name": "GlobeScope", 
    "project_tags": [
      "javascript", 
      "jquery", 
      "node.js", 
      "html5", 
      "css", 
      "expedia", 
      "google-maps"
    ], 
    "project_url": "https://devpost.com/software/globescope"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nNowadays, the headlines are filled with negativity. There is not a hint of hope in them. We decided to bring a change to headlines you encounter on a daily basis with this Alexa skill called Content.\nWhy we called it Content?\nGoogle defines the word 'Content' as information made available by a website or other electronic medium.\nIt also defines it as a state of peaceful happiness. Our aim is to bring positive news articles forward and hence the name.\nWhat it does\nContent provides positive headlines in various categories to you. It will also text you the link of the article if you are interested in further reading.\nHow we built it\nWe used the Bing Search API for Microsoft Azure Cognitive Services to obtain news headlines in 6 different categories (World News, Politics, Entertainment, Business, Sports and Technology). We then fed each headline into the Google Text Analytics API which assigned a sentiment score from -1 to 1 with -1 being highly negative and 1 being highly positive. When the user ask Alexa if there are any positive headlines in a particular category, a randomly selected rating with a sentiment score of 0.7 or higher will be read out by Alexa and if the user is interested in reading the news article, the user will receive a text from Alexa with the news article's link.\nChallenges we ran into\nThe biggest challenge we faced was Google Text Analytics API assigning a positive rating to news headlines a human would consider highly negative. That is why the threshold of 0.7 was selected in order to ensure that highly positive headlines will be read out\nWhat we learned\nWe learnt use and deploy Azure and Google Cloud services. We learnt new programming languages like node.js and python overnight. \nWhat's next for Content\nSentiment Analysis and Bing News Search API calls will converted into cron jobs so that they run daily. This allows us to keep the database up to date", 
    "project_name": "Content", 
    "project_tags": [
      "azure", 
      "google-cloud", 
      "node.js", 
      "python", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/content"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Uni Secrets\nA website where to share university secret stories.\nSimple and easy to manage, written in NodeJS\nhttps://github.com/giuliojiang/UniSecrets\nDeployed live at https://www.unisecrets.co.uk", 
    "project_name": "UniSecrets", 
    "project_tags": [
      "javascript", 
      "html", 
      "python", 
      "shell", 
      "makefile", 
      "css", 
      "node.js", 
      "angular.js"
    ], 
    "project_url": "https://devpost.com/software/unisecrets"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "The Idea\nCurrently, venues and spaces must select and maintain playlists, which may or may not reflect what their guests want to hear.\nWith Spot-on-the-Fly users can sync their Spotify accounts to a centrally hosted playlist in just two clicks, allowing music to reflect people in a space at any given time.\nThe Hack\nWe have developed a Web App using Socket.io, which allows user with two clicks to log into their Spotify accounts via our page.\nBy then interfacing with the Spotify API, we extract data on their most played artists, and tracks. An algorithm then sorts these preferences into playlist, which are then pushed to Spotify running on a central device.\nOur algorithm provides people with the music they want to hear by running through top picks, and then also inserting mutual interests and semi-random selected songs by similar artists and in similar genres.\nFuture Possibilities\nAt the moment our app is restrained to the Spotify API, whilst this allows rapid interfacing with one of the worlds largest databases of music, we would ultimately like to fuse data form numerous apps to build a comprehensive picture of peoples musical tastes in any location at any point in time.", 
    "project_name": "Spot-on-the-Fly", 
    "project_tags": [
      "javascript", 
      "spotify", 
      "socket.io"
    ], 
    "project_url": "https://devpost.com/software/spot-on-the-fly"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Contextual Shuffle\nInspiration\nWhilst people can have large collections of music they enjoy, these often can conflict with each other's mood if improperly ordered. \nFor example, a playlist containing both classical and hip hop music, of which the user enjoys both of, may not flow well in the wrong environment or mood. It may also be displeasing for the user to hear such a wide varation in songs.\nWhat it does\nContextualShuffle loads the entirety of your music library and learns associations between specific categories of music. Using these categories and other song-specific features such valence, tempo, and genre, similarities are identified between other songs in your library, without any intervention on your part. Similar songs are then queued (shuffled) such that the genre or other features of importance does not vary too much from song to song. \nBy monitoring the user's facial expressions, the efficacy of the queuing system is further adapted and improved each iteration.\nHow we built it\nStarting with the initial aim of identifying similar songs, a large music dataset was required. We sought to acquire features and labels that were most relevant for every track in the dataset. We identified the following features as critical in classification of each track: \n\nValence \nSpeechiness \nKey \nEnergy \nDanceability \nTempo \nGenre. \n\nAn ensemble of a 1000 decision trees was trained with boosting to extract feature importance, corresponding to the above features. The features were then normalized between -1 and 1 to allow for an easier evaluation. Using the resulting features we calculated, the cross-correlation between different songs was calclated and an incrementally built list of succeedingly similar songs was continually adapted using positive and negative emotions determined by Microsoft's Cognitive API service. \nFollowing this, when a user plays a given song from their library, the most similar songs to each corresponding song are played successivelly. This means the first song's nearest neighbour is played. The neighbour then becomes the root from which calculations are considered, and it's nearest neighbour is played and so on. This provides a good balance of variation and consistency between tracks.\nChallenges we ran into\nOpenCV has posed multiple difficulties due to version compatibility and limited support for python 2.7. Even after installing it for  Python3 a large amount of time was needed for everythin to work as intended. \nThe Spotify API download rate has posed a significant problem due to the large amount of training data that was required by our algorithms.\nThe Azure API examples could improve in terms of documentation.\nRunning Webcams through virtual machines was nearly impossible, so we had to resort to communicating to external mobile devices.\nLabelling of genres, and appropriate mining of data was difficult to achieve due to \nCommunication between different technologies was difficult and rather consuming.\nAccomplishments that we're proud of\nWe believe this product is workable, usable, and performs in-line with our initial aims and goals\nThe large amount of different technologies into the product has given us a brief but enjoyable experience with each of them.\nGenerating and creating workable training and testing datasets given the large amonut of variables in a given track.\nWhat we learned\nAvoid OpenCV if possible.\nLearning about different APIs and libraries in order to achieve a niche task.\nKeep your front and back end separated if possible.\nWhat's next for ContextualShuffle\nWe'd love to reach out to the team at Spotify and discuss how our findings could help them improve their technologies and how additional features in their APIs could assist developers", 
    "project_name": "ContextualShuffle", 
    "project_tags": [
      "python", 
      "machine-learning", 
      "spotify", 
      "azure", 
      "flask", 
      "android"
    ], 
    "project_url": "https://devpost.com/software/contextualshuffle"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "How does the world really feel? With social media being a major presence in our lives, sometimes bigger than regular news, itself, our team set out to create a fun, unique app that can truly describe how areas around the world feel in response to a certain keyword, like 'brexit', 'summer', or 'trump'.\nThis is an application, currently for Android, that allows the user to type in a keyword. Upon submission, the user is brought to a map of the world, which is appropriately shaded for each region based on the sentiments of the tweets sent from that area. All tweets are analyzed with a machine learning algorithm that gives the tweets a coefficient of positivity and negativity, which we use to determine the shade of the specific region. Sample tweets hover around the regions, too, giving the user a very immersive and cool experience.\nThe front-end team (Julian Chow, Rishi Rabheru, Ashley See, and James Tavernor) used Java to code the user interface. The back-end team (Anthony Alridge, Nicholas Li, and Shravan Nageswaran) used Python to import and customize a machine learning algorithm to analyze the sentiment of the tweets, retrieve tweets from many regions, and combine these two to create a map that linked coordinates of the world to the appropriate colour of the map representation. Ultimately, we connected these programs well and made the full application.\nThe API would only provide us with 2500 tweets per minute (and we wanted a lot of data). Because of this, we limited the ICHACK version of the app to major cities in the United Kingdom and Ireland, but we look to continue developing the app to make it a worldwide representation.\nWe are very proud of optimizing the machine learning algorithm to process each tweet quickly. Additionally, implementing and manipulating a map in Android is quite challenging, and our front-end team did a phenomenal job of doing that. Plus, all of our code is readable, and the app, itself, is simple for users to pick up and enjoy!\nWe learned that processing data poses its challenges - especially when we want to analyze millions of tweets! Additionally, from ICHACK, we taught ourselves how to combine front-end and back-end work to accomplish the endeavor of a comprehensive application. It was a very enjoyable, hard-working, and rewarding experience.\nHeatwave is continuing to be improved. Once we can process more data, we will make Heatwave assess all cities around the world. Additionally, we look to continue improving the graphics, adding a blend method that will appropriately blend two colours in adjacent regions to make the entire map look more cohesive. All in all, we wanted to create an app that is unique, insightful, and - quite frankly - fun, and that is what we did! But we are not done yet.", 
    "project_name": "Heatwave", 
    "project_tags": [
      "java", 
      "python", 
      "django", 
      "google-maps", 
      "nltk"
    ], 
    "project_url": "https://devpost.com/software/heatwave-qnmx4g"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nWe wanted to create something for people with accessibilities. Blind people can't really know the world around them, so they use their other senses to form an image: hear, touch. What we tried to build is an application that will describe what's around them, so they can get a clearer image of the real world.\nWhat it does\nAccesses their phone's camera and uses tensorflow to recognize specific objects in the picture and form descriptive sentences about them, which then are spoken by the app.\nHow we built it\nUsing a tensorflow algorithm and Microsoft Azure for storage and doing the complex computations.\nChallenges we ran into\nThe training part of the algorithm takes very long, as it is a very complex algorithm, so we had to scale it down, and this resulted in less accurate results.\nAccomplishments that we are proud of\nWe managed to fix our bugs and make it work, even given the fact that we had a limited amount of time. We lost about 5 hours while the algorithm was creating settings and training, but we managed to catch up after and finalise the project. With this, we could create a much clearer image of the world for blind people.\nWhat's next for Eye of Horus\nProperly training of the algorithm and sending feedback in real time, instead of just sending separate pictures", 
    "project_name": "Eye of Horus", 
    "project_tags": [
      "ios", 
      "node.js", 
      "azure", 
      "swift", 
      "python", 
      "bash", 
      "linux"
    ], 
    "project_url": "https://devpost.com/software/eye-of-horus"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nWhat does an Imperial student desire more than a good night's sleep? Sadly, nothing really. With members of this group struggling to wake up and struggling to sleep, what better way to tackle this issue than stick a circuit in your pillow.\nWhat it does\nA raspberry pi running a server is connected to a pressure sensors sitting below a pillow. A mobile app has been developed that can communicate with this server and more.\nHow we built it\nWe split the task evenly and dove head first into the work. Sleep is for the feeble.\nWe used hardware labs and the laser cutters to design pressure sensors. We had to create and test our bluetooth server on the raspberry pi. We had to try to get a smart phone to talk to server and integrate it into the mobile app. After finalising how the server and client communicate, we tried to build some dynamic applications on top of this.\nChallenges we ran into\nAll of the group members had to start from scratch with regards to server setup, bluetooth communications, Android development and hardware based pressure sensors.\nWe initially also planned to integrate this application with Android's base system alarm clock. However this was extremely challenging and API was kind of confusing too. The process itself is pretty simple, as behaviours for sleeping on the pillow has been defined. We were planning to implement some restrictions on a person sleeping on a pillow and turning of an alarm, or a person sleeping on a pillow and snoozing one too many times. Unfortunately time was a massive constraint.\nAccomplishments that we're proud of\nSeveral possible future integration.\nHighly reliable hand made sensors.\nReal time view of the 8 pressure points in the pillow.\nWhat we learned\nWe learned how to setup a bluetooth server with sockets and how to connect a phone to it.\nWe learnt the basics of mobile development.\nWe got to play around with laser cutters.\nWhat's next for Internet of Pillows\nTo have a webserver to backup logs and perform long term analytics on sleep patterns. Better integration of", 
    "project_name": "Internet of Pillows", 
    "project_tags": [
      "android-studio", 
      "python", 
      "raspberry-pi", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/internet-of-pillows"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nThere are already a lot of 'Word of the Day', 'Fact of the Day' type of skills for Alexa. However, we thought it would be fun to implement it for tongue twisters. These are phrases usually hard to pronounce to humans, but not to Alexa. We believe this is a fun way for users to learn tongue twisters while hearing them more clearly.\nWhat it does\nEvery day, Alexa will have a new tongue twister for you to practice on (chosen from a pre-made database). Not only can you hear Alexa pronounce them properly (also a bit robotically), but you can also practice by reading\nHow we built it\nWe used Javascript to create a lambda function for the Alexa skill. The database of tongue twisters we got it from \"http://www.uebersetzung.at/twister/en.htm\". Using the Alexa API we built the Alexa skill.\nChallenges we ran into\nIt took us 8 hours for the server to say \"Hello World\" and a lot longer for the Echo Dot to say it. We had to learn how lambda functions work for the AWS Lambda. Alexa took a while to recognise our commands to the skill. \nAccomplishments that we're proud of\nAlexa managed to pronounce the tongue twisters clearly. The whole program runs, despite the little challenges at the beginning.\nWhat we learned\nWe got to use and experiment with the Echo Dot for the first time. We realised that you should not use reserved or common words for the invocation name for a skill as Alexa will not recognise the skill properly. Most of all, we learned to use the Amazon Web Services, the Alexa API, as well as Javascript. \nWhat's next for Daily Tongue Twister\nIn the future we would like to increase the database for the tongue twisters. This would in turn allow for different levels of difficulty. One even further step would be to implement this feature in other languages too.", 
    "project_name": "Alexa Daily Tongue Twister", 
    "project_tags": [
      "javascript", 
      "alexa"
    ], 
    "project_url": "https://devpost.com/software/daily-tongue-twister"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "", 
    "project_name": "Gold", 
    "project_tags": [
      "react", 
      "golang", 
      "bash", 
      "ruby", 
      "ruby-on-rails", 
      "python", 
      "arduino", 
      "c", 
      "c++", 
      "raspberry-pi"
    ], 
    "project_url": "https://devpost.com/software/gold-wjqsah"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "", 
    "project_name": "Retrohack", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/retrohack"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nTwo days ago was Friday, and it was circleline, for those that don't know it's a yearly tradition when students go round the tube line, and drink half a pint at every stop. Now I fully intended to leave early, only drink 2 pints, but somehow, not for lack of trying ended up worse for wear, hanging in a lecture theatre, about to start a 36 hour hackathon (again). I'm not alone in this. It is so easy to fool yourself,  but data doesn't lie, machine learning can be used in an app to tell you whether you should go home.\nWhat it does\n\"Should I go home?\" is a humourous web app where people can go on and answer a sequence of 6 tick box questions before being told whether they should a) continue drinking full steam ahead, b)have one more drink, c) go home, what are you even doing out in the first place. The results are calculated using a cognitive service regression algorithm, based off peoples past drinking experiences and how worth it they were.\nI think it has real application for the student market, excessive alcohol consumption is a problem, but no one wants to be controlled. Most PSAs are unappealing, and struggle to be relateable plus it's really hard to judge your drunkness levels even based on your own past experiences. \"Should I go home?\" removes these issues, giving a reliable, impartial source, informed by your peers past actions and has a fun, simple user interface.\nHow I built it\nThe web app was built using a combination of HTML, CSS, handlebars and node. As users would answer 6, multiple choice button questions. Its designed to be quick, simple and humourous to appeal to its target drunk, student audience. Once their 6 responses had been recorded, this data could be sent to the azure api, and in response the app would receive a \"worthit\" score for the person to keep drinking.\nTo start with users are asked what kind of drinker are they: light weight (penguin, cos feathers are light), heavy weight (bears, because bears are bare heavy) and average (\"pengbears a cross between the two.\")\nI posted a survey to reddit where I asked people to describe their recent drinking experiences. They answered the same 6 questions as on the website, plus one evaluation question of how worth it the night was (used as the label score), These were used to train the algorithm, the higher the worth it score, the more likely my web app recommended to continue drinking.\nChallenges I ran into\nThe node.js was more rudimentary than I would have liked, I could not solve a bug that prevented browsers registering modified XHR, so the url could not be updated on the website. It was very frustrating as it was a matter of configuration of static files rather than something directly related to programming. This prevents multiple users using the website at once, or me exploring session data etc.\nAccomplishments that I'm proud of\nI managed to quickly get accurate outputs for a trained machine learning algorithm to use in the app, I really enjoyed developing the graphics and my \"pengbear\" is baller.\nWhat I learned\nI learned how to develop a node.js application with good structure between dynamic and static content. Also how to call azure apis, and use their cognitive services. \nWhat's next for Should I go home?\nIn the future I would want to integrate it with the mobile platform, so that accelerometers could detect whether someone was ignoring the apps advice, and based on that decide whether to help the student in the morning with \"how to deal with your hangover\" advice. Also instead of training the API on such a small dataset, users would have the option to input their own experiences to add to the dataset or validate how effective the apps recommendations had been the morning after.\nWith a larger dataset, the number of possible questions could be far greater, including maths problems to evaluate someones current cognitive skills, and a small subset of these could be chosen, to keep the app interesting.", 
    "project_name": "Should I go home?", 
    "project_tags": [
      "node.js", 
      "handlebars.js", 
      "html5", 
      "css3", 
      "azure", 
      "machine-learning"
    ], 
    "project_url": "https://devpost.com/software/should-i-go-home"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nWe wanted to do some data mining.\nWhat it does\nWe get tweets from different countries and run a sentiment analysis on it to give a emotion to each country.\nWe then use this to create a choropleth to visualise our findings\nWhat's next for What the world feels like\nAdd more emotions and more countries.", 
    "project_name": "What the world feels like", 
    "project_tags": [
      "flask", 
      "d3.js", 
      "javascript", 
      "python", 
      "twitter"
    ], 
    "project_url": "https://devpost.com/software/what-the-world-feels-like"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "", 
    "project_name": "Emotional Rollercoaster", 
    "project_tags": [
      "arduino", 
      "c#", 
      "xaml"
    ], 
    "project_url": "https://devpost.com/software/emotional-rollercoaster-hfzrq8"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nSometimes life presents us with hard decisions, and when that happens it can be hard to choose between them. Inspired in part by other web applications such as strawpoll but with a simple and light UI for a light, easy, and expansible design.\nWhat it does\nAllows users to make questions, and 2 answers to this question, then others can vote on one of these options.\nIn the process of expanding to include natural language processing so that questions can be automatically parsed  and users don't need to enter text for the two possible answers, and to track logins and votes by users to prevent double-counting votes.\nHow I built it\nUsing a variety of languages hosted by a private web server, and a database in the back.\nWhat's next for GitGudDecisions.io\nWe're currently expanding into natural language processing so that making questions is even faster and easier using APIs available online. As well as this, we are in the processs of implementing a system to prevent double-countinng of votes using used ids, and this idea could in the future expand beyond easy binary decisions into even harder open-ended choices.", 
    "project_name": "GitGudDecisions (by GitGud)", 
    "project_tags": [
      "css", 
      "sql", 
      "python", 
      "javascript", 
      "ruby"
    ], 
    "project_url": "https://devpost.com/software/gitguddecisions"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nLike all great ideas, this one was thought of in the pub.\nWhat it does\nIt plays a video split across unlimited screens on iOS and we hoped Android. \nHow we built it\nGood Question.\nChallenges we ran into\nBluetooth.\nAndroid.....fucking Android\nAccomplishments that we're proud of\nIt fucking works. (Credit to the iOS guys :) )\nWhat we learned\nDon't use bluetooth. Don't build cross platform when you're when you've got even less sleep than experience.\nWhat's next for shitScreen\nThis is gonna be YUUUUUUUUGE.", 
    "project_name": "shitScreen", 
    "project_tags": [
      "iphone-sdk", 
      "java", 
      "swift", 
      "json", 
      "android", 
      "ios", 
      "websockets"
    ], 
    "project_url": "https://devpost.com/software/shitscreen"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "See https://github.com/memenursery/emojifier.", 
    "project_name": "EMOJIFIER", 
    "project_tags": [
      "java", 
      "javascript", 
      "python", 
      "json", 
      "ruby-on-rails", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/emojifier"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nWe were inspired by the functional composition talks given by Chris Ford.\nWhat it does\nPlays music composed with overtone by scraping an online database of guitar songs and translating the song into arrays of pitches and durations.\nHow we built it\nWeb interface for the chat that connects to a Python server. The user's messages are analyzed with Microsoft's sentiment API and based on the response the environment music is changed accordingly.\nChallenges we ran into\nMusic theory, Javascript\nAccomplishments that we're proud of\nCreating music with no prior experience.\nWhat we learned\nBuilding a server from scratch\nWhat's next for SentiTones\nIntegrating it with more instruments, songs and online chats", 
    "project_name": "SentiTones", 
    "project_tags": [
      "angular.js", 
      "clojure", 
      "overtone", 
      "python", 
      "ruby", 
      "shell"
    ], 
    "project_url": "https://devpost.com/software/sentitones"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nOther io games Agario and Sliterio and Diepio, these are fun, but they are not true mmos as in they have a limit for the number of clients for each server.\nWhat it does\nIt is a true MMO top-down 2D shooter. It allows an unlimited number of player on the server in theory whereas the playable limit is close to 50.\nHow we built it\nWith a fast client server communication protocol that minimizes the data required to be sent. Internal representation of the game on both the client and server runs the game loop concurrently.\nChallenges we ran into\nLAG. Many players meant that we placed a lot of pressure on the server with the bottleneck being server network utilization.\nAccomplishments that we're proud of\nBeing able to have >50 Clients connected whilst maintaining <30% CPU utilization.\nWhat we learned\nJS, PIXI.JS, how to manage team built code.\nWhat's next for fooshoot.com\nDeploy to production servers and get more people to play it!", 
    "project_name": "fooshoot.com", 
    "project_tags": [
      "javascript", 
      "html5", 
      "node.js", 
      "socket.io"
    ], 
    "project_url": "https://devpost.com/software/fooshoot-com"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Attempt constructing sentences containing uncommon vocabulary\nI was inspired by the book Thing Explainer by Randall Munroe of xkcd fame in which he attempts to explain complex topics using only the top 1000 words in the English language. I was interested in the inverse of this. What if you can only use words out of the top 1000. It was a fun experiment to see how much you can actually say without using the most common words!\nCheck it out: http://bac43aab.ngrok.io/", 
    "project_name": "Stay Original", 
    "project_tags": [
      "express.js"
    ], 
    "project_url": "https://devpost.com/software/stay-original"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration:\nUsing cognitive services to create an unusual, unique and creative application that which uses the service in a way that is unexpected. We wanted to create a fun yet meaningful experience for the users. We wanted to marry literature and technology together which is not often explored. \nWhat it does:\nThe application uses Microsoft Emotions API and Computer Vision API to explore emotions and features within any photograph to compose an interesting abstract poem. \nHow we built it\nBack-end: Azure Emotions API to recognise emotions within portraits and people, Azure Computer Vision API to identify features within photographs. After identifying these words we used the word association API to compose relevant words related to the poems. Furthermore, we implemented our own poetic sentence structure to give the poems a natural feel and flow naturally. \nChallenges we ran into\nNo one in our team had experience with Python so this was a huge learning experience. Furthermore, this was first time our team was using API's and integrating them together. Coming up with poetic sentence structures and associated words from the image key words proved to be the biggest challenge. \nAccomplishments that I'm proud of\nWe manage to create cool poems most of the times! (Sometimes it can get a little weird though but that's ok, poems can be a little bit abstract :) )\nWhat we learned\nHow effective and useful API's are to develop different functionalities of an application. Furthermore, this hackathon gave us a great idea of how Machine Vision works and how useful they can be in various applications. Additionally, we were grateful on the great documentation provided by Microsoft that made our life a lot easier using the API's. \nWhat's next for Philosophical Poetry\nWe would like to create better sentence structure that is more accurate grammatically as well as making the poems more meaningful. Furthermore, we are thinking about machine learning techniques that could be used on a big data set of words to create predictions of which words are the most powerful in different types of poems.", 
    "project_name": "Philosophical Poetry", 
    "project_tags": [
      "python", 
      "django"
    ], 
    "project_url": "https://devpost.com/software/philosophical-poetry"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nPeople sending memes around.\nWhat it does\nRecognize emotion and put corresponding memes on the picture.\nHow I built it\nUsing Microsoft Cognitive API to know emotion. Python as backend interface with Microsoft Cognitive API, process data and interface with front-end.\nChallenges I ran into\n\nAPI does not give perfect results.\nLimited meme data and limited time.\nPython web server did not work as expected, alternative solution does not work with the Python version we used. I had to implement the code to parse some of the http POST data, extract image data from post data.\n\nAccomplishments that I'm proud of\nImplementing parse http POST data, do web server from a lower level.\nWhat I learned\n\nMicrosoft Cognitive API\nMore Python\n\nWhat's next for Want a Meme?\n\nFix bugs\nRefactor\nUsing different approach for meme database", 
    "project_name": "Want a Meme?", 
    "project_tags": [
      "html", 
      "jquery", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/want-a-meme"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "", 
    "project_name": "Karma", 
    "project_tags": [
      "jquery", 
      "css", 
      "html5", 
      "php", 
      "python", 
      "photoshop", 
      "fitbit", 
      "css3", 
      "javascript", 
      "ios"
    ], 
    "project_url": "https://devpost.com/software/karma-lsyi81"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nDildo.io is a popular matchmaking website used by the MIT community, restricted to MIT members. The idea is simple: You select a subset of users you are interested it in, and if the interest is mutual, you both get notified. Hardened dildo.io is a a paper that describes how to build a similar system, with the additional property that the server can't know who you like and dislike.\nOur goal for ICHack 17 was to implement the Hardened Dildo.io paper as a web application.\nWhat it does\nHardCrypto is a private and cryptographically secure matchmaking service, aimed at student communities, that can guarantee to keep your likes and preferences private without having to trust the server (and whoever hacks into it).\nIt's like Tinder, but only with verified people from your school, and nobody except for you can know who you like. Or philosophy is one where we put users preference first and assume all options are opt in and that no information (such as sexual orientation) is assumed.\nHow we built it\nThe core idea behind HardCrypto is Homomorphic Encryption, a form of encryption that allows computations to be carried out on the ciphertexts without revealing the plaintext. When every user joins, they create an RSA key pair for signing and encrypting messages and publish their public key. Then, for every other user in the system, a Paillier key pair is generated and sent to the other user encrypted with their public RSA key. The server can then perform operations on the numbers encrypted with the Paillier key pair.\nOur stack is built in EcmaScript 6. We use node.js, express, mongo for the backend and React for the frontend, along with tons of libraries.\nChallenges we ran into\n\nCryptographic algorithms \nSecurity design\n\nAccomplishments that we're proud of\n\nMostly working application.\nThe code we wrote in the first 12 hours was really good, the code we wrote in the next 6 hours was acceptable.\nImplemented a complicated crypto scheme.\n\nWhat we learned\n\nWe should polish our UI more.\nTime management!.\n\nWhat's next for HardCrypto\nLaunching at Imperial in Spring Term 2017.\nPotential Future Applications\n\nMarketplace interactions\nWhistleblowing\nRecruitment & salary negotiation\nChat client & social media", 
    "project_name": "HardCrypto", 
    "project_tags": [
      "javascript", 
      "mongodb", 
      "node.js", 
      "express.js", 
      "redis"
    ], 
    "project_url": "https://devpost.com/software/hardcrypto"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nConversations with visually-impaired people who used walking sticks, guide dogs and echolocation to get a feel of the world around them but felt as if they never truly knew what was around them.\nWhat it does\nThe user will wear a camera with depth sensor (presently a Kinect). The video feed is processed and analysed in order to detect what obstacles are in the path of the user and the distance of said objects. This information is then fed back to the user via text-to-speech technology.\nHow we built it\nWe used the Kinect api in order to retrieve the video feed and depth information from the Kinect. We used blob detection on the depth information in order to detect where the closest objects were. Then the full colour image at the corresponding location was processed by a cloud service to determine the identity of the object. This information was then spoken back to the user using text-to-speech technology.\nChallenges we ran into\nDifficulty in retrieving the required data via the APIs.\nAccomplishments that we're proud of\nGetting a working proof-of-concept!\nWhat we learned\nHow to process visual data (i.e. blob detection, object recognition). \nWhat's next for Sight", 
    "project_name": "Sight", 
    "project_tags": [
      "c#", 
      "kinect"
    ], 
    "project_url": "https://devpost.com/software/sight-7b4298"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nWriting research papers and dealing with manual formula writing in Word or LaTeX is a great pain for everyone. Thus, we came up with the idea to make a program that scans printed or hand-written formulas and turns them into LaTeX automatically.\nHow we built it\nTried Wolfram, Google Cloud Platform, OCR APIs, but eventually settled for Java and Python. We use OpenCV for OCRing and jlatex for LaTeX conversion/formatting.\nWe use bash script to put a .png file to python, then we pipe the output to Java to generate a nicely formatted .jpg file with the formula\nChallenges we ran into\nOCRing the image input is very difficult + there are few good libraries for outputting a nicely formatted LaTeX\nWhat we learned\nOur project has covered several PhD theses. Some of them are:\nhttps://cs.uwaterloo.ca/~glabahn/Papers/sketch-corpora.pdf\nhttps://www.scg.uwaterloo.ca/mathbrush/publications/corpus.pdf \nAnd cover topics from teaching machine learning image recognition, to manual formula parsing to LaTeX\nWhat's next for LaTeX Formula Scanner\nFull integration with mobile platforms. \nUse of online computing services.\nVoice input of formulas.\nOnline storage of outputted formulas", 
    "project_name": "LaTeX Formula Scanner", 
    "project_tags": [
      "java", 
      "python", 
      "latex", 
      "opencv"
    ], 
    "project_url": "https://devpost.com/software/latex-formula-scanner"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nSome of our friends speak too much. Ever woken up in the morning, checked your phone and realised that you have hundreds of unread messages? We can't be bothered to read them - can you?\nThe reason we developed a piece of software for the Amazon Echo was that this can be queried on the go. We don't need to stop and look at a screen to be updated - we can just listen to it whilst doing other things. Time saving is very important in this day and age, and we want to cater to this by allowing users to do tasks in parallel.\nWhat it does\nOur code looks through a specific chat's history and finds the user's last message. From that point on, we assume that the user has not read any messages. From these messages, we select the lines of text for Alexa to say in the order of \"importance\" (this can be changed depending on what the user finds important).\nHow we built it\nWe wrote a lambda function instead of using web services to host the server. Customised intents, utterances and implementations of Alexa skills (written in nodejs) were then written using the Amazon Alexa api.\nChallenges we ran into\nGetting Alexa to say \"hello world\" was a challenging task (it took us 8 hours). Part of this required knowledge of writing a lambda function and linking this to Alexa.\nDeciding what messages are \"important\" to different people is very hard, and this is a problem that can hopefully be fixed by using ideas similar to using cookies.\nAccomplishments that we're proud of\nConsidered edge cases when implementing functions.\nAlexa also does what we want :D\nWhat we learned\nThat connecting everything to the internet is hard. Also that Alexa is harder to use than we thought.\nWhat's next for Alexa Chat Summary\nImplement a better natural language processing algorithm and also automatically linking whatsapp chats to a .txt file. Increase the types of chat names since there is no predefined Amazon type for names or common words.", 
    "project_name": "Alexa Chat Summary", 
    "project_tags": [
      "node.js", 
      "alexa", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/alexa-chat-summary"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nFacebook is eager to tell you about friend requests and even makes posts when you add a new friend, notifying you about all the new Facebook relationship. It will however never inform you about changes the other way around; you cannot see anyone unfriend you. We decided to change that.\nWhat it does\nThe Chrome extension works in the background and periodically checks your friend list on Facebook, by comparing your friend list to the last known one every time, it can see people disappearing from it. It saves the data on the hard drive, so it will work even if someone unfriends you while you have your browser - or even computer - off.\nWhen it detects that someone unfriended you, it displays a desktop notification and also connects to our bot which messages you directly about that fact.\nAdditionally, it can also monitor the friends' lists of all your friends, informing you about the changes, so that you can know if someone unfriended one of your friends.\nHow we built it\nWe mostly used JavaScript to build the Chrome extension, utilizing AJAX for querying Facebook and HTML5 Local Storage for saving data. We built the bot in Node.js and Microsoft Bot Framework, but eventually settled on using Microsoft Flow, as it turned out to be better suited for the task, as suggested by a Microsoft representative.\nChallenges we ran into\nThe Chrome extension was difficult to implement, as it tries to scrape Facebook's web pages without using any API's. This allows it to work without any authentication required and see the friends' lists of all your friends. Facebook's web pages load content (like the friend list) asynchronously in many steps, and so our code had to reflect that to work. After getting all the data, it had to be parsed to extract useful information from the returned mix of HTML and JavaScript.\nOur bot worked locally without any issues, but after we moved it to the Microsoft Azure's bot service, we ran into a problem, as it was unable to find some Node.js modules. A Microsoft representative told us it's likely to be an unknown bug due to it being a recently introduced service. As a solution we decided to use Microsoft Flow instead, which works without issues.\nAccomplishments that we're proud of\nThe project works exactly as we envisioned. We successfully wrote a web scraper/parser for Facebook's data and a working bot.\nWhat we learned\nWe learned about the different Microsoft Azure capabilities and about the process of making Chrome extensions. We also had the chance to discover that Facebook loads it's web pages in quite a convoluted way and that it's possible to monitor Facebook users' data without their knowledge, which is a privacy issue.\nWhat's next for Unfriendly\nWe could extract more data from Facebook to monitor different kinds of user activity, and notify them of interesting events concerning them even if they don't use Unfriendly themselves. This could be a way to naturally expand the user base.", 
    "project_name": "Unfriendly", 
    "project_tags": [
      "javascript", 
      "azure", 
      "chrome", 
      "ajax", 
      "json", 
      "node.js", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/unfriendly"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "", 
    "project_name": "FileBucket", 
    "project_tags": [
      "node.js", 
      "html5", 
      "express.js", 
      "ajax", 
      "pusher", 
      "css3", 
      "bootstrap", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/bucket-ub9jzq"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nWith accelerating technological progress and globalisation, it has become increasingly important to learn new skills throughout life, and to be more aware of other cultures. For the great promise of technology to be shared more equitably throughout the world we need a new solution. Despite a massive increase in availability of fantastic online courses, there has not been a course successful in engaging a large audience. Through gesture tracking with Kinect, fun art and an engaging story line, our project is an experiment in making learning as addictive as games!\nWhat it does\nKinecting the world is a multiplayer language learning game that comes with training and game mode. In training mode the player(s) can teach themselves Chinese by saying \u201cTranslate <English word/sentence>\u201d, after which the recognised word is translated to Simplified Chinese. On the screen the player sees himself in the video stream from the Kinect with the translated Chinese symbols overlaid on top. By extending the hand towards the screen each player can trace the Chinese characters. Traces of more than one player are displayed in different brush colours. At any point through the game, the Chinese characters and brush strokes can be cleared by saying \u201cCancel\u201d.\nIn game mode the player follows a both addictive and instructive story line that will teach some basic Chinese characters while the player fights his way from level to level to find the evil monster that has taken over Queen\u2019s Tower (an iconic structure at Imperial College London).\nHow we built it\nWe built it using C#. We use the Kinect SDK for body tracking and to record colour images and sound. The sound is converted to text and then translated to Simplified Chinese using the Bing Speech API and Text Translator API as part of Microsoft\u2019s Cognitive Services.\nChallenges we ran into\nWe faced many challenges. Some of them include realising that the J4K library doesn't support audio streaming... so 8 hours in, we had to scrap the old program and restart with C# instead of Java. Another challenge was that C# was a completely new programming language for 3 of the members.\nAccomplishments that we're proud of\nNone of us knew each other before we formed the team during the hackathon and we all come from different discipline/university/year and we are proud that we got a fun working project completed essentially under 16 hours. In addition the video demoing the storyline for the Kinect game was made in PowerPoint.\nWhat we learned\nMajority of us learned a new programming language and how pair-programming can improve efficiency. We also learned that it is possible to work 24 hours straight.\nWhat's next for Kinecting the World\nA lot of effort went into the making both the storyline and the video for the game. Incorporating the storyline with different levels, whilst Trump being a protagonist would further enhance the already fun learning experience.", 
    "project_name": "Kinecting the World", 
    "project_tags": [
      "kinect", 
      "c#"
    ], 
    "project_url": "https://devpost.com/software/colorbasics"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "I have never used an API before so I wanted to give it a go.\nSo I thought it would be interesting to have a live count of online users.\nIt took a lot of help from the Pusher team as there were problems with getting android studio to work with the pusher API. But once that was set up, it was just a matter of implementing logic to provide the app functionality.\nI had a lot of problems trying to get the API to work with android studio and connect to the channel.\nAs I said I have not used an API before so I was happy just to get it working.\nI learned a lot about how API's work and how to change states of an app based on a user input.\nIn my spare time around university I will try to expand on the app and have it on the google play store eventually.", 
    "project_name": "GoLive", 
    "project_tags": [
      "android-studio"
    ], 
    "project_url": "https://devpost.com/software/golive"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nBBC World News used to show cool \"breakfillers\" in-between programmes. These consisted of news bites, global weather forecasts, world time checks and so on.\nWhat it does\nIt does the news bit... Started work on implementing the weather but didn't have time.\nHow I built it\nBlood, sweat and tears. Mostly blood.\nChallenges I ran into\n\nI started this on my own after half of my original team left overnight.\nJavaScript is hard when you've only slept for a couple of hours the whole weekend\n\nWhat I learned\nAjax API requests \nWhat's next for News break-filler\n\nEverything else the BBC World News breakfillers did.\nSettings/preferences pane", 
    "project_name": "News Breakfiller", 
    "project_tags": [
      "javascript", 
      "html5", 
      "css3", 
      "github", 
      "openweathermap", 
      "ajax", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/news-break-filler"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nTinder with a twist.\nWhat it does\nUsers create an account and upload a picture to our database.  Microsoft API analyses this picture to give a list of emotions displayed.  These emotions are compared to other user pictures in 8-dimensional vector space: the closest 3 points are automatically connected as matches -- the furthest point away is also connected as a wildcard match.\nConversations are analysed on the fly with the Microsoft sentiment API to determine how likely a date is.\nHow we built it\nIonic framework for UI and AJAX, Python and flask for server and logic, firebase for database. \nChallenges we ran into\nNovice programmers making our very first mobile app.  Encountered some trouble in organising the database and integrating our functioning algorithms into a sleek UI,\nAccomplishments that we're proud of\nWhat we learned\nHow to manage databases, How to code in general\nWhat's next for Ratio\nExploration of accuracy of matching algorithm and possible UI improvements and bug fixes", 
    "project_name": "Ratio", 
    "project_tags": [
      "ionic", 
      "python", 
      "flask", 
      "firebase", 
      "javascript", 
      "angular.js", 
      "numpy", 
      "opencv", 
      "json", 
      "machine-learning", 
      "oauth", 
      "pandas"
    ], 
    "project_url": "https://devpost.com/software/ratio-eoymth"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "", 
    "project_name": "Meet In The Middle", 
    "project_tags": [
      "flask", 
      "python", 
      "google-maps", 
      "skyscanner", 
      "azure", 
      "jquery", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/meet-in-the-middle"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nWe know how hard it is to start a new habit and to keep track of all the progress, so we thought of a way to save time and get motivated along the way.\nWhat it does\nThere are long term habits and daily tasks to be set by the user and checked if accomplished. The app will show a chart based on them, and save everything in a database so that the progress can be checked later.\nHow we built it\nWe used android studio, coded in java and xml.\nChallenges we ran into\nAs we made our first Android app ever, we spent more time than we expected to get used to android studio and to git.\nAccomplishments that we're proud of\nIt's our first hackathon and we learnt a lot!\nWhat's next for Habit-o\nImproved performance and more charts based on every habit.", 
    "project_name": "Habit-o", 
    "project_tags": [
      "android-studio", 
      "java", 
      "xml"
    ], 
    "project_url": "https://devpost.com/software/habit-o"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nWe were inspired by how irritating the Microsoft Office Clippy was known to be. We wanted to make a better one, for a purpose that served our needs.\nWhat it does\nIt uses Microsoft's Q and A API to intelligently address queries to do with Linux. It also creates a virtual CLI to monitor input errors and assist the user with learning the shell.\nHow we built it\nWe used a Java for the core of our program and C++ to interface with the CLI. We also used python on an apache server to interface with the API\nChallenges we ran into\nIt was very frustrating, hence the plethora of languages. Almost everything in the project came with a hurdle. We had to make a lot of botchy workarounds to get to make it within 24hr time limit.\nAccomplishments that we're proud of\nActually finishing a project and \nWhat we learned\nWe learnt a lot. Not only\nWhat's next for CLIppy \u2013 The Command Line Assistant for Ubuntu\nWe want to make it more intelligent. We only got around to monitoring the CLI input in the past few hours and so we didn't have much time to experiment with that. It would be nice to build upon that.", 
    "project_name": "CLIppy", 
    "project_tags": [
      "python", 
      "php", 
      "java", 
      "c++"
    ], 
    "project_url": "https://devpost.com/software/clippy-the-command-line-assistant-for-ubuntu"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "", 
    "project_name": "Microbe Evolution Arena", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/microbe-evolution-arena"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nToo much time wasted after meals with friends trying to split the bill.\nWhat it does\nThe app captures a image of the receipt and uses Microsoft's OCR to generate a list of the items ordered with their pricing. The user taps the items he has ordered and the amount he pays is returned.\nHow I built it\nUsing Android studio, \nChallenges I ran into\nIt was difficult to merge the available API from Microsoft into our programme.\nAccomplishments that I'm proud of\nObtained a workable final product.\nWhat I learned\nBasics of app building and using available API to enhance performance\nWhat's next for Split\nAdd payment options, flesh out GUI", 
    "project_name": "Split", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/split-d6l2zk"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nOne night when deciding what movie to watch, Andrew simultaneously was stalking a girl on Facebook when he found out that they had liked similar movies. It prompted us to create an app that would use your Facebook profile data to recommend movies. \nWhat it does\nThe app fetches data from your Facebook profile, and sends that data to a server that runs a sparse denoising auto-encoder. The trained auto-encoder then sends a list of recommended movies based on the liked Facebook movies. Furthermore movies can be browsed on based on genre/decade/rating on the app through the TMBD-api. It provides a clear swip-card interface that allows users to bookmark suggested movies or ignore it. \nHow we built it\n-\nUsing react-native we created a front-end of the app. The Facebook-sdk allowed us to collect liked movies-titles from facebook. Then using TMBD we fetched the remaining details of the movie. The app provides two main functionality. The movies liked facebook are sent to our server, written in python, which runs a denoising auto-encoder with the use of TenssorFlowm and returns recommended movies based on feature vectors. The second functionality is to  browse more movies based on genre/decade/rating on the app through the TMBD-api. The user can save movies he or she is interested in watching from the recommendations or searches.\nChallenges we ran into\n-setting up facebook SDK\n-causing public apis to be shut down by requesting too much data. Hence had to find alternative APIs. \n-implementing front-end logic (fetching/pasing/unifing data from various APIs)\n-implementing all of back end (scrapping django, and rewriting an entire server in python, implementing promises and websocket)\n-implementation and training of denoising auto-encoder. \nAccomplishments that we're proud of\n-clean ui\n-the denoising auto-encoder algorithm was accurately implemented\n-successfully re-wrote a python server \nWhat we learned\n-Setting up backend\n-fetching and parsing data from several public apis\nWhat's next for Movie Matcher\n-optimized backend\n-professional apis", 
    "project_name": "Movie Matcher", 
    "project_tags": [
      "react-native", 
      "django", 
      "python", 
      "javascript", 
      "pandas", 
      "numpy", 
      "facebook-graph"
    ], 
    "project_url": "https://devpost.com/software/movie-matcher"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nPlatforms like Expedia and Skyscanner provide easy to use access to flights and package holidays, and they're great for finding good prices. What they lack is the interface to provide inspiration, and the ability to quickly explore different places around the world.\nWhat it does\nGlobeScope is a web-app that allows the user to quickly find information about a destination, like flight prices, general description, photos, weather reports and so on. The app returns the data quickly, and the interface is responsive. This allows the user to efficiently explore different areas and find inspiration by hopping from place to place.\nHow we built it\nThe web-app is a primarily front end application. The site was built in HTML, CSS and JavaScript. All the APIs were called using jQuery in JavaScript. We needed a responsive and fluid globe with a map overlay, to do this we used and open source JavaScript library called Cesium, and accessed this with Node.JS.\nChallenges we ran into\nA large problem we had was synchronisation of API functions. In some functions, we needed to pass one or more API calls, into another API call. Simply writing line by line would not have given the AJAX requests enough time to return their responses. To allow time for this, we used a combination of chaining callback functions, and using 'promises' in JavaScript where appropriate. We also had to consider that sometimes, API requests do not come back successful, and we had to be ready to accept failed, or partial responses. The Expedia API, whilst containing very rich data, had a complex data structure which involved retrieving a 'LegID' from one area of the structure, and looking that ID up in another part.\nBeing first years and in our first hackathon, we also found the division of tasks and merging of code an interesting challenge, sometimes we had performed unit testing that had passed, and later found that when the functions were chained together, they often had unexpected edge cases that we had to account for. This required good planning and prior agreements of what data and arguments we would be passing to each other.\nAccomplishments that we're proud of\nOnly one of the members of our group had ever had experience with front end and web development. Within 2 days, the rest of us had learnt how to use HTML, CSS and JavaScript with jQuery and AJAX calls to make and process API requests, and render their results to the webpage. We were proud to produce a finished and smart product that works as designed.\nWhat we learned\nWe learned about the challenges of delayed responses in AJAX requests, and how to handle them using chained callbacks and JavaScript promises. We also learned how to traverse JSON data structures to build objects and 'craft' the data that we required from them.\nWhat's next for GlobeScope\nGlobeScope could make use of far more APIs, in particular (if we were able to become reputable), using the TripAdvisor API, as it is only available to reviewed applicants or their API. This would enable us to not only return reviews of places, but find similar places to the destinations that the user is searching. We could also link the user's profile to Facebook or other social networks, and use big data algorithms to match their attributes to other user's search responses, and even more intelligently suggest places that the user might like to visit.\nIf we had had a little more time, we would have incorporated package holidays from Expedia's API, as well as finding the most popular times of year to visit, to develop infographics of price changes throughout the year.", 
    "project_name": "GlobeScope", 
    "project_tags": [
      "javascript", 
      "jquery", 
      "node.js", 
      "html5", 
      "css", 
      "expedia", 
      "google-maps"
    ], 
    "project_url": "https://devpost.com/software/globescope"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nNowadays, the headlines are filled with negativity. There is not a hint of hope in them. We decided to bring a change to headlines you encounter on a daily basis with this Alexa skill called Content.\nWhy we called it Content?\nGoogle defines the word 'Content' as information made available by a website or other electronic medium.\nIt also defines it as a state of peaceful happiness. Our aim is to bring positive news articles forward and hence the name.\nWhat it does\nContent provides positive headlines in various categories to you. It will also text you the link of the article if you are interested in further reading.\nHow we built it\nWe used the Bing Search API for Microsoft Azure Cognitive Services to obtain news headlines in 6 different categories (World News, Politics, Entertainment, Business, Sports and Technology). We then fed each headline into the Google Text Analytics API which assigned a sentiment score from -1 to 1 with -1 being highly negative and 1 being highly positive. When the user ask Alexa if there are any positive headlines in a particular category, a randomly selected rating with a sentiment score of 0.7 or higher will be read out by Alexa and if the user is interested in reading the news article, the user will receive a text from Alexa with the news article's link.\nChallenges we ran into\nThe biggest challenge we faced was Google Text Analytics API assigning a positive rating to news headlines a human would consider highly negative. That is why the threshold of 0.7 was selected in order to ensure that highly positive headlines will be read out\nWhat we learned\nWe learnt use and deploy Azure and Google Cloud services. We learnt new programming languages like node.js and python overnight. \nWhat's next for Content\nSentiment Analysis and Bing News Search API calls will converted into cron jobs so that they run daily. This allows us to keep the database up to date", 
    "project_name": "Content", 
    "project_tags": [
      "azure", 
      "google-cloud", 
      "node.js", 
      "python", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/content"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Uni Secrets\nA website where to share university secret stories.\nSimple and easy to manage, written in NodeJS\nhttps://github.com/giuliojiang/UniSecrets\nDeployed live at https://www.unisecrets.co.uk", 
    "project_name": "UniSecrets", 
    "project_tags": [
      "javascript", 
      "html", 
      "python", 
      "shell", 
      "makefile", 
      "css", 
      "node.js", 
      "angular.js"
    ], 
    "project_url": "https://devpost.com/software/unisecrets"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "The Idea\nCurrently, venues and spaces must select and maintain playlists, which may or may not reflect what their guests want to hear.\nWith Spot-on-the-Fly users can sync their Spotify accounts to a centrally hosted playlist in just two clicks, allowing music to reflect people in a space at any given time.\nThe Hack\nWe have developed a Web App using Socket.io, which allows user with two clicks to log into their Spotify accounts via our page.\nBy then interfacing with the Spotify API, we extract data on their most played artists, and tracks. An algorithm then sorts these preferences into playlist, which are then pushed to Spotify running on a central device.\nOur algorithm provides people with the music they want to hear by running through top picks, and then also inserting mutual interests and semi-random selected songs by similar artists and in similar genres.\nFuture Possibilities\nAt the moment our app is restrained to the Spotify API, whilst this allows rapid interfacing with one of the worlds largest databases of music, we would ultimately like to fuse data form numerous apps to build a comprehensive picture of peoples musical tastes in any location at any point in time.", 
    "project_name": "Spot-on-the-Fly", 
    "project_tags": [
      "javascript", 
      "spotify", 
      "socket.io"
    ], 
    "project_url": "https://devpost.com/software/spot-on-the-fly"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Contextual Shuffle\nInspiration\nWhilst people can have large collections of music they enjoy, these often can conflict with each other's mood if improperly ordered. \nFor example, a playlist containing both classical and hip hop music, of which the user enjoys both of, may not flow well in the wrong environment or mood. It may also be displeasing for the user to hear such a wide varation in songs.\nWhat it does\nContextualShuffle loads the entirety of your music library and learns associations between specific categories of music. Using these categories and other song-specific features such valence, tempo, and genre, similarities are identified between other songs in your library, without any intervention on your part. Similar songs are then queued (shuffled) such that the genre or other features of importance does not vary too much from song to song. \nBy monitoring the user's facial expressions, the efficacy of the queuing system is further adapted and improved each iteration.\nHow we built it\nStarting with the initial aim of identifying similar songs, a large music dataset was required. We sought to acquire features and labels that were most relevant for every track in the dataset. We identified the following features as critical in classification of each track: \n\nValence \nSpeechiness \nKey \nEnergy \nDanceability \nTempo \nGenre. \n\nAn ensemble of a 1000 decision trees was trained with boosting to extract feature importance, corresponding to the above features. The features were then normalized between -1 and 1 to allow for an easier evaluation. Using the resulting features we calculated, the cross-correlation between different songs was calclated and an incrementally built list of succeedingly similar songs was continually adapted using positive and negative emotions determined by Microsoft's Cognitive API service. \nFollowing this, when a user plays a given song from their library, the most similar songs to each corresponding song are played successivelly. This means the first song's nearest neighbour is played. The neighbour then becomes the root from which calculations are considered, and it's nearest neighbour is played and so on. This provides a good balance of variation and consistency between tracks.\nChallenges we ran into\nOpenCV has posed multiple difficulties due to version compatibility and limited support for python 2.7. Even after installing it for  Python3 a large amount of time was needed for everythin to work as intended. \nThe Spotify API download rate has posed a significant problem due to the large amount of training data that was required by our algorithms.\nThe Azure API examples could improve in terms of documentation.\nRunning Webcams through virtual machines was nearly impossible, so we had to resort to communicating to external mobile devices.\nLabelling of genres, and appropriate mining of data was difficult to achieve due to \nCommunication between different technologies was difficult and rather consuming.\nAccomplishments that we're proud of\nWe believe this product is workable, usable, and performs in-line with our initial aims and goals\nThe large amount of different technologies into the product has given us a brief but enjoyable experience with each of them.\nGenerating and creating workable training and testing datasets given the large amonut of variables in a given track.\nWhat we learned\nAvoid OpenCV if possible.\nLearning about different APIs and libraries in order to achieve a niche task.\nKeep your front and back end separated if possible.\nWhat's next for ContextualShuffle\nWe'd love to reach out to the team at Spotify and discuss how our findings could help them improve their technologies and how additional features in their APIs could assist developers", 
    "project_name": "ContextualShuffle", 
    "project_tags": [
      "python", 
      "machine-learning", 
      "spotify", 
      "azure", 
      "flask", 
      "android"
    ], 
    "project_url": "https://devpost.com/software/contextualshuffle"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "How does the world really feel? With social media being a major presence in our lives, sometimes bigger than regular news, itself, our team set out to create a fun, unique app that can truly describe how areas around the world feel in response to a certain keyword, like 'brexit', 'summer', or 'trump'.\nThis is an application, currently for Android, that allows the user to type in a keyword. Upon submission, the user is brought to a map of the world, which is appropriately shaded for each region based on the sentiments of the tweets sent from that area. All tweets are analyzed with a machine learning algorithm that gives the tweets a coefficient of positivity and negativity, which we use to determine the shade of the specific region. Sample tweets hover around the regions, too, giving the user a very immersive and cool experience.\nThe front-end team (Julian Chow, Rishi Rabheru, Ashley See, and James Tavernor) used Java to code the user interface. The back-end team (Anthony Alridge, Nicholas Li, and Shravan Nageswaran) used Python to import and customize a machine learning algorithm to analyze the sentiment of the tweets, retrieve tweets from many regions, and combine these two to create a map that linked coordinates of the world to the appropriate colour of the map representation. Ultimately, we connected these programs well and made the full application.\nThe API would only provide us with 2500 tweets per minute (and we wanted a lot of data). Because of this, we limited the ICHACK version of the app to major cities in the United Kingdom and Ireland, but we look to continue developing the app to make it a worldwide representation.\nWe are very proud of optimizing the machine learning algorithm to process each tweet quickly. Additionally, implementing and manipulating a map in Android is quite challenging, and our front-end team did a phenomenal job of doing that. Plus, all of our code is readable, and the app, itself, is simple for users to pick up and enjoy!\nWe learned that processing data poses its challenges - especially when we want to analyze millions of tweets! Additionally, from ICHACK, we taught ourselves how to combine front-end and back-end work to accomplish the endeavor of a comprehensive application. It was a very enjoyable, hard-working, and rewarding experience.\nHeatwave is continuing to be improved. Once we can process more data, we will make Heatwave assess all cities around the world. Additionally, we look to continue improving the graphics, adding a blend method that will appropriately blend two colours in adjacent regions to make the entire map look more cohesive. All in all, we wanted to create an app that is unique, insightful, and - quite frankly - fun, and that is what we did! But we are not done yet.", 
    "project_name": "Heatwave", 
    "project_tags": [
      "java", 
      "python", 
      "django", 
      "google-maps", 
      "nltk"
    ], 
    "project_url": "https://devpost.com/software/heatwave-qnmx4g"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nWe wanted to create something for people with accessibilities. Blind people can't really know the world around them, so they use their other senses to form an image: hear, touch. What we tried to build is an application that will describe what's around them, so they can get a clearer image of the real world.\nWhat it does\nAccesses their phone's camera and uses tensorflow to recognize specific objects in the picture and form descriptive sentences about them, which then are spoken by the app.\nHow we built it\nUsing a tensorflow algorithm and Microsoft Azure for storage and doing the complex computations.\nChallenges we ran into\nThe training part of the algorithm takes very long, as it is a very complex algorithm, so we had to scale it down, and this resulted in less accurate results.\nAccomplishments that we are proud of\nWe managed to fix our bugs and make it work, even given the fact that we had a limited amount of time. We lost about 5 hours while the algorithm was creating settings and training, but we managed to catch up after and finalise the project. With this, we could create a much clearer image of the world for blind people.\nWhat's next for Eye of Horus\nProperly training of the algorithm and sending feedback in real time, instead of just sending separate pictures", 
    "project_name": "Eye of Horus", 
    "project_tags": [
      "ios", 
      "node.js", 
      "azure", 
      "swift", 
      "python", 
      "bash", 
      "linux"
    ], 
    "project_url": "https://devpost.com/software/eye-of-horus"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nWhat does an Imperial student desire more than a good night's sleep? Sadly, nothing really. With members of this group struggling to wake up and struggling to sleep, what better way to tackle this issue than stick a circuit in your pillow.\nWhat it does\nA raspberry pi running a server is connected to a pressure sensors sitting below a pillow. A mobile app has been developed that can communicate with this server and more.\nHow we built it\nWe split the task evenly and dove head first into the work. Sleep is for the feeble.\nWe used hardware labs and the laser cutters to design pressure sensors. We had to create and test our bluetooth server on the raspberry pi. We had to try to get a smart phone to talk to server and integrate it into the mobile app. After finalising how the server and client communicate, we tried to build some dynamic applications on top of this.\nChallenges we ran into\nAll of the group members had to start from scratch with regards to server setup, bluetooth communications, Android development and hardware based pressure sensors.\nWe initially also planned to integrate this application with Android's base system alarm clock. However this was extremely challenging and API was kind of confusing too. The process itself is pretty simple, as behaviours for sleeping on the pillow has been defined. We were planning to implement some restrictions on a person sleeping on a pillow and turning of an alarm, or a person sleeping on a pillow and snoozing one too many times. Unfortunately time was a massive constraint.\nAccomplishments that we're proud of\nSeveral possible future integration.\nHighly reliable hand made sensors.\nReal time view of the 8 pressure points in the pillow.\nWhat we learned\nWe learned how to setup a bluetooth server with sockets and how to connect a phone to it.\nWe learnt the basics of mobile development.\nWe got to play around with laser cutters.\nWhat's next for Internet of Pillows\nTo have a webserver to backup logs and perform long term analytics on sleep patterns. Better integration of", 
    "project_name": "Internet of Pillows", 
    "project_tags": [
      "android-studio", 
      "python", 
      "raspberry-pi", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/internet-of-pillows"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nThere are already a lot of 'Word of the Day', 'Fact of the Day' type of skills for Alexa. However, we thought it would be fun to implement it for tongue twisters. These are phrases usually hard to pronounce to humans, but not to Alexa. We believe this is a fun way for users to learn tongue twisters while hearing them more clearly.\nWhat it does\nEvery day, Alexa will have a new tongue twister for you to practice on (chosen from a pre-made database). Not only can you hear Alexa pronounce them properly (also a bit robotically), but you can also practice by reading\nHow we built it\nWe used Javascript to create a lambda function for the Alexa skill. The database of tongue twisters we got it from \"http://www.uebersetzung.at/twister/en.htm\". Using the Alexa API we built the Alexa skill.\nChallenges we ran into\nIt took us 8 hours for the server to say \"Hello World\" and a lot longer for the Echo Dot to say it. We had to learn how lambda functions work for the AWS Lambda. Alexa took a while to recognise our commands to the skill. \nAccomplishments that we're proud of\nAlexa managed to pronounce the tongue twisters clearly. The whole program runs, despite the little challenges at the beginning.\nWhat we learned\nWe got to use and experiment with the Echo Dot for the first time. We realised that you should not use reserved or common words for the invocation name for a skill as Alexa will not recognise the skill properly. Most of all, we learned to use the Amazon Web Services, the Alexa API, as well as Javascript. \nWhat's next for Daily Tongue Twister\nIn the future we would like to increase the database for the tongue twisters. This would in turn allow for different levels of difficulty. One even further step would be to implement this feature in other languages too.", 
    "project_name": "Alexa Daily Tongue Twister", 
    "project_tags": [
      "javascript", 
      "alexa"
    ], 
    "project_url": "https://devpost.com/software/daily-tongue-twister"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "", 
    "project_name": "Gold", 
    "project_tags": [
      "react", 
      "golang", 
      "bash", 
      "ruby", 
      "ruby-on-rails", 
      "python", 
      "arduino", 
      "c", 
      "c++", 
      "raspberry-pi"
    ], 
    "project_url": "https://devpost.com/software/gold-wjqsah"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "", 
    "project_name": "Retrohack", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/retrohack"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nTwo days ago was Friday, and it was circleline, for those that don't know it's a yearly tradition when students go round the tube line, and drink half a pint at every stop. Now I fully intended to leave early, only drink 2 pints, but somehow, not for lack of trying ended up worse for wear, hanging in a lecture theatre, about to start a 36 hour hackathon (again). I'm not alone in this. It is so easy to fool yourself,  but data doesn't lie, machine learning can be used in an app to tell you whether you should go home.\nWhat it does\n\"Should I go home?\" is a humourous web app where people can go on and answer a sequence of 6 tick box questions before being told whether they should a) continue drinking full steam ahead, b)have one more drink, c) go home, what are you even doing out in the first place. The results are calculated using a cognitive service regression algorithm, based off peoples past drinking experiences and how worth it they were.\nI think it has real application for the student market, excessive alcohol consumption is a problem, but no one wants to be controlled. Most PSAs are unappealing, and struggle to be relateable plus it's really hard to judge your drunkness levels even based on your own past experiences. \"Should I go home?\" removes these issues, giving a reliable, impartial source, informed by your peers past actions and has a fun, simple user interface.\nHow I built it\nThe web app was built using a combination of HTML, CSS, handlebars and node. As users would answer 6, multiple choice button questions. Its designed to be quick, simple and humourous to appeal to its target drunk, student audience. Once their 6 responses had been recorded, this data could be sent to the azure api, and in response the app would receive a \"worthit\" score for the person to keep drinking.\nTo start with users are asked what kind of drinker are they: light weight (penguin, cos feathers are light), heavy weight (bears, because bears are bare heavy) and average (\"pengbears a cross between the two.\")\nI posted a survey to reddit where I asked people to describe their recent drinking experiences. They answered the same 6 questions as on the website, plus one evaluation question of how worth it the night was (used as the label score), These were used to train the algorithm, the higher the worth it score, the more likely my web app recommended to continue drinking.\nChallenges I ran into\nThe node.js was more rudimentary than I would have liked, I could not solve a bug that prevented browsers registering modified XHR, so the url could not be updated on the website. It was very frustrating as it was a matter of configuration of static files rather than something directly related to programming. This prevents multiple users using the website at once, or me exploring session data etc.\nAccomplishments that I'm proud of\nI managed to quickly get accurate outputs for a trained machine learning algorithm to use in the app, I really enjoyed developing the graphics and my \"pengbear\" is baller.\nWhat I learned\nI learned how to develop a node.js application with good structure between dynamic and static content. Also how to call azure apis, and use their cognitive services. \nWhat's next for Should I go home?\nIn the future I would want to integrate it with the mobile platform, so that accelerometers could detect whether someone was ignoring the apps advice, and based on that decide whether to help the student in the morning with \"how to deal with your hangover\" advice. Also instead of training the API on such a small dataset, users would have the option to input their own experiences to add to the dataset or validate how effective the apps recommendations had been the morning after.\nWith a larger dataset, the number of possible questions could be far greater, including maths problems to evaluate someones current cognitive skills, and a small subset of these could be chosen, to keep the app interesting.", 
    "project_name": "Should I go home?", 
    "project_tags": [
      "node.js", 
      "handlebars.js", 
      "html5", 
      "css3", 
      "azure", 
      "machine-learning"
    ], 
    "project_url": "https://devpost.com/software/should-i-go-home"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nWe wanted to do some data mining.\nWhat it does\nWe get tweets from different countries and run a sentiment analysis on it to give a emotion to each country.\nWe then use this to create a choropleth to visualise our findings\nWhat's next for What the world feels like\nAdd more emotions and more countries.", 
    "project_name": "What the world feels like", 
    "project_tags": [
      "flask", 
      "d3.js", 
      "javascript", 
      "python", 
      "twitter"
    ], 
    "project_url": "https://devpost.com/software/what-the-world-feels-like"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "", 
    "project_name": "Emotional Rollercoaster", 
    "project_tags": [
      "arduino", 
      "c#", 
      "xaml"
    ], 
    "project_url": "https://devpost.com/software/emotional-rollercoaster-hfzrq8"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nSometimes life presents us with hard decisions, and when that happens it can be hard to choose between them. Inspired in part by other web applications such as strawpoll but with a simple and light UI for a light, easy, and expansible design.\nWhat it does\nAllows users to make questions, and 2 answers to this question, then others can vote on one of these options.\nIn the process of expanding to include natural language processing so that questions can be automatically parsed  and users don't need to enter text for the two possible answers, and to track logins and votes by users to prevent double-counting votes.\nHow I built it\nUsing a variety of languages hosted by a private web server, and a database in the back.\nWhat's next for GitGudDecisions.io\nWe're currently expanding into natural language processing so that making questions is even faster and easier using APIs available online. As well as this, we are in the processs of implementing a system to prevent double-countinng of votes using used ids, and this idea could in the future expand beyond easy binary decisions into even harder open-ended choices.", 
    "project_name": "GitGudDecisions (by GitGud)", 
    "project_tags": [
      "css", 
      "sql", 
      "python", 
      "javascript", 
      "ruby"
    ], 
    "project_url": "https://devpost.com/software/gitguddecisions"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nLike all great ideas, this one was thought of in the pub.\nWhat it does\nIt plays a video split across unlimited screens on iOS and we hoped Android. \nHow we built it\nGood Question.\nChallenges we ran into\nBluetooth.\nAndroid.....fucking Android\nAccomplishments that we're proud of\nIt fucking works. (Credit to the iOS guys :) )\nWhat we learned\nDon't use bluetooth. Don't build cross platform when you're when you've got even less sleep than experience.\nWhat's next for shitScreen\nThis is gonna be YUUUUUUUUGE.", 
    "project_name": "shitScreen", 
    "project_tags": [
      "iphone-sdk", 
      "java", 
      "swift", 
      "json", 
      "android", 
      "ios", 
      "websockets"
    ], 
    "project_url": "https://devpost.com/software/shitscreen"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "See https://github.com/memenursery/emojifier.", 
    "project_name": "EMOJIFIER", 
    "project_tags": [
      "java", 
      "javascript", 
      "python", 
      "json", 
      "ruby-on-rails", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/emojifier"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nWe were inspired by the functional composition talks given by Chris Ford.\nWhat it does\nPlays music composed with overtone by scraping an online database of guitar songs and translating the song into arrays of pitches and durations.\nHow we built it\nWeb interface for the chat that connects to a Python server. The user's messages are analyzed with Microsoft's sentiment API and based on the response the environment music is changed accordingly.\nChallenges we ran into\nMusic theory, Javascript\nAccomplishments that we're proud of\nCreating music with no prior experience.\nWhat we learned\nBuilding a server from scratch\nWhat's next for SentiTones\nIntegrating it with more instruments, songs and online chats", 
    "project_name": "SentiTones", 
    "project_tags": [
      "angular.js", 
      "clojure", 
      "overtone", 
      "python", 
      "ruby", 
      "shell"
    ], 
    "project_url": "https://devpost.com/software/sentitones"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nOther io games Agario and Sliterio and Diepio, these are fun, but they are not true mmos as in they have a limit for the number of clients for each server.\nWhat it does\nIt is a true MMO top-down 2D shooter. It allows an unlimited number of player on the server in theory whereas the playable limit is close to 50.\nHow we built it\nWith a fast client server communication protocol that minimizes the data required to be sent. Internal representation of the game on both the client and server runs the game loop concurrently.\nChallenges we ran into\nLAG. Many players meant that we placed a lot of pressure on the server with the bottleneck being server network utilization.\nAccomplishments that we're proud of\nBeing able to have >50 Clients connected whilst maintaining <30% CPU utilization.\nWhat we learned\nJS, PIXI.JS, how to manage team built code.\nWhat's next for fooshoot.com\nDeploy to production servers and get more people to play it!", 
    "project_name": "fooshoot.com", 
    "project_tags": [
      "javascript", 
      "html5", 
      "node.js", 
      "socket.io"
    ], 
    "project_url": "https://devpost.com/software/fooshoot-com"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Attempt constructing sentences containing uncommon vocabulary\nI was inspired by the book Thing Explainer by Randall Munroe of xkcd fame in which he attempts to explain complex topics using only the top 1000 words in the English language. I was interested in the inverse of this. What if you can only use words out of the top 1000. It was a fun experiment to see how much you can actually say without using the most common words!\nCheck it out: http://bac43aab.ngrok.io/", 
    "project_name": "Stay Original", 
    "project_tags": [
      "express.js"
    ], 
    "project_url": "https://devpost.com/software/stay-original"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration:\nUsing cognitive services to create an unusual, unique and creative application that which uses the service in a way that is unexpected. We wanted to create a fun yet meaningful experience for the users. We wanted to marry literature and technology together which is not often explored. \nWhat it does:\nThe application uses Microsoft Emotions API and Computer Vision API to explore emotions and features within any photograph to compose an interesting abstract poem. \nHow we built it\nBack-end: Azure Emotions API to recognise emotions within portraits and people, Azure Computer Vision API to identify features within photographs. After identifying these words we used the word association API to compose relevant words related to the poems. Furthermore, we implemented our own poetic sentence structure to give the poems a natural feel and flow naturally. \nChallenges we ran into\nNo one in our team had experience with Python so this was a huge learning experience. Furthermore, this was first time our team was using API's and integrating them together. Coming up with poetic sentence structures and associated words from the image key words proved to be the biggest challenge. \nAccomplishments that I'm proud of\nWe manage to create cool poems most of the times! (Sometimes it can get a little weird though but that's ok, poems can be a little bit abstract :) )\nWhat we learned\nHow effective and useful API's are to develop different functionalities of an application. Furthermore, this hackathon gave us a great idea of how Machine Vision works and how useful they can be in various applications. Additionally, we were grateful on the great documentation provided by Microsoft that made our life a lot easier using the API's. \nWhat's next for Philosophical Poetry\nWe would like to create better sentence structure that is more accurate grammatically as well as making the poems more meaningful. Furthermore, we are thinking about machine learning techniques that could be used on a big data set of words to create predictions of which words are the most powerful in different types of poems.", 
    "project_name": "Philosophical Poetry", 
    "project_tags": [
      "python", 
      "django"
    ], 
    "project_url": "https://devpost.com/software/philosophical-poetry"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nPeople sending memes around.\nWhat it does\nRecognize emotion and put corresponding memes on the picture.\nHow I built it\nUsing Microsoft Cognitive API to know emotion. Python as backend interface with Microsoft Cognitive API, process data and interface with front-end.\nChallenges I ran into\n\nAPI does not give perfect results.\nLimited meme data and limited time.\nPython web server did not work as expected, alternative solution does not work with the Python version we used. I had to implement the code to parse some of the http POST data, extract image data from post data.\n\nAccomplishments that I'm proud of\nImplementing parse http POST data, do web server from a lower level.\nWhat I learned\n\nMicrosoft Cognitive API\nMore Python\n\nWhat's next for Want a Meme?\n\nFix bugs\nRefactor\nUsing different approach for meme database", 
    "project_name": "Want a Meme?", 
    "project_tags": [
      "html", 
      "jquery", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/want-a-meme"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "", 
    "project_name": "Karma", 
    "project_tags": [
      "jquery", 
      "css", 
      "html5", 
      "php", 
      "python", 
      "photoshop", 
      "fitbit", 
      "css3", 
      "javascript", 
      "ios"
    ], 
    "project_url": "https://devpost.com/software/karma-lsyi81"
  }, 
  {
    "hackathon_name": "IC Hack 17", 
    "project_description": "Inspiration\nDildo.io is a popular matchmaking website used by the MIT community, restricted to MIT members. The idea is simple: You select a subset of users you are interested it in, and if the interest is mutual, you both get notified. Hardened dildo.io is a a paper that describes how to build a similar system, with the additional property that the server can't know who you like and dislike.\nOur goal for ICHack 17 was to implement the Hardened Dildo.io paper as a web application.\nWhat it does\nHardCrypto is a private and cryptographically secure matchmaking service, aimed at student communities, that can guarantee to keep your likes and preferences private without having to trust the server (and whoever hacks into it).\nIt's like Tinder, but only with verified people from your school, and nobody except for you can know who you like. Or philosophy is one where we put users preference first and assume all options are opt in and that no information (such as sexual orientation) is assumed.\nHow we built it\nThe core idea behind HardCrypto is Homomorphic Encryption, a form of encryption that allows computations to be carried out on the ciphertexts without revealing the plaintext. When every user joins, they create an RSA key pair for signing and encrypting messages and publish their public key. Then, for every other user in the system, a Paillier key pair is generated and sent to the other user encrypted with their public RSA key. The server can then perform operations on the numbers encrypted with the Paillier key pair.\nOur stack is built in EcmaScript 6. We use node.js, express, mongo for the backend and React for the frontend, along with tons of libraries.\nChallenges we ran into\n\nCryptographic algorithms \nSecurity design\n\nAccomplishments that we're proud of\n\nMostly working application.\nThe code we wrote in the first 12 hours was really good, the code we wrote in the next 6 hours was acceptable.\nImplemented a complicated crypto scheme.\n\nWhat we learned\n\nWe should polish our UI more.\nTime management!.\n\nWhat's next for HardCrypto\nLaunching at Imperial in Spring Term 2017.\nPotential Future Applications\n\nMarketplace interactions\nWhistleblowing\nRecruitment & salary negotiation\nChat client & social media", 
    "project_name": "HardCrypto", 
    "project_tags": [
      "javascript", 
      "mongodb", 
      "node.js", 
      "express.js", 
      "redis"
    ], 
    "project_url": "https://devpost.com/software/hardcrypto"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Note: see images for presentation slides (I like to make figures/explanations/documentation).\n\nThe slides seem to show up out of order on this site. I also stuck a .pdf and .pptx are on my github for convenience.\nInspiration\nReddit isn't just cat memes - there is a hugely active political community that is rich in information about the public's attitudes and feelings towards political topics and candidates. A simple data mining and sentiment analysis approach should be able to capture some interesting information.\nWhat it does\nThis was a data science project, so it involved me building scripts to grab a lot of data, then cleaning and visualising the data. I made some interactive plots in ggplot/plotly and outlined some interesting trends that we can see from analysing the content and emotional valence of the top 1000 posts in the previous year (see presentation slides/pdf).\nHow I built it\nI used a Reddit API wrapper library called PRAW to gather the 1000 most \"top\" and \"controversial\" posts in the last 12 months, together with the top comments on this post. I also have information on the upvote ratio, total post score, whether the top comment was gilded, etc. Lots of data (but annoyingly, limited to n=1000 because after that I get various HTTP errors from PRAW/urllib). \nData was then imported in R/RStudio, in which I used a set of data analysis and visualisation tools that I'm already comfortable with. Microsoft cognitive services was used to tag sentence topics and score emotions from 0 to 1, but I also used outside data to get a more fine grained view of emotion.\nChallenges I ran into\nLots of new tech O_O. Issues with request timeouts, and lots of trouble with Pusher. Still, happy I got something off the ground.\nAccomplishments that I'm proud of\nNever mined Reddit before, but have been wanting to since I'm a total Reddit fanboy. \nWhat I learned\nLots about reddit's internal structure, and more generally how to mine reddit data :)\nWhat's next for Data Mining Political Emotions on Reddit\nPatching up the existing analyses, and extending into mapping the linguistic structures by candidate (maybe a model could identify Trump's distinctive stoccato, rambling style?). \nI also think that doing emotion detection in the faces of political leaders in photos of political meetings could be insightful - if one leader is looking happy and another is annoyed, this could be a predictor of a bad meeting, which could have potentially worldwide significance.", 
    "project_name": "Data Mining Political Emotions on Reddit", 
    "project_tags": [
      "python", 
      "r", 
      "reddit", 
      "pusher"
    ], 
    "project_url": "https://devpost.com/software/data-mining-political-emotions-on-reddit"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nWe lose track of items almost on a daily basis. The struggle can be real. And with age, this becomes even worse. There is a need for a simple and seamless solution that will keep track of your most valuable items.\nWhat it does\nIn a future of AR, we will have a camera attached to us at all times. Using object recognition, it will recognise your most valuable items and save a short video that will be stored in the cloud. Thus, whenever you cannot find something, you can look it up in the cloud.\nHow we built it\nWe used Google Tensorflow to build our own Neural Network. Our system takes video input of your most valuable items and generates the training data from it (super easy!).\nChallenges we ran into\nWe initially intended to use an API. However, we decided that building our own Neural Network would be more appropriate for our purposes.\nAccomplishments that we're proud of\nWe built our own Deep Neural Network for the first time -- and it works!", 
    "project_name": "ctrl-f-vision", 
    "project_tags": [
      "python", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/ctrl-f-vision"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "facejack\nyour face has been hijacked\nAbout FaceJack\nBackground\nMachine learning with deep neural networks (commonly dubbed \"deep learning\") has taken the world by storm, smashing record after record in a wide variety of difficult tasks from fields that were largely unexplored in previous years, such as computer vision, speech recognition and natural language processing. One computer vision task that benefits from such clear gains is facial recognition (identifying a person based on his/her face)---a deep neural network being the primary tool used for this purpose at Facebook, among other places. \nOne natural extension of the above could be to exploit neural networks within a secure application, in order to authenticate a person based on a shot of their face. Unfortunately, despite the apparently superb performance of such models, it is fairly easy to construct inputs which can trick the network into authenticating a stranger (commonly known as adversarial examples). We built FaceJack in order to illuminate this concept. In particular, we'd like to emphasise:\n\nhow simple it is to generate such \"fooling\" inputs algorithmically, if one has access to the neural network used for facial recognition (either directly or through an API).\nhow imperceptibly close the \"fooling\" inputs can be to legitimately generated inputs;\nhow this attack may be executed in real-time, requiring only a mid-range GPU.\n\nBut let's take it slowly---what even are adversarial inputs?\nAdversarial training\nAdversarial inputs are made possible by the very design of neural networks. On a high level, a neural network consumes an input, performs several transformations to it, in order to predict a corresponding output. The network parameters are adjusted by running the network on a training set (a set of known input/output pairs from which the network needs to generalise). The network's transformations are designed to be differentiable, so that the network can be efficiently trained by:\n\nFeeding an input to the network, computing a prediction\nComputing an error of the prediction with respect to the expected output\nPropagating the error backwards through the network, updating parameters as we go.\n\nThe network's differentiability allows us to consider the error function in its parameters, for a fixed input and output---so we can optimise them. However, it also allows us to set up an error function in the input, for a fixed choice of parameters---so we can modify the input to produce a desirable output. If the \"desirable\" output classification is one that the original input does not belong to (e.g. classifying my face as John Travolta), then the constructed input represents an adversarial example. Deep neural networks are particularly vulnerable to such inputs, for three main reasons:\n\nComputing an adversarial example usually only requires a crude approximation of the gradient of the desired output with respect to the input image---often, only the sign of this gradient for each input pixel is sufficient.\nThe computed adversarial examples are often imperceptibly similar to the original input---in fact, there is an entire space of adversarial inputs surrounding any correctly classified image, as Szegedy et al. have demonstrated in 2013.\nEven worse---what's adversarial for one network architecture will very often be adversarial for a completely different network as well---as they are often trained on the same datasets!\n\nTherefore, using neural networks in secure applications requires particular care, as adversarial inputs give rise to a potentially unforeseen covert channel for an exploit.\nWhat have we done?\nWe have built FaceJack as a simple representative of such an exploit: \n\nWe have fine-tuned a deep convolutional neural network (CNN) based on the VGG-face architecture, in order to authenticate one of our team members (Laurynas) as an administrator of a secure system;\nThe authentication system leverages a laptop web cam---detected faces in the camera's view are submitted to the network for classification;\nWe have planted a \"hack switch\", capable of intercepting the input and performing adversarial training on it before submitting it for classification---this resulted in a 100% success rate for authenticating as Laurynas, regardless of your facial features.\n\nHopefully, FaceJack has achieved its objective of highlighting this important issue in a clear and concise fashion. We hope to expand it in the near future with further authentication attacks, for example speech recognition-based ones.\nLicense\nMIT\n(CCTV Icon made by Freepik from www.flaticon.com)", 
    "project_name": "facejack", 
    "project_tags": [
      "python", 
      "html", 
      "css", 
      "flask", 
      "opencv", 
      "scipy", 
      "vim", 
      "numpy", 
      "azure"
    ], 
    "project_url": "https://devpost.com/software/facejack"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "", 
    "project_name": "SpatialRL", 
    "project_tags": [
      "c#", 
      "c++", 
      "python", 
      "unity"
    ], 
    "project_url": "https://devpost.com/software/spatialrl"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Story\nWe were interested in getting the best deals for concerts for an artist. We created a webpage where the user can search for an artist and will get (with simlar artists/concerts in option) a combinations of concerts (prices and locations) with corresponding best flights deal to fly there.", 
    "project_name": "GetMeThere", 
    "project_tags": [
      "javascript", 
      "html", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/skyscanner_concerts"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nAs all the programmers we also experience the downsides of hours of hacking in front of computers. While researchers constantly encourage the importance of stretching exercise to release tension in our muscles, it is not always an appealing activity.  As it is difficult to get out of the work zone, we propose a nerdy and fun solution that also takes good care of your health. Inspired by the Arthritis Research UK, we designed a software that encourages the programmers to remotely control the game flow while exercising the neck and face muscles.\nWhat it does\nIt allows the users to remotely control the game using the movement of their necks and heads in near real time, which are based on the simple excercises recommended by the Arthritis Research UK. Consequently it releases the tension and allows you to take a break from intensive work. More importantly, it is a great fun!\nHow we built it\nWe used the Microsoft Cognitive Services, in particular, faces and emotions APIs to track the position of the head with respect to xy axes in order to link the user movement to the game control. In addition, a twist was added with the emotions API to perform certain actions with some facial expressions. We used Pygame and multithreading to control the game flow in near real time. We implemented two games, a Tetris and a Football dribbler for different target groups. We also considered features to alert the users when they stayed in the same position for too long, and offered a game.\nChallenges we ran into\nMulti-processing in coordination with the Pygame module.\nMultiple Pygame surfaces didn't agree.\nThe design of the game control with nice graphics.\nAccomplishments that we're proud of\nLinking different components together, in particular, the real time capture with running games.\nWhat we learned\nPygame, Microsoft Cognitive Services, near real time camera capture\nWhat's next for Hack A Neck\nAdding more fun games, More movement control, user notification on inactivity, speech API, learning the trends with machine learning, customised games.", 
    "project_name": "Hack A Neck", 
    "project_tags": [
      "python", 
      "pygame"
    ], 
    "project_url": "https://devpost.com/software/pain-in-the-neck"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "", 
    "project_name": "eXplore", 
    "project_tags": [
      "python", 
      "node.js", 
      "elife", 
      "github"
    ], 
    "project_url": "https://devpost.com/software/explore-k2qxn9"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Read the full story here!", 
    "project_name": "James Clerk Haxwell: Bankruptcy Prediction", 
    "project_tags": [
      "python", 
      "scikit-learn"
    ], 
    "project_url": "https://devpost.com/software/quantum-black-bankruptcy-challenge"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "", 
    "project_name": "Cognitive Crowds", 
    "project_tags": [
      "python", 
      "opencv", 
      "javascript", 
      "php"
    ], 
    "project_url": "https://devpost.com/software/cognitive-crowds-d4zchg"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nWe were inspired by the Pip Boy from Fallout and the new keyless Tesla cars to build a \"portable\" (not at the moment) breathalyzer that locks your Tesla car, amongst other things (or any other car using a RESTful API to control its functions).\nWhat it does\nA user breathes into the MQ303 Ethanol measurement device to read changes in the acidity of the air, calculates the BAC and uses standard legal charts to determine whether one is able to drive. If not it locks the car using the available RESTful API for the vehicle.\nHow I built it\nWe built the items using the ARM mbed LPC11U24 which was handed out as swag during the event. The rest of the electronics were acquired from around the venue and a quick trip to a closeby Maplin to grab the missing breadboard.\nChallenges I ran into\nFinding the electronic components necessary, reading the output of the MQ303 sensor, inconsistent datasheets, researching relation between resistance and concentration.\nAccomplishments that I'm proud of\nCompleting it\nWhat I learned\nLots about using electronic resistance in the air to read ethanol values and converting these to Ethanol PPM values.\nWhat's next for DUI-Locker\nMaking the system portable and more reliable using an encasing, sending information over bluetooth instead of usb.", 
    "project_name": "DUI-Locker", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/dui-locker"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nAre you tired of reading your kids (or hypothetical kids) bedtime stories? Do you sometimes wish someone else could help? Look no further - Cyber Mom provides an interactive story to entertain children of all ages!\nWhat it does\nUsing Amazon Alexa, the app periodically asks the user for a prompt, and uses that prompt to generate the rest of the story. The prompts are frequent enough to keep the user invested in the story, and to make sure it goes exactly as the user desires!\nHow we built it\nThe skill is hosted on a flask server. It uses a Tensorflow-based LSTM neural network for story generation, feeding in the prompts as they come.\nChallenges we ran into\nTraining a neural network is loooong, so we had to wait a while between each test we ran before we could tweak our neural network. Also AWS instances have a curious case of disappearing GPU syndrome.\nAccomplishments that we're proud of\nWe managed to hook up the neural network with the alexa skill, and get all the NLP required for proper parsing of input working.\nWhat we learned\nNeural networks are not the easiest thing to implement when short on time and GPU power.\nWhat's next for Cyber Mum\nMOAR DATA!", 
    "project_name": "Cyber Mum", 
    "project_tags": [
      "python", 
      "alexa", 
      "flask", 
      "natural-language-processing"
    ], 
    "project_url": "https://devpost.com/software/cyber-mum"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nMisery.\nWhat it does\nTracks Trump's location from his Twitter feed, updates it to a map, and then uses Skyscanner's API to find the flights to the opposite side of the planet to him.", 
    "project_name": "DodgeDonald.com", 
    "project_tags": [
      "flask", 
      "skyscanner", 
      "google-maps", 
      "twitter"
    ], 
    "project_url": "https://devpost.com/software/dodgedonald-com"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nBelieve it or not, Chinese Whispers is an authentic Chinese game.\nIt was based on a cautionary tale whose moral is to warn one not to gossip/spread misinformation.\nThis Chinese New Year, our game inspired by Pictionary and Chinese Whispers further reinforces this important moral, in the age of alternative-facts, post-truth and fake news. It's also very frustrating and fun to play!\nWhat it does\nOn the website, you can join a room, spectate a full room, or create your new room.\nThe game starts when the room is full. First player gets to see a random phrase, and then has to draw something that best describes the phrase in 15 seconds.\nYou can choose the colour of your stroke, and the canvas also tries to straighten almost-straight lines for a better drawing experience.\nYou can draw using a cursor, touchscreen, or leapmotion!\nThe next player sees the previous drawing for a few seconds then has to draw their own image with the same rules.\nThis repeats until it reaches the last player, who has to then guess the word. \nPlayers that have done their round get to spectate the rest of the drawings!\nChallenges I ran into\nLine straightening algorithm sometimes fails for small strokes.\nNormalising the mouse/leapmotion values so different sized containers can work interchangably.\nCombining drawing by touch, drawing by mouse and drawing by leapmotion.\nAccomplishments that I'm proud of\n3 hours sleep\nWhat I learned\nit's not that easy\nWhat's next for Chinese Pictionary\n-Optical Character Recognition to prevent players from writing the phrase down directly.\n-Add more drawing tools to make the experience better.\n-Build on top of leap motion and add virtual reality to make a more immersive experience.\n-Leaderboards and Galleries to view past saved games.", 
    "project_name": "Chinese Pictionary", 
    "project_tags": [
      "node.js", 
      "html5", 
      "css3", 
      "javascript", 
      "jquery", 
      "bootstrap", 
      "socket.io", 
      "leap-motion", 
      "love"
    ], 
    "project_url": "https://devpost.com/software/chinese-pictionary"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nHaving a coffee machine running Linux and being able to ssh into it to brew a coffee\nWhat it does\nIt runs a server on Raspberry Pi and receives brewing commands. It should also brew the coffee :D\nHow I built it\nConnected a Raspberry Pi to two one-channel relays: one for controlling the water pump and one for controlling the water heater\nChallenges I ran into\nFried the original chip and possibly some other internal circuits\nWhat I learned\nI learned how circuits work", 
    "project_name": "Raspberry Coffee Pot", 
    "project_tags": [
      "python", 
      "raspberry-pi"
    ], 
    "project_url": "https://devpost.com/software/raspberry-coffee-pot"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nWe wanted to make a CAD application using VR and finger tracking, for export to 3D printers\nWhat it does\nSome stuff with cubes and spheres - it's actually quite cool but it's definitely no CAD application (just yet)\nHow we built it\nUsing the Unity and the Leap Motion SDK\nChallenges we ran into\nUnity cannot be learnt in a few hours (we expected it to be easy!). Also the leap motion documentation is quite bad (the SDK is in beta)\nAccomplishments that we're proud of\nWe managed to get started but we were consistently blocked by problems with Unity\nWhat we learned\nFinger tracking isn't ready for the primetime yet\nWhat's next for Oculus Leap\nFinishing it! Using Oculus Touch would be better than leap", 
    "project_name": "Oculus Leap CAD", 
    "project_tags": [
      "unity"
    ], 
    "project_url": "https://devpost.com/software/oculus-leap"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "This image is currently processing. Please be patient...", 
    "project_name": "CVChips", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/cvchips"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nWe are passionate to solve the data analysis challenge!\nWhat it does\nWith the 64 input attributes (i.e.features), we can predict if a company will go bankrupt.\nHow we built it\nWe used various machine learning models to fit the model and get predictions.\nChallenges we ran into\nExtremely unbalanced dateset!\nHigh dimension input data makes training slow.\nAccomplishments that we're proud of\nWe obtained the highest F1_score so far on the leader board\nWhat we learned\nData mining, Machine learning, and visualisation\nWhat's next for Quantum Black Challenge\nImprove the model to get more accurate predictions; introduce more thorough predictions such as the probability of a company going bankrupt within a given amount of time", 
    "project_name": "Quantum Black Challenge", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/quantum-black-challenge"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nIdea was to build a flight search which finds cheapest flights between 2 airports through any number unspecified airports to allow cheap travel for adventurous people\nWhat it does\nJust lists flights from an origin\nHow we built it\nUsed Skyscanner API to get the prices for the cached flights.\nChallenges we ran into\nThe number of cached flights we were able to get from an origin was limited and we did not have enough time to finish everything\nAccomplishments that we're proud of\nIt works to some extent, \nWhat we learned\nHow to learn Python and APIs\nWhat's next for Flight Search\nUse Ryanair api and make optimisation through multiple cities. Develop a proper UI for better user experience.", 
    "project_name": "Flight Search", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/flight-search"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nWe loved the idea of having a stadium of people holding their mobile phones and having them changing according to the music played.\nWhat it does\nFlash displays color patterns according to the song being played in a concert.\nHow we built it\nWe used a python script to play the song, and used Numpy to do a Fourier transform on the audio and hashed it into a color. Then it is pushed via Websockets to the client and displayed on the browser.\nChallenges we ran into\nNode.js doesn't have a good FFT library, while python flask didn't work well with multi-threading. So we used the python script to pump data into Node.js, which then used Websockets.\nAccomplishments that we're proud of\nWe managed to connect a program written in two languages and made a real-time WebApp.\nWhat we learned\nWhich libraries are good for which purpose\nWhat's next for Flash\nAdd different patterns to the graphics and make the syncing better.", 
    "project_name": "Flash", 
    "project_tags": [
      "javascript", 
      "node.js", 
      "python", 
      "html5", 
      "numpy"
    ], 
    "project_url": "https://devpost.com/software/flash-caexq5"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nReducing paper and allowing users to keep track of their finances easily.\nWhat it does\nAllows imaging of receipts and storage of data, and displays output in expandable list. Has an analytics page but it doesn't do anything.\nHow we built it\nAndroid studio for the app. Python with flask and Microsoft's computer vision API for the server.\nChallenges we ran into\nNone of us had any experience with Android Studio and it took a lot of effort to get to grips with. Started with Google's vision API which didn't work with our server.\nAccomplishments that we're proud of\nApp takes photos and server returns data mostly successfully.\nWhat we learned\nAndroid dev is horrible.\nWhat's next for Big Spender\nGetting basic features working properly. Improving design. Adding analytic functionality.", 
    "project_name": "Big Spender", 
    "project_tags": [
      "android-studio", 
      "python", 
      "flask", 
      "nltk"
    ], 
    "project_url": "https://devpost.com/software/big-spender-29um84"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nGreat! It was born of two main topics: \nWhen researching for a specific topic, additional keywords increase the bias. How could we research a specific landscape without affecting the outcomes? Also, when doing a due diligence, how can we accurately sort the documents in the relevant categories and classify its similarity\nWhat it does\nAllows lawyers and researchers avoid bias through a machine learning algorithm.\nHow we built it\nWith a lot of time, lack of sleep and sweat\nChallenges we ran into\nPython crashed and javascript was hard to deal with.\nAccomplishments that we're proud of\nWe\u2019ve built something that can save time and increase productivity for startups and lawyers\nWhat we learned\n\u2022 That one can only go so many hours without sleeping. \n\u2022 Teamwork beats bugs 100% of the time. \n\u2022 We may or may not ever do another project in Javascript again.\nWhat's next for Vertex\nBetter UI and greater algorithm speed and precision.", 
    "project_name": "Vertex", 
    "project_tags": [
      "natural-language-processing", 
      "python", 
      "machine-learning", 
      "numpy", 
      "javascript", 
      "bing", 
      "bing-search-api"
    ], 
    "project_url": "https://devpost.com/software/vertex"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "I wanted to play backgammon but I don't want to touch anything.\nIt moves without me touching it\nLeap motion sensor sending hand-motion feed into our localhost.\nLeap motion is weird to use\nWe can move it\nThat we can use Leap motion and make something cool\nI can make it more stable when it takes in hand motion by adding certain timeouts between gestures and making the board wider.", 
    "project_name": "Computer-backgammon using hands", 
    "project_tags": [
      "leap-motion", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/computer-backgammon-using-hands"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Find a jam, learn a language. Skill swap! NOT a dating app.\nOur idea started more than two years ago, when we launched a Facebook group called 'Edinburgh Skill Swap'. \nhttps://www.facebook.com/groups/edinburghskillsswap/\nSince then the group reached nearly 4000 members and began to show its limitations. Posts began piling up on each other, making it hard for people to find what they are looking for. During HackCambridge we designed a platform where people could browse and meet others interested in sharing skills. Our main features include PersonGraphs, NLP processing for creating a hierarchy of closely related users based on your skills, integrated chat and much more.", 
    "project_name": "SkillSwap", 
    "project_tags": [
      "css", 
      "javascript", 
      "html", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/cambridgehack"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "SpatialEvolution\nWe've set out to apply genetic algorithms on SpatialOS, as something that lacked efficiency in scale and innovation in \"spatiality\". This slowly turned into trying to simulate large populations of unique genetic individuals, moving around an environment, consuming and producing resources, reproducing when meeting each other. We've come across many issues, overcome most, but ultimately falls short of what we imagined.\nThe difficult part was SpatialOS' lack of documentation and complex layers of code infrastructure. We got through that too late, and although our ambitions were high, in the end we didn't manage to finalise our simulation. Our hope is that the project made sense from the point of view of Improbable and we could potentially lay the groundwork for an evolutionary simulation that innovates in its scale.", 
    "project_name": "spatial-evolution", 
    "project_tags": [
      "c#", 
      "unity"
    ], 
    "project_url": "https://devpost.com/software/spatial-evolution"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nBeing able to check how clean your water is, is crucial for many people - especially people in developing countries that often lack access to clean water sources. However, test sticks covered with chemicals that change color  depending on the properties of the water (like the famous Litmus test for the ph-value) are very cheap to produce and easy to use. However, reading out the correct values can be a bit tricky and since many people actually own smartphones anyway we wanted to come up with a way to combine the two.\nWhat it does\nOur App automates the process of reading out the values from the color coding of a mock up test stick. Just focus with your camera and the app will tell you the ph-value associated with the sample you provided.\nHow we built it\nWe used OpenCv in C++ for the technical part of the app. First we normalize the input image (similar to what happens when you scan QR codes). This means that even slightly tilted or rotated input works fine with the algorithm (most of the time :P). As the next step we extract the color values from the normalized image by averaging over certain areas. \nWe have stored a table containing color codes for various chemicals and ph values, so that then we are able to perform a simple optimization in order to find the ph value that matches the theoretical data best.\nThe app itself is written in a mix of Swift 3 (for the interface) and ObjectiveC (to communicate with our C++ code).\nChallenges we ran into\nNeither of us had experience in mobile development, so getting to grips with Swift and ObjectiveC was a struggle.\nDoing a whitebalance like color correction for bad lighting was also harder than expected.\nAccomplishments that we're proud of\nWriting our first app and being able to do realtime image processing of a video feed on mobile device.\nWhat we learned\nBasics of image processing with OpenCV and mobile app development.\nWhat's next for WhatTheColor\nWe'd like to improve the accuracy for the normalization of the image, both the perspective and the color.", 
    "project_name": "WhatTheColor", 
    "project_tags": [
      "opencv", 
      "c++", 
      "swift", 
      "ios"
    ], 
    "project_url": "https://devpost.com/software/whatthecolor"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nA desire to instantly feel the reassurance of having mail waiting for you (especially if it arrives far away - which isn't uncommon in Cambridge colleges)\nWhat you get\nAn email notification, whenever you have mail in your pigeonhole\nHow we built it\nSome embedded hardware running Lua, talking to an online service with which you have an account.\nChallenges we ran into\nConnecting hardware to the internet.\nAccomplishments that we're proud of\nIt works!\nWhat we learned\nVarious hardware platforms and how they integrate with external devices.\nWhat's next for PidgePing\nSlick hardware, push notification on mobile", 
    "project_name": "PidgePing", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/pidgeping"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nLast year we used a device called myo to allow users to play space invaders and pong by using hand gestures as the 'controllers'. This year, we carried on the theme of exploring how human interaction with computers will change in the future. \nWhat it does\nIts a 3 - dimensional IDE which incorporates mouseless interaction. \nHow I built it\nWe used an Oculus Rift and a Leap Motion device.We did everything in java. We used the JOGL library to communicate directly to an Oculus Rift. We also, used the jovr library to translate java into OpenGL. Thankfully the interaction between the leap motion device was also done in java. \nChallenges I ran into\nA LOT of challenges were overcome. First, the Oculus Rift demands a lot of graphical processing power. Out of three laptops we could only run it on a mac. Oculus has dropped all support for mac users which meant we could only run the Oculus on very old drivers. Hence, documentation was rather hard to come by. In addition to this, since we were running older drivers we could not take advantage of easier VR techniques such as WebVr. Hence, we were forced to use JOGL bindings to write directly to the oculus rift display and JOVR to read the IMU data from Oculus.  Thus, we have completed a vr project in java! \nAccomplishments that I'm proud of\nI think the most important thing is - we did it ! We've had this idea for a very long time and we ran into so many problems. At certain points it looked as if the idea was achievable and we would be left with partial bits of code . However, we never ever gave up and tried absolutely everything. To incorporate the leap motion as well, is an added bonus since it enhances the unique property of our project.\nWhat I learned\nVr requires a lot of processing power  and where there's a will there's a way ! Seriously, having to use the Oculus where there is no support and being forced to use technology we weren't used to was an absolute pain! But we regret nothing because we achieved an amazing product in the end. \nWhat's next for V-De\nV-de is a working concept that has the potential to redefine the relationship between humans and computers. So far it's and IDE for developers. Imagine if you could see the effects of your code whilst you are coding. All achievable in the Oculus. This would help greatly with designers - no more having to complie and refresh.", 
    "project_name": "V-De", 
    "project_tags": [
      "oculus", 
      "leap-motion", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/v-de"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nVideo calls such as Skype, Google Hangouts, and WeChat have revolutionised communication, in business, socially, and in many other applications. Yet despite the huge uptake, there remains a lack of support for the visually impaired. We believe that the user experience of the visually impaired would be greatly enhanced by providing feedback through facial recognition and interpretation of the expressions of the people they are talking to. \nWhat it does\neMotion aims to address the lack of support for the visually impaired by harnessing a Microsoft Cognitive API to provide real-time information on facial expressions during a video call. The API interprets a still image of the video call and calculates the likelihood of different emotions. A customisable sound-effect is then played to inform the user of the most likely emotion.\nHow we built it\nThe peer2peer connection is established and maintained using WebRTC, Node.js, and socket.io. Video streams are embedded in the html code using Javascript, which also powers the back-end.\nChallenges we ran into\nA key issue was that domains that we created were unable to stream video because the location was not considered secure enough. Socket.io is very hard to implement on cloud systems. The Microsoft API was incredibly useful, but involved a steep learning curve.\nAccomplishments that we're proud of\nWe are proud of how quickly we were able to adapt to challenges outside of our usual comfort zones by trying out new technologies and languages.\nWhat we learned\nComing from a wide variety of backgrounds, we were each able to learn a great deal about each other's skillsets.", 
    "project_name": "eMotion", 
    "project_tags": [
      "javascript", 
      "html", 
      "css", 
      "node.js", 
      "socket.io", 
      "webrtc", 
      "azure", 
      "google-app-engine", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/emotion"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nA web app to find literature to get you from what you know to what you want to know as efficiently as possible. Become familiar with a new field, understand a collaborators publication or check key publications for your literature review - all quickly and efficiently.\nIntroduction\nWhat it does\nThink of all possible knowledge as a (very) high dimensional hyperspace. Any publication will occupy some subspace of this hyperspace. Conventional literature searches provide the publications that intersect some subspace, usually defined by a keywords. More recent social media/bot approaches try to interpret the subspace the user is familiar with and suggest publications that exist at or just outside the boundary of this familiarity. Our service provides a means of bridging between the subspace of knowledge which the user knows and their search subspace. This is done by presenting the minimum necessary publications required for the user to traverse between these subsapces.\nHow we built it\nThink of all possible knowledge as a (very) high dimensional hyperspace. Any publication will occupy some subspace of this hyperspace. Conventional literature searches provide the publications that intersect some subspace, usually defined by a keywords. More recent social media/bot approaches try to interpret the subspace the user is familiar with and suggest publications that exist at or just outside the boundary of this familiarity. Our service provides a means of bridging between the subspace of knowledge which the user knows and their search subspace. This is done by presenting the minimum necessary publications required for the user to traverse between these subsapces.\nPublication subspace coverage is approximated as nodes and the hyperspace is projected onto a network with distances between nodes as approximations to the distances within the hyperspace.\nThese distance estimates are an aggregations of several factors including whether the papers are citation/reference connected (first degree connection), how many shared cited/referencing papers they have (second degree connections) and overlap of keywords. More could include text analysis of abstract/full text analysis; author input; experint input; user input or others.\nA shortest path is found on a network of unity weight edges for distances below a threshold and weights penalised above unity for distances above the threshold. This threshold is to model the users ability to move outside his field of knowledge. So papers they find comfortable learning are included but papers that they would find challeneging are penalised.\nChallenges we ran into\n\nCollecting a dataset large enough and representative\nData cleaning\nCompatibility between React and Flask\n\nAccomplishments that we're proud of\n\nA working prototype with real world data\n\nWhat we learned\n\nNetworkx is great and easy to use\nDon't be the guy not doing anything at the end who gets stuck with documentation.\n\nWhat's next for knowledge-direct\n\nIncorporate NLP to generate better distances between publications.\nSome sort of assessment of paper breadth/quality/accessibility\nTransition to more scalable technology\nApply bigger data set", 
    "project_name": "knowledge-direct", 
    "project_tags": [
      "sqlite", 
      "python", 
      "flask"
    ], 
    "project_url": "https://devpost.com/software/knowledge-direct-w9slvg"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nWhat it does\nHow we built it\nChallenges we ran into\nAccomplishments that we're proud of\nWhat we learned\nWhat's next for turing talk\nNot time, sorry. Maybe next time!", 
    "project_name": "turing talk", 
    "project_tags": [
      "javascript", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/turing-talk"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nAs an active Instagram user, I found it tedious to add the 'obvious' hash tags in the caption of every photo I post. This inspired me to create an app that would automatically generate the hash tags for me based on the image context. I also wanted a method of posting to Instagram through a different platform (not only restricted to my IPhone Instagram App).\nWhat it does\nInstaVision is a web application that allows users to upload a photo, automatically generate hash tags with the click of a button and post the photo to their Instagram account.\nHow I built it\nI used Microsoft Cognitive Services Computer Vision API to analyse the uploaded image and return a list of keywords which are converted into hashtags that are inserted into the caption.\nI built the back-end using PHP and various third party APIs such as Imgur API for uploading an image to cloud temporarily and NXS API for posting to Instagram.\nFor the front-end, I used Javascript/JQuery and AJAX for submitting form data to the API endpoint and handling image uploads, and I used HTML/CSS and the Bootstrap framework for the basic user interface.\nChallenges I ran into\n\nDebugging in PHP\nAJAX errors\nUploading the image file: I initially uploaded the image directly to the server using the PHP command: move_uploaded_file, but in the end I resorted to uploading to Imgur due to various problems including read-only structure of Heroku.\nDeleting the image file from Imgur after posting to Instagram\nHandling and parsing the Computer Vision API JSON response\n\nAccomplishments that I'm proud of\n\nMaking use of the Microsoft Cognitive Services API\nBuilding the full web application alone in the limited time frame\n\nWhat I learned\nI learnt a lot about the Microsoft Cognitive Services and it's various APIs and how to utilise them in PHP. I also learnt how to handle file uploads and send requests to the API using AJAX.\nWhat's next for InstaVision\n\nAdd a new feature to allow users to 'choose' an accuracy level for the hash tag generation.\nImplement security using public key encryption for login details\nImplement validation checks and security for image uploads\nImprove usability and user-friendliness of the application", 
    "project_name": "InstaVision", 
    "project_tags": [
      "php", 
      "javascript", 
      "html"
    ], 
    "project_url": "https://devpost.com/software/instavision"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nSome of the flights on sky scanner includes airlines which have very poor safety ratings. We want the users to travel safely so have removed the airlines which have poor safety ratings\nWhat it does\nUses the IATA API for getting airline safety ratings for SkyScanner flights\nHow we built it\nWe used IATA Api to get the safety ratings along with airlineratings.com. We pulled all the flight data between two airports from sky scanner and got their respective safety ratings. Then display that to the user\nChallenges we ran into\nUsing the pusher api to update the data in real time. \nAccomplishments that we're proud of\nMake air travel safe again.\nWhat we learned\nNever fly with Air Canada Express, Bangladesh Biman.\nWhat's next for Airlines safety\nWe are going to make the UI nicer and implement this as a chrome extension. Only show results above a certain safety rating", 
    "project_name": "Airline safety", 
    "project_tags": [
      "pusher", 
      "skyscanner", 
      "python", 
      "html5", 
      "css3", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/airlines-safety"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nWe had so much fun exploring the Microsoft Cognitive Services, we actually decided to create a game out of it!\nWhat it does\nCollect weapons and defenses, activate them by a specific emotion to beat your opponent!\nHow we built it\nWe created a custom C++ game engine and connected through Node.js to the Microsoft Emotion API.\nAccomplishments that we're proud of\nPretty hard to connect Node.js and C++ (we ended up using a custom REST service and the Microsoft C++ REST SDK).\nWhat we learned\nDefinitely the Microsoft API, lots of C++ and everything around it.\nWhat's next for Face.off\nLots of fun for everybody ;-)", 
    "project_name": "Face.off", 
    "project_tags": [
      "c++", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/face-off-3teic9"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Hack Cambridge 2017\nReal-time Event-based Monitoring System for Seniors and Elderly using Neural Networks\nTeam:\nCristian Axenie, Simeon Kostadinov, Mark Mathews\nIt has been estimated that 33% of people age 65 will fall. At around 80, that increases to 50%. In\ncase of a fall, seniors who receive help within an hour have a better rate of survival and, the faster\nhelp arrives, the less likely an injury will lead to hospitalization or the need to move into a long-term\ncare facility. In such cases fast visual detection of abnormal motion patterns is crucial. \nIn this project we propose the use of a novel embedded Dynamic Vision Sensor (eDVS) for the task of classifying falls. Opposite from\nstandard cameras which provide a time sequenced stream of frames, the eDVS provides only relative\nchanges in a scene, given by individual events at the pixel level. Using this different encoding scheme\nthe eDVS brings advantages over standard cameras. First, there is no redundancy in the data received\nfrom the sensor, only changes are reported. Second, as only events are considered the eDVS data rate is\nhigh. Third, the power consumption of the overall system is small, as just a low-end microcontroller is\nused to fetch events from the sensor and can ultimately run for long time periods in a battery powered\nsetup. This project investigates how can we exploit the eDVS fast response time and low-redundancy\nin making decisions about elderly motion. \nThe computation backend will be realized with a neural network classificator to detect fall and filter outliers. The data will\nbe provided from 2 stimuli (blinking LEDs at different frequencies) and will represent the actual position of the person wearing them.\nThe changes in position of the stimuli will encode the possible positions corresponding to falls or normal cases. \nWe will use Microsoft Azure ML Studio to implement a MLP binary classifier for the 4 (2 stimuli x 2 Cartesian coordinates - (x,y) in the field of view) dimensional input. We labelled the data with Fall (F) and No Fall (NF).", 
    "project_name": "neural_fall_detection", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/neural_fall_detection"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "followFeed\nHave you ever tried to lead a pub crawl? Or struggled with finding your friends at a music festival? There's a lot of apps that try to fix this problem, e.g. Find My Friends for iOS. They all share one massive drawback though: everyone needs to be using the same app. We fix that.\nOnce followFeed is installed on your device (we've developed it cross-platform using ionic framework), you're only a few clicks away from sharing your location live. You enter an event title, a start and stop time for tracking. The app will then run in the background of your device for the chosen time. And here's the crux: you are then given a URL that you can share with anyone to follow you in their web browser on whatever device. Without installing any apps.\nThe interface also allows you to add scheduled paths, which can be great for pub crawls etc. We also provide a chat feed using Pusher Feeds API (this is currently not working online due to pythonanywhere.com restrictions for free users). But it works locally and on any paid host.\nWe expect to make millions on this.", 
    "project_name": "followFeed", 
    "project_tags": [
      "javascript", 
      "css", 
      "html", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/followfeed-server"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nInspired by Hack Cambridge to add more detail to each Slack account to make the team forming process faster and easier. Allowing you to join or create a team that will give you the top hackathon experience. \nWhat it does\nThe bot collects information about each user when they join the Slack group, taking information from their Github and Devpost accounts, as well as mentor and team statuses. \nBy talking to the Cam Bot on the Slack account you can find out more about individual users and get lists of mentors or people looking for a team (which you can filter depending on any language requirements). \nWhen you ask about a specific user the Cam Bot will send you screenshots of the user's Github and Devpost pages, their team and mentor statuses, the languages they know, and links to their Github, Devpost and LinkedIn account. You can ask the bot for a list of mentors or people looking for a team, which you can then explore individually in  more detail. You can also update your team status, and view your profile.  \nHow we built it\nWe are running two Node.js servers that exchange data via a REST API.\nOne is used to control the chatbot itself and manage chat session data. It uses the Microsoft Bot Framework, which allows us to deploy our bot to several platforms easily - we currently have Slack and Facebook Messenger integration (although the primary use should be via Slack).\nOur second server manages user profiles, authentication, user OAuth tokens for 3rd party API integrations, and handles rendering of user image-dashboards - we are using a headless WebKit, PhantomJS, to render screenshots of new users' GitHub and Devpost previews. It later serves these assets for the chatbot controller to use them.\nHere we also handle team formations and persist user data.\nWhat's next for Team HackerBot\nThe Cam Bot can already be used in any Slack group, as long as the Slack admin adds Cam Bot to the group.\nHope to incorporate Facebook messenger. Extend the use of Team HackerBot for other team building applications, such as tech startups etc.", 
    "project_name": "Team HackerBot", 
    "project_tags": [
      "javascript", 
      "express.js", 
      "phantomjs", 
      "jquery", 
      "bootstrap"
    ], 
    "project_url": "https://devpost.com/software/team-hackerbot"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nWe noticed that minor medical conditions often are hard to pin down. Examples include skin irritation, indigestion, or migraine. To make matters worse, the causes for such symptoms are unique to each person. Therefore, we set out on a simple and yet challenging task to create personalised data tracking that is accessible to everyone. \nIn addition, we realised that the same platform can be used to make informed decisions about our lives. In my personal dataset that was uploaded to the server we saw that productivity suffers from alcohol. (More subtile correlations were excluded for privacy reasons)\nWhat it does\nBriefly, it interactively collects users data via chat-bots (slack/facebook/skype) and present analysed data back to the users. The user can pick the objectives he is interested in and our server picks the most important questions to ask. When there is enough data, the platform suggests an informed decision.\nHow we built it\nWe started off by brainstorming ideas through the email conversation, which was started by the organising team. Hence, we already knew what we wanted to do when we arrived \u2013 some conceptual design was followed by flowcharts and the build began. With 2-4 hours of sleep, the team was up and running for most of the time. The time was well spent and we have succeeded to make an MVP!\nChallenges we ran into\nWe encountered 3 main challenges : the Bot itself is stateless, and integrating State into such a complex system makes for a very sensitive process of compile-run-debug, which often times turned frustrating. Debugging seemed somewhat difficult since the system seemed to behave differently locally and on azure, so we needed to deploy and use the bot itself to get messages. The second problem was getting the Scala web back-end to connect to SQL Server, which was incredibly difficult (had to basically write an entire Java wrapper library) due to poor compatibility between Scala and JDBC. Our last problem was not getting the Amazon Alexa to work, which we attribute to the fact that the bot turned out to be a lot more complex to build than we had thought and so we ran out of time.\nAccomplishments that we're proud of\n\nWe managed to use Azure for the First Time\nWe built a restrictive, but fully functional chat bot with a programming language and framework we had never used before in less than 24hrs.\nWe managed to make our systems, which use many systems from different companies and different philosophies interoperate smoothly.\nWe managed to make our front-end be easy to use and not cluttered, perfect for users with poor internet connection.\n\nWhat we learned\n\nHow to work in a team\nHow to deliver an end-product to the customer\nHow to use cloud services\nHow to efficiently seek tech support\n\nWhat's next for KnowUrSelf\nAdd security layers, make it fully scalable, add dynamic NLP using MS Cog Services. More statistical analysis and data visualisation. Continue using it ourselves and recommend it to our friends\nTry it!\nTry chatting on HackCambridge slack channel with bot \"@knowyourself2\" (HackCambridge Team)", 
    "project_name": "KnowUrSelf", 
    "project_tags": [
      "scala", 
      "c#", 
      "jquery", 
      "java", 
      "sql", 
      "azure", 
      "heroku", 
      "github"
    ], 
    "project_url": "https://devpost.com/software/knowurself"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Click here to be part of the Hack Cambridge Playlist!\nInspiration\nWhether at parties, conferences, or meetings, we often need to generate music that a large group of people will like. We'd prefer to be able to do this without explicitly requiring the user to specify songs (as we can do in a collaborative playlist, for instance), instead automatically fetching the user's song preferences which already exist in their Spotify account.\nWhat it does\nIt generates a link that the organizer can share with the guests and allows them to login with their Spotify credentials only and automatically saves their preferences. We don't store any personal information.\nHow we built it\nWe integrated seamless OAuth 2.0 authentication which allows organizers and guests one-click access to our app. \nWith a carefully tuned and tailored algorithm for analyzing your audiences\u00b4 musical preferences, the app automatically creates and populates playlists on your Spotify account specially curated for your event.\nBuilt using Node on a JS stack, and deployed in the cloud, our solution scales to meet the demand of any event. \nChallenges we ran into\nAuthentication is hard. Sessions are hard too. Deployment is also hard. Getting database schemas in order.\nTuning algorithm to give the most relevant matches.\nAccomplishments that we're proud of\nWe have a fully functional app at the end of 24 hours that is poses a solution to a real-life challenge.  We\u00b4ve overcome all our challenges \nWhat we learned\nRapid prototyping on a Javascript stack, user experience and responsive apps. Spotify API and information retrieval.\nWhat's next for Crowdify\nWe are excited to work with event organizers (especially hackathons) to bring personalized entertainment to your event!", 
    "project_name": "Crowdify: Music from everyone.", 
    "project_tags": [
      "node.js", 
      "mongodb", 
      "spotify", 
      "ejs", 
      "express.js", 
      "passport", 
      "oauth", 
      "love"
    ], 
    "project_url": "https://devpost.com/software/crowdify-a3hnok"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nRecently, immigration has become a subject of controversy and political turmoil. We live in a world where walls are built while people leave their homes, seeking for help. Our endeavour was to model the migration of individuals in a fictional universe, in order to showcase the dynamic way in which people immigrate, and how this impacts the population and living standards in each country. This kind of simulation would be the answer to many \"What if...?\" questions governments, scientists or economists could ask. These answers would not only allow proactive measures to be taken, but could save lives.\nWhat it does\nUsing SpatialOS, we have built a large scale simulation of migration in the magical World of Warcraft. The current model consists of 10 countries between which thousands of people migrate. The phenomenon is based on both personal and regional characteristics, each movement having a certain probability of occurring at any given time. The model is flexible and permits simulation based on customizable parameters, making it a useful tool for governments which want to be prepared for an influx of immigrants, or in case of natural disasters or even war. Or if somebody decides to build a wall.\nHow we built it\nWe built the project using C# and integrating the map and movement of people in unity, and used SpatialOS to run the simulation at large scale. Starting from a simple model of random migration, we then used probability theory and population dynamics to mathematically describe the phenomenon.\nChallenges we ran into\nLearning the structure and functionality of SpatialOS and integrating it with unity were two of the major challenges we faced. Finding a relatively simple mathematical model to realistically describe immigration was also a challenging task.\nAccomplishments that we're proud of\nWe learned how to use SpatiolOS and integrate it with unity. Even though the learning process took a lot of time and we faced a lot of challenges, we managed to fix many of the bugs and to deliver a functional product.\nWhat we learned\nThe hackathon has been an invaluable learning experience, as we started from scratch with SpatialOS and spent the first few hours of the hackathon learning its structure, functionality and particularities. We also read various research papers on immigration, population dynamics and migration modeling. Besides, we improved our knowledge of C# and learned unity.\nWhat's next for SpatialLink\nThe next important steps are building larger maps and modeling more parameters which determine the probability of migration. By introducing these features, we will increase the flexibility of the platform, making it able to simulate migration at continent and even global level. Also, a nicer interface!", 
    "project_name": "SpatialLink", 
    "project_tags": [
      "c#", 
      "unity"
    ], 
    "project_url": "https://devpost.com/software/spatiallink"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nThe idea stemmed from wanting an easy yet melodic way to collaboratively create music over the internet!\nWhat it does\nThe user is presented with a harmonic table whereby they are free to place pieces down in order to create music. These pieces create a pulse which create the music, and that goes through the table changing the pitch in varying degrees depending on its direction.\nThere are several different pieces, from the simple Start and Stop, to pieces like\n\nRicochet (redirects the pulse in a predefined direction),\nSplit (splits the pulse into 5 pulses in different directions)\nRotate (the pulse gets sent in a different direction each time the piece is hit, rotating in a clockwise fashion)\nTeleport In/Out (the pulse gets sent to any place on the board)\n\nHow we built it\n\nWe decided to build this in HTML5 and JS, as we wanted an easily accessible interface that anyone can access.\nIn order to create the sounds, we employed the use of Midi.JS\nTo draw our game interface, we used Create.JS\n\nChallenges we ran into\n\nSince music and technology rarely mix, and half our team were not musically gifted, understanding music concepts such as octaves and semitones was a big challenge. Online documentation was sparce and we spent a lot of time deciding how to lay out the grid.", 
    "project_name": "Hexhogg", 
    "project_tags": [
      "html", 
      "javascript", 
      "firebase", 
      "midi.js", 
      "create.js", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/hexhogg"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nWho hasn't ever felt stressed and wanted to listen to peaceful music? Or perhaps felt really excited and wanted to have epic music ful-surround and imagine to be driving in the middle of a Highlands-like landscape? Well, wouldn't it be cool to turn on the laptop, ask him for music and immediately have the music you want without having to ask him to?\nWhat it does\nMoodsic reads your face using a camera (eg your laptops webcam) and learns your mood. Then it uses this info to pick an appropriate music for your mood.\nHow we built it\nWe used Microsoft's Cognitive API* for the facial recognition and a .NET environment for the development (C#, XMAL, WPF). For the music selection we used Rhythm API by Gracenote Developer. Finally, the songs are directly downloaded from YouTube.\nChallenges we ran into\n\nLack of an official/universal implementation to use the webcam.\nDifficulties to get audios/videos from songs.\nUsing WPF environment, which lacks of community support compared to older environments.\n\nAccomplishments that we're proud of\n\nMost important, overcoming the challenges mentioned above.\nDeveloping with an environment which was completely new to all of us.\n\nWhat we learned\n\nExciting and useful APIs.\nNew programming environments (I'm sorry if I repeat myself too much, I'm sorry).\n\nWhat's next for Moodsic\nOrdered from easier to harder to implement:\n\nAllow the user to choose the genre, era, or artist they want to listen to if they want something more specific.\nUse a personal library of music combined with Internet-retrieved music.\nImprove the parallelism of the application for the downloads to avoid making the user wait.\nUse ML to better predict what the user wants to listen to. We've thought of a neuronal network with user's mood as input and the track's mood and genre as outputs.\nImprove the UI. (sorry not fans of front-end)", 
    "project_name": "Moodsic", 
    "project_tags": [
      "c#", 
      ".net", 
      "xaml"
    ], 
    "project_url": "https://devpost.com/software/moodsic-rx6ihq"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nRecently we experienced several events where a lot of us were surprised with the outcomes (eg. Brexit, US presidential elections). Most/all of our friends generally share our opinions on social media. There must be a way we can statistically assess this to help us form unbiased opinions.\nWhat it does\nSocial Bubbles allows a user to input a phrase, and uses their network to visualise the social bubbles in their network. The social bubbles will also make inferences about what likely opinions your friends might have, and how likely you are to see people with different views on your Facebook Feed.\nHow we built it\nSocial Bubbles takes the facebook friendships, friends posts and their connections of a user using machine learning (K-Mediods) to cluster the posts into groups. We filter the posts by the provided phrase. We then consider the Sentiment of each post using Microsoft Cognitive Services. We finally classify the users (based on their posts assignments) to different clusters using a Bayesian Classifier.\nThe result is displayed finally on a D3 Web interface with useful graph statistics such as network percentage, groups interconnectedness and top works per cluster.\nChallenges we ran into\nRetrieving the Facebook Data\nTweeking our clustering algorithm\nData mining/cleaning", 
    "project_name": "Social Bubbles", 
    "project_tags": [
      "python", 
      "nltk", 
      "scipy", 
      "d3.js", 
      "natural-language-processing", 
      "facebook-graph"
    ], 
    "project_url": "https://devpost.com/software/social-bubbles"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nI was trying to create a new way of interacting with power users by adding the ability to run terminal commands based on emotions.\nWhat it does\nConstantly monitors user facial expressions. If the user is angry or surprised, the program can run terminal command lines.\nHow I built it\nI used JavaFX in combination with Microsoft Emotions API and OpenCV to analyse facial expressions of the user, and run appropriate terminal commands.\nChallenges I ran into\nDependency problems.\nWhat I learned\nLearned more about JavaFX, OpenCV, and the Microsoft Emotions API. \nWhat's next for FaceControl\nExpand selection of emotional commands. Allow program to run in the background.", 
    "project_name": "FaceControl", 
    "project_tags": [
      "html", 
      "java", 
      "css", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/facecontrol"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Creating mosaic waves\nOur application is the ideal complement for a multitudinary event, such as a concert or a sports competition. The goal is to display a gradial wave between two colors by combining the images that appear on tons of different phones. \nHow will it work?\nFirst of all, the administrator generates a QR by setting up the parameters of the animation such as resolution, number of frames, colors and speed. This person also determines where the QR will be projected, so he will also input information on the room, and on the QR. \nThe next phase is at the time of the event. The administrator will display a QR and ask all the people in the venue to enter the website and upload a picture of the QR. Then, the server calculates the position of each phone and in what order should the images appear on the screen.", 
    "project_name": "eWave", 
    "project_tags": [
      "css", 
      "javascript", 
      "python", 
      "html", 
      "flask", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/ewave"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "A multiplayer game in which you defeat your enemies with code", 
    "project_name": "Codebot Wars", 
    "project_tags": [
      "python", 
      "javascript", 
      "react", 
      "jquery", 
      "html", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/codebot-wars"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nMissing scenes from netflix when I temporarily leave the laptop.\nWhat it does\nIt uses deep learning to recognise the person via the laptop's webcam. After that, the daemon can be configured to do anything. For demo purposes, we are using it to pause netflix / youtube videos after 10 seconds. Another use case is to lock the laptop after a certain amount of time without the user sitting in front of the laptop. This is vital in a highly secure environment to avoid unauthorised access to data.\nOther potential applications:\nWe can see this being applied in areas where full attention of the user is required for high security reasons, such as in the following two use cases:\n\nAir traffic controllers work in a job that requires them to focus every second on the screen showing the current flow of air traffic. Even a few seconds can cause fatal plane accidents. Automatic Face Recognition can monitor in the background if the controller is focused on the screen, if not it will notify the supervisor.\nBaggage screening at airports requires the user to identify objects on the screen. As soon as Automatic Face Recognition realises that the user is not focused, it will automatically stop the belt and wait for the user to return.\n\nHow we built it\nUsed a popular open-source project, Boss Sensor as inspiration to use face recognition via deep learning, training on examples of faces. The deep learning is performed by using Tensor flow and Keras. To get the video feed, we're using OpenCV. \nChallenges we ran into\n-- Using Tensor flow and Keras for deep learning. A huge number of training examples are required. Therefore, it is not as accurate yet as we'd like it to be. \n-- Getting OpenCV installed on a mac. This was a nightmare.\nAccomplishments that we're proud of\n-- Able to differentiate between different faces as opposed to just traditional face detection. This is able to recognise different faces for example the face of an authorised user vs. an unauthorised user.\nWhat we learned\nWe've learned how to use Tensor flow for deep learning. We also learned about feature recognition and image manipulation. \nWhat's next for Automatic Face Recognition\nWe would like to automate the learning process of the algorithm. Currently, we have to manually capture images and train the algorithm. Automating this process would mean a larger training dataset, resulting in higher accuracy.", 
    "project_name": "Face recognition to execute commands", 
    "project_tags": [
      "opencv", 
      "bash", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/automatic-face-recognition"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nWe wanted to find an application of bots to help learning languages, with focus on early beginner (eg. children).\nWhat it does\nThe user gets to pick a category of images and then different images are showed to him/her. The user should input the objects present in the image and compare the user's input with the results obtained from Computer Vision API.\nHow we built it\nWe built it using Node.js SDK and Microsoft Bot Framework and 2 of the Microsoft Cognitive Services.\nChallenges we ran into\nSetting up and connecting the APIs. Lack of enough example code and documentation for Microsoft Bot Framework.\nAccomplishments that we're proud of\nWe have a bot!\nWhat we learned\nWorking with a new technology stack.\nWhat's next for tech-miners\nImplementing the Speech Recognition API and publish the bot on more platforms.", 
    "project_name": "tech-miners", 
    "project_tags": [
      "node.js", 
      "telegram"
    ], 
    "project_url": "https://devpost.com/software/tech-miners"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nVR game where you had to do some physical exercises to achieve victory.\nWhat it does\nIn this game, you run around in a maze and if you find an enemy, you need to jump in real life to attack the foe. \nHow we built it\nWe used Google VR (Google Cardboard) together with Unity3d engine\nChallenges we ran into\nLocal networking is very tricky to implement when you can test it on your phone only which doesn't have to debug.\nAccomplishments that we're proud of\nVR is working nad we had no prior experience.\nWhat we learned\nVR and local network multiplayer implementation in Unity\nWhat's next for MazeVR\nSingle player mode, mode weapons and challenges to get powerups", 
    "project_name": "MazeVR", 
    "project_tags": [
      "unity", 
      "google-cardboard"
    ], 
    "project_url": "https://devpost.com/software/mazevr"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nDo you know the movie \"Guardians of the Galaxy\"? In it, there is a bad-ass ravager, Yondu, who commands a deadly arrow just by whistling. We wanted that.\nWhat it does\nWe have managed to build a library for recognizing whistles even in noisy environments, and have built three harmonizing games on it.\nHow we built it\nWe used some basic processing on the FFT supplied by the AnalyzerNodes in the Web Audio API, and used jaws.js to build nice games around it.\nChallenges we ran into\nFor one, there was the challenge of processing the audio properly. Also, the inputs supplied by whistling were very different from any input we have worked before. Finally, whistling varies from person to person: we had to set up a way to adjust to each person's sound signature.\nAccomplishments that we're proud of\nWe are really proud of having put together such efficient (reasonably fast and with good noise immunity) signal processing. \nWhat we learned\nI think we got much better at working quickly and efficiently in a team.\nWhat's next for eeiiaaoouuh\nProbably, we should polish it up greatly, and possibly, we should unify the visual style of the game. We also have plans to connect multiple input devices via WiFi", 
    "project_name": "eeiiaaoouuh", 
    "project_tags": [
      "html5", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/eeiiaaoouuh"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "stashsnippets package\nPrototype of an Atom package that lets you store code snippets for later use to reduce code duplication and improve programming efficiency. Code snippets can be selected and stored in a database. This idea was based on this Github tutorial to build a clone of Sourcerer, an Atom plugin that gets relevant code snippets from StackOverflow (tutorial here: https://github.com/blog/2231-building-your-first-atom-plugin).\nWe have extended this idea by implementing a database with MongoDB and adding various functions - as a user works, they can select code snippets to be inserted into the database and retrieve these snippets later; they can also compare selected snippets to existing entries in the database to avoid duplication. If a selected snippet already exists in the database it will not be saved. (There are some bugs but we are working on it)\nWork in progress for Hack Cambridge 2017.", 
    "project_name": "Stash", 
    "project_tags": [
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/stashprototype"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "homeFeeds\nUsing the pusher feeds API you can get instant updates from your IoT devices with their own personal message.\nExamples:\n     - You have a pressure sensor on your doormat, it senses someone standing on top it. Appends a pusher feed saying \"You have a visitor!! Front door!\"\n- You have a moisture sensor on your plant and it needs more water. It appends a pusher feed on your houses Feed asking \"Someone!! Water me!!\"\n\nI believe that Pusher Feeds have huge potential in the IoT and smart house industry as it is super easy, flexible and customisable to implement. It is responsive and provides simple instant alerts to when an event occurs which is very valued. Its simple implementation lets activists play and tinker and create their own perfect smart home ecosystem just the way they want it.", 
    "project_name": "homeFeeds", 
    "project_tags": [
      "javascript", 
      "css", 
      "html", 
      "c++", 
      "intel-edison", 
      "arduino", 
      "windows-10", 
      "linux"
    ], 
    "project_url": "https://devpost.com/software/homefeeds"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nMedical students already have tonnes of work on their plates: struggling with referencing essays shouldn't be as much of a bother as it is. \nWhat it does\nIt reads your essay, figures out the underlying topics and then sends you all the related reference papers it can find.\nHow I built it\nI used the Microsoft Text Analysis tools, and obtained the API for Topic Analysis. I integrated this with the PubMed API, so that the reference papers could be accessed. \nChallenges I ran into\nThe Microsoft API only works with a minimum of 100 documents sent at a time, so I had to sit with the sponsors to figure out how to get around this as you would usually only send it one document at a time. \nAccomplishments that I'm proud of\nLearning a new language. \nWhat I learned\nI learned how to use HTML for the first time so that I could work on the front-end.\nWhat's next for HackRef\nIt's far from perfect, so I plan on actually finishing HackRef. I want to be able to use it for my own essays.", 
    "project_name": "HackRef", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/hackref"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "", 
    "project_name": "Go", 
    "project_tags": [
      "node.js", 
      "express.js", 
      "android-studio", 
      "pusher", 
      "azure", 
      "amazon-web-services", 
      "skyscanner"
    ], 
    "project_url": "https://devpost.com/software/go-pdok9l"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Aggregator\nAggregate feeds for yourself and for others\nThe idea is instead of having a server running 24/7 to fetch new feeds for users, making every user's device the aggregator for everyone. \nWith Aggregator, you can \n\nSubscribe a Channel\nCheck your Channel list\nCheck Article list in Channels you've subscribed\nRead Article\nCreate a new Channel\n\nPowered by Pusher API", 
    "project_name": "Aggregator", 
    "project_tags": [
      "swift", 
      "pusher"
    ], 
    "project_url": "https://devpost.com/software/aggregator-lr9uz8"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "It's our first time using JavaScript. We wanted to make something using music that reacts (mirrors) your mood. So we used Microsoft's Emotion API and Tone.js.", 
    "project_name": "soundfeel", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/soundfeel"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "ProductivityPal tm\nAn application to quantify your productivity level and compare it with other developers.\nFeature list:\n\nAutomated repo detection\nCounts lines of code written via git\nCounts wpm, words written, and other metrics like whatpulse.\n\n-Detects focused window to detect IDE/program used \n(for filtering by wpm written in ide) etc.\n-Detects websites visited and whether they are productive/unproductive\n(machine learning trained on 'productive' and 'unproductive' data)\n-Compare productivity with others in your company/network and see \nwhat percentile you are in!\nClient:\nMonitors productivity, uploads productivity data to server\nServer:\ncompares productivity data between users, rankings\nJSON transfer format for a data upload to the server (must authenticate with the server first):\nserver upload url is (address)/productivity/add_record\n{\n    'time_start': sometimestamp,\n    'time_end': sometimestamp,\n    'time_productive': sometimedelta\n}", 
    "project_name": "Productivity Pal", 
    "project_tags": [
      "javascript", 
      "python", 
      "html", 
      "css", 
      "django"
    ], 
    "project_url": "https://devpost.com/software/hackcambridge-5zgmxf"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nThe scientific community grew to communicate research among its peers but outreach to the general public is still sparse. This is mainly due to the complex nature of modern scientific findings which makes them difficult to break down to a simple level. Alongside this, opportunities to have a dialogue with experts is often limited. \nWe think that everyone benefits from the outcome of scientific studies and therefore a quick and simple way of communicating the results needs to be created. Through a live chat, the general public is able to learn about modern research and ask any questions they have. This also helps scientists to communicate current findings in an understandable fashion. \nWhat it does\nSciChat works by connecting members of the public with scientists in the areas they are interested in. By searching keywords, the users are matched with corresponding experts and taken to a live chat where they can discuss the topic of interest in a conversational manner.\nHow we built it\nWe developed SciChat as a javascript-based web application without any dependency on a back-end. For our app we needed a database to store our users base as well as a user-authentication system. We used Firebase for that purpose which provides a fully functional API with all backend resources SciChat requires. The chat client module of our app has been implemented using the PeerJS library, which provides a rich API for achieving efficient WebRTC p2p chat communication through a mediator server provided by PeerJS.\nChallenges we ran into\nWe\u2019d like to display recommended papers (relevant to the selected area of interest) to the user if they are waiting to be connected to another member, however we had some challenges using the APIs of scientific journals, and so plan to implement this feature in future. \nAccomplishments that we're proud of\nCreating a functioning prototype of our idea within the timeframe of 24 hours. Implementing a chat interface that pairs users based on similar interests/research fields via tags. \nWhat we learned\nWe can do a lot of stuff in 24 hours!\nThe biologists in the group learned to code in html, javascript and the basic structure of creating a website. \nWhat's next for SciChat\nTo refine the current website, we need to improve upon usability as well as implement numerous extra features we did not have time to integrate.\nIn addition to public-to-academic communication, we hope to add a scientist-to-scientist communication to the platform. Scientists would be able to display a profile including information about their research along with links to publications and professional websites. \nWe would also like to add a reputation system where academics can rate the engagement of the user they chatted with, and vice versa. This will allow for a more sophisticated pairing algorithm in the future. We also hope this will further incentivise the use of the platform.\nThere are several ways in which data generated may be used, such as understanding trending topics and creating user statistics (average rating, number of chats)", 
    "project_name": "SciChat", 
    "project_tags": [
      "javascript", 
      "firebase", 
      "jquery", 
      "bootstrap", 
      "webrtc"
    ], 
    "project_url": "https://devpost.com/software/scichat"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nWe all hate waking up in the morning, so it's no wonder snoozing the alarm happens more often than we'd all like. What's worse is canceling the alarm by mistake then waking up hours later realising you missed some important event because of a badly designed alarm clock application, and your dreadful morning grogginess. \nThe world deserves an alarm clock application that does what it's supposed to do: wake you up no matter what! \nWhat it does\nHapiAlarm puts a twist in how the alarm is dismissed; you have to do it with your face -- and be expressive. The app requires you to do a series of challenges; look into the phone's front camera and show the emotions the alarm clock asks you to -- smile, look surprised, or even show your true morning feelings and make a sad face. Once you've done a number of these, the alarm stops! \nHow we built it\nWe created the Android App using Android Studio and the SDK tools to implement the UI and most of the functionality, while for interpreting facial expressions we've sent queries to the Microsoft Cognitive Emotion API.\nChallenges we ran into\nWe haven't had much prior experience with Android Development, so figuring out how to do some things (like opening a camera preview, snapping pictures periodically without storing them) took some effort. Another issue we had was that the camera was returning the images rotated by 90 degrees, and while we knew this we had no idea the Microsoft Congitive API doesn't work on images where the faces are rotated, so it took us some time to figure out why our app wasn't working :) \nAccomplishments that we're proud of\nMaking this app work decently well in under 24 hours!\nWhat we learned\nHow to work with the Android Development tools.\nWhat's next for Hapi Alarm\n\nAllow the user to set the length and difficulty of the challenges.\nMake the ringtone increase in volume as you fail challenges.\nChange the alarm ringtone\nMake the alarm persistent - no way to stop it unless you succeed in all the challenges\nDetect if your eyes are closed (although then you couldn't read the challenge requirements :) )\nDetect if your cheating by putting pictures instead of your camera", 
    "project_name": "Hapi Alarm", 
    "project_tags": [
      "android-studio", 
      "android", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/hapi-alarm"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nEating out should be faster and splitting the bill a lot less painful\nWhat it does\nLet's you quickly order at participating restaurants and see what your friends are getting\nHow I built it\nThis prototype was created all with JS/HTML/CSS & firebase.\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for I'm hungree\nNative app", 
    "project_name": "I'm hungree", 
    "project_tags": [
      "html", 
      "css", 
      "javascript", 
      "firebase", 
      "jquery", 
      "intellij-idea", 
      "github"
    ], 
    "project_url": "https://devpost.com/software/cambridge-restaurants"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nWe live to challenge ourselves to use technologies we have never used before. We came up with a fun and social application that utilised some of these tools.\nWhat it does\nSoundSparrow is a fun and social application designed to let people interact through music. Everyone has a unique tune that is augmented based on your mood! Mash with nearby sparrows to create unique new tunes by mixing the music.\nHow we built it\nSoundSparrow generates a persistent UUID for each phone and uses this to seed a random number generator. In turn, this is used to algorithmically generate a song. We change musical elements based on the emotion of the user; this is done using the Microsoft Cognitive Services emotion module and sending an image taken by the user. We broadcast GAP advertising packets that contain the UUID and emotion of each user; these are picked up by all other devices and the songs are merged and played. Azure was used in order to rapidly host the photos for emotive analysis.\nChallenges we ran into\nWorking with Android can be challenging at times, an example can be seen when attempting to implement the Bluetooth algorithm. An advertising packet can only fit 31 bytes of user data, and despite the lightweight mentality taken when considering the design, this created difficulty when deciding what information to send. \nAccomplishments that we're proud of\nWorking on separate key areas of the project independently and subsequently being able to seamlessly merge the components together. Being able to communicate in both directions in real time between multiple Android devices through Bluetooth. \nWhat we learned\nWe learned a lot about the mechanics of Android development, and now know common mistakes to avoid in future. Also gained knowledge of development in all aspects of the application using brand new tools; such as Azure and Microsoft APIs.\nWhat's next for SoundSparrow\nNext would be to take the social aspects to the next level, by sharing user details including social networking sites through the existing communication.\nAdd OpenGL to the visualisation.\nWork of the UX.", 
    "project_name": "SoundSparrow", 
    "project_tags": [
      "android", 
      "android-studio", 
      "bluetooth", 
      "midi.js", 
      "azure", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/soundsparrow"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nChao racer\nWhat it does\nCrowd-controlled unity game through a web app that runs everywhere\nHow we built it\nWe wrote some C#, and some javascript, helped by many many naps and the awesome pusher team.\nChallenges we ran into\nGetting an idea - we only started after dinner.\nAccomplishments that we're proud of\nMaking it work\nWhat we learned\nUnity. C#. Js.\nWhat's next for Crowd Racer\nFurther awesomeness.", 
    "project_name": "Crowd Racer", 
    "project_tags": [
      "unity", 
      "pusher", 
      "c#", 
      "javascript", 
      "web", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/crowd-racer"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nChemistry, Mathematics, QUANTUM physics, Biology... the list goes on, recursing into countless topics more... We've got less than an ARM's length of time to our exams, yet we're flooded by the need to keep thinking about what to focus on, and how we would absorb the knowledge into our heads -- how do we push the FRONTIER of our knowledge and what should we study first? \nBut yet, why do we have to be the ones wasting our jet brains on making these decisions?\nWhat it does\nWe believe that the tediousness of planning and prioritising what to study, when to study and how study is unnecessary and often messy. We should be spending our time on the things that matter - learning with greater depth or spending quality time with our friends. \nImprovable is a platform which takes care of this for you - it learns about you as you learn about the world. It provides you with practice questions for your exams and knows what you are good at and bad at, adapting to your abilities and reinforcing the concepts you have freshly learnt through personalised notifications.\nBut what good is that in a boring interface? Improvable is more than a platform - it's a lively and lovely chat bot and personalised learning buddy. It tells jokes, keeps track of your learning and accelerates your learning just for you!\nWithin each session, users will be available to review their performances by sharing, rating and comparing their statistics against the past, or their friends. Scoring is based on each session and provides a dynamic, interactive and accurate metric for fast and motivating feedback.\nHow we built it\nDistilling the ethos of every inspiring teacher-pupil relationship was at the heart of Improvable. From then, we've tessellated, out, creating complex ORIGAMI folds, adding humour and personality to solid facts whilst keeping the interface fresh, crisp and as sharp as an ARGON bulb. Each of the four stages has been carefully crafted before being PUSHed to fulfil the gestalt of what learning can be. Using a powerful MICROSOFT azure server, Improvable was designed to be fast and responsive, giving the student full responsibility and MANpower over the STUDIO of study. \nChallenges we ran into\nWe changed our ideas midway after realising that creating a learning buddy would be much more interactive and intuitive than our initial straight-laced platform, and had to quickly adjust our mindset and code. What better way would there be than for the student to forge their own path of discovery of learning?\nWe wanted to allow the writer free reign over the product, with natural language of their own - this proved to be a challenge that needed pure PUSHERS to overcome in pure javascript. \nAccomplishments that we're proud of\nOur learning buddy has spread joy and knowledge to the people around us. We've relished the opportunity to imbue each of our own contrasting personalities into Improvable, ensuring that there's something for everybody.\nWhat we learned\nOur first bot built for most of us, and definitely lots more about DirectLine and the Microsoft Azure APIs for bots and AI. Was an accelerated 24 hours of learning for all of us! Seeing, interacting and constantly developing the bot was a rewarding experience for all, and hopefully the first of many similar ones to come.\nWhat's next for improvable\nGetting it out to students, teachers and users everywhere! \nWe understand that not every student can afford to have personalised feedback from teachers and private tutors all the time - why not make such a service accessible to all students just through a click of a button?", 
    "project_name": "Improvable", 
    "project_tags": [
      "javascript", 
      "azure", 
      "android", 
      "java", 
      "natural-language-processing"
    ], 
    "project_url": "https://devpost.com/software/improvable"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nFinding flights for larger groups is often hard. Let's make it simple!\nWhat it does\nSearching flights given departing, arrival city and dates.\nHow I built it\nFlask back-end with Pusher's Feeds API.\nChallenges I ran into\nSkyscanner API's response is not the cleanest. Feeds API has little documentation.\nAccomplishments that I'm proud of\nWhat I learned\nHow to structure projects on my own.\nWhat's next for Slackscanner", 
    "project_name": "Slackscanner", 
    "project_tags": [
      "python", 
      "html"
    ], 
    "project_url": "https://devpost.com/software/slackscanner"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Hack Cambridge 2017\nA simple hack completed in the early hours of Hack Cambridge 2017. The skeleton of a web app that allows users to have a live feed of what's going on in their city", 
    "project_name": "What's the Latest?", 
    "project_tags": [
      "html", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/hc2017"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "", 
    "project_name": "The Tower of Babel", 
    "project_tags": [
      "unity", 
      "blender", 
      "c#"
    ], 
    "project_url": "https://devpost.com/software/the-tower-of-babel"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "HackCambridge 2017 Project\nby Dao Zhou, Minxuan Xie, Renqiao Zhang, Qiuying Lai\nEasyTensor: GUI for Simple Models in Tensorflow\nHelping beginners and students to understand the structure of Tensorflow better by providing a GUI where standard neural net models written in Tensorflow (Python) can be generated.\nThis uses MNIST Data as an example. debug*.py shows how the models can be trained and used.\nDependencies:\ntensorflow, jinja2, flask, opencv\nExamples:\n\nTo draw a model use the following on terminal:\ncd server\npython easy_tensor_server.py \nto launch drawer on localhost\nClick generate on the webpage to generate model file out local directory, this will output a file in 'models' directory in the format [model_type]_output.py\nFollow template on debug0 for a MultiLayerPerceptron Model, debug1 to run a CNN Model\nLaunch Tensorboard using tensorboard --logdir='[your dir]' to visualize in TF graph to check correctness\nuse models/predict.py to predict new digit images\n\nFurther Instructions:\n\nYou must use a perceptron model after layers of CNN for flattening before output layer", 
    "project_name": "EasyTensor", 
    "project_tags": [
      "javascript", 
      "python", 
      "html"
    ], 
    "project_url": "https://devpost.com/software/easytensor"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nThe ideea came from Diner, who worked with learnig materials platforms before.\nWhat it does\nThe webapp will have a short discussion with the user, who can state if he wants to learn about a certain programming language, or if he wans examples, or it can ask for a coding challange.\nHow we built it\nThe JavaScript front-end calls the LUIS API in order to process the natural language. After that it intercepts the resulted JSON file and it parses it and makes the relevant calls to the C# controller.\nChallenges we ran into\nThe novelty of the API made it quite a challange to harness all it's power.\nThe server handles often resulted in bad gateways.\nRecognising short answers out of context (i.e. ~What difficulty level would you be interested in? ~Intermediate.)\nAnd many many more.\nAccomplishments that we're proud of\nThe robust controller and database model.\nUser Interface.\nHigh LUIS comprehension.\nWhat we learned\nHow to use bots.\nHow to integrate multiple APIs.\nHow to solve unsolvable issues.\nHow to tackle challanges as a team.\nWhat's next for Code Sensei\nSensei is shooting for the stars.\nIt will become even more wise, once he learns about the infinite power of the internet.", 
    "project_name": "Code Sensei", 
    "project_tags": [
      "c#", 
      "javascript", 
      "sql"
    ], 
    "project_url": "https://devpost.com/software/code-sensei"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "BMReports hosts a large repository of real-time and historical UK power data. This includes information about the usage of wind, solar, coal, hydro currently being used by the UK, how much power is France sending to the UK or vice-versa via interconnectors etc. This information can be used by economists, energy researchers and policy makers to determine consumer behaviour via energy usage, and is used as backing for public policy decisions. \nHowever, this data is held in a convoluted format, requiring users to go through over 200 pages of documentation to get the necessary real-time or historical energy data. We have came together and developed a really simple tool that effectively exports the energy data you need in the CSV data format. This allows anyone, including amateur researchers and budding economist to get quick and easy access to the data you really need.\nRTEnergy stands for Real Time UK Energy Data Tool", 
    "project_name": "RTEnergy", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/real-time-uk-energy-data"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nWe conceived our small application by taking into consideration the desire of many people to develop their public speaking abilities and their need to gain an insight into how diverse audiences perceive them.\nWhat it does\nThe application prompts the user to upload a number of images from his own computer and using the Microsoft Cognitive Services, it provides a coefficient between 0 and 1 according to the intensity of the emotions displayed by people in pictures. It can offer the most valuable insight if the images all include the same audience at different moments in a presentation.\nHow we built it\nUsing the online resources published by Microsoft (e.g. documentation and references of the Emotion API) and Visual Studio, we build a simple Windows Form Application, consisting of two forms, one of which contains the form for uploading images, while the other one displays the results.\nChallenges we ran into\nOne of the biggest challenges we encountered was making the different pieces of the application fall into place. While one of us tried to build the UI, someone else explored how to make use of the Emotion API and the other one worked on converting the resulting JSON into a useful format for further processing.\nAccomplishments that we're proud of\nTaking into account our inexperience and the amount of time we spent researching online the abilities of the tools we planned to use, getting the application to work without crashing might be regarded as an accomplishment itself. Also, we would say that we worked quite well as a team, learned new things and enjoyed ourselves.\nWhat we learned\nWe now know how to make use of the Cognitive Services API, how to convert the JSON into the wanted form and how to integrate these pieces into an Windows Forms Application.\nWhat's next for Audience Analyzer\nWe will definitely try to enhance the user interface and offer a more in-depth analysis of the results given by the Emotion API and we are considering offering advice to our users as to how to hone their public speaking skills.", 
    "project_name": "Audience Analyzer", 
    "project_tags": [
      "c#", 
      "visual-studio"
    ], 
    "project_url": "https://devpost.com/software/audience-analyzer"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nBeing able to check how clean your water is, is crucial for many people - especially people in developing countries that often lack access to clean water sources. However, test sticks covered with chemicals that change color  depending on the properties of the water (like the famous Litmus test for the ph-value) are very cheap to produce and easy to use. However, reading out the correct values can be a bit tricky and since many people actually own smartphones anyway we wanted to come up with a way to combine the two.\nWhat it does\nOur App automates the process of reading out the values from the color coding of a mock up test stick. Just focus with your camera and the app will tell you the ph-value associated with the sample you provided.\nHow we built it\nWe used OpenCv in C++ for the technical part of the app. First we normalize the input image (similar to what happens when you scan QR codes). This means that even slightly tilted or rotated input works fine with the algorithm (most of the time :P). As the next step we extract the color values from the normalized image by averaging over certain areas. \nWe have stored a table containing color codes for various chemicals and ph values, so that then we are able to perform a simple optimization in order to find the ph value that matches the theoretical data best.\nThe app itself is written in a mix of Swift 3 (for the interface) and ObjectiveC (to communicate with our C++ code).\nChallenges we ran into\nNeither of us had experience in mobile development, so getting to grips with Swift and ObjectiveC was a struggle.\nDoing a whitebalance like color correction for bad lighting was also harder than expected.\nAccomplishments that we're proud of\nWriting our first app and being able to do realtime image processing of a video feed on mobile device.\nWhat we learned\nBasics of image processing with OpenCV and mobile app development.\nWhat's next for WhatTheColor\nWe'd like to improve the accuracy for the normalization of the image, both the perspective and the color.", 
    "project_name": "WhatTheColor", 
    "project_tags": [
      "opencv", 
      "c++", 
      "swift", 
      "ios"
    ], 
    "project_url": "https://devpost.com/software/whatthecolor"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nA desire to instantly feel the reassurance of having mail waiting for you (especially if it arrives far away - which isn't uncommon in Cambridge colleges)\nWhat you get\nAn email notification, whenever you have mail in your pigeonhole\nHow we built it\nSome embedded hardware running Lua, talking to an online service with which you have an account.\nChallenges we ran into\nConnecting hardware to the internet.\nAccomplishments that we're proud of\nIt works!\nWhat we learned\nVarious hardware platforms and how they integrate with external devices.\nWhat's next for PidgePing\nSlick hardware, push notification on mobile", 
    "project_name": "PidgePing", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/pidgeping"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nLast year we used a device called myo to allow users to play space invaders and pong by using hand gestures as the 'controllers'. This year, we carried on the theme of exploring how human interaction with computers will change in the future. \nWhat it does\nIts a 3 - dimensional IDE which incorporates mouseless interaction. \nHow I built it\nWe used an Oculus Rift and a Leap Motion device.We did everything in java. We used the JOGL library to communicate directly to an Oculus Rift. We also, used the jovr library to translate java into OpenGL. Thankfully the interaction between the leap motion device was also done in java. \nChallenges I ran into\nA LOT of challenges were overcome. First, the Oculus Rift demands a lot of graphical processing power. Out of three laptops we could only run it on a mac. Oculus has dropped all support for mac users which meant we could only run the Oculus on very old drivers. Hence, documentation was rather hard to come by. In addition to this, since we were running older drivers we could not take advantage of easier VR techniques such as WebVr. Hence, we were forced to use JOGL bindings to write directly to the oculus rift display and JOVR to read the IMU data from Oculus.  Thus, we have completed a vr project in java! \nAccomplishments that I'm proud of\nI think the most important thing is - we did it ! We've had this idea for a very long time and we ran into so many problems. At certain points it looked as if the idea was achievable and we would be left with partial bits of code . However, we never ever gave up and tried absolutely everything. To incorporate the leap motion as well, is an added bonus since it enhances the unique property of our project.\nWhat I learned\nVr requires a lot of processing power  and where there's a will there's a way ! Seriously, having to use the Oculus where there is no support and being forced to use technology we weren't used to was an absolute pain! But we regret nothing because we achieved an amazing product in the end. \nWhat's next for V-De\nV-de is a working concept that has the potential to redefine the relationship between humans and computers. So far it's and IDE for developers. Imagine if you could see the effects of your code whilst you are coding. All achievable in the Oculus. This would help greatly with designers - no more having to complie and refresh.", 
    "project_name": "V-De", 
    "project_tags": [
      "oculus", 
      "leap-motion", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/v-de"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nVideo calls such as Skype, Google Hangouts, and WeChat have revolutionised communication, in business, socially, and in many other applications. Yet despite the huge uptake, there remains a lack of support for the visually impaired. We believe that the user experience of the visually impaired would be greatly enhanced by providing feedback through facial recognition and interpretation of the expressions of the people they are talking to. \nWhat it does\neMotion aims to address the lack of support for the visually impaired by harnessing a Microsoft Cognitive API to provide real-time information on facial expressions during a video call. The API interprets a still image of the video call and calculates the likelihood of different emotions. A customisable sound-effect is then played to inform the user of the most likely emotion.\nHow we built it\nThe peer2peer connection is established and maintained using WebRTC, Node.js, and socket.io. Video streams are embedded in the html code using Javascript, which also powers the back-end.\nChallenges we ran into\nA key issue was that domains that we created were unable to stream video because the location was not considered secure enough. Socket.io is very hard to implement on cloud systems. The Microsoft API was incredibly useful, but involved a steep learning curve.\nAccomplishments that we're proud of\nWe are proud of how quickly we were able to adapt to challenges outside of our usual comfort zones by trying out new technologies and languages.\nWhat we learned\nComing from a wide variety of backgrounds, we were each able to learn a great deal about each other's skillsets.", 
    "project_name": "eMotion", 
    "project_tags": [
      "javascript", 
      "html", 
      "css", 
      "node.js", 
      "socket.io", 
      "webrtc", 
      "azure", 
      "google-app-engine", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/emotion"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nA web app to find literature to get you from what you know to what you want to know as efficiently as possible. Become familiar with a new field, understand a collaborators publication or check key publications for your literature review - all quickly and efficiently.\nIntroduction\nWhat it does\nThink of all possible knowledge as a (very) high dimensional hyperspace. Any publication will occupy some subspace of this hyperspace. Conventional literature searches provide the publications that intersect some subspace, usually defined by a keywords. More recent social media/bot approaches try to interpret the subspace the user is familiar with and suggest publications that exist at or just outside the boundary of this familiarity. Our service provides a means of bridging between the subspace of knowledge which the user knows and their search subspace. This is done by presenting the minimum necessary publications required for the user to traverse between these subsapces.\nHow we built it\nThink of all possible knowledge as a (very) high dimensional hyperspace. Any publication will occupy some subspace of this hyperspace. Conventional literature searches provide the publications that intersect some subspace, usually defined by a keywords. More recent social media/bot approaches try to interpret the subspace the user is familiar with and suggest publications that exist at or just outside the boundary of this familiarity. Our service provides a means of bridging between the subspace of knowledge which the user knows and their search subspace. This is done by presenting the minimum necessary publications required for the user to traverse between these subsapces.\nPublication subspace coverage is approximated as nodes and the hyperspace is projected onto a network with distances between nodes as approximations to the distances within the hyperspace.\nThese distance estimates are an aggregations of several factors including whether the papers are citation/reference connected (first degree connection), how many shared cited/referencing papers they have (second degree connections) and overlap of keywords. More could include text analysis of abstract/full text analysis; author input; experint input; user input or others.\nA shortest path is found on a network of unity weight edges for distances below a threshold and weights penalised above unity for distances above the threshold. This threshold is to model the users ability to move outside his field of knowledge. So papers they find comfortable learning are included but papers that they would find challeneging are penalised.\nChallenges we ran into\n\nCollecting a dataset large enough and representative\nData cleaning\nCompatibility between React and Flask\n\nAccomplishments that we're proud of\n\nA working prototype with real world data\n\nWhat we learned\n\nNetworkx is great and easy to use\nDon't be the guy not doing anything at the end who gets stuck with documentation.\n\nWhat's next for knowledge-direct\n\nIncorporate NLP to generate better distances between publications.\nSome sort of assessment of paper breadth/quality/accessibility\nTransition to more scalable technology\nApply bigger data set", 
    "project_name": "knowledge-direct", 
    "project_tags": [
      "sqlite", 
      "python", 
      "flask"
    ], 
    "project_url": "https://devpost.com/software/knowledge-direct-w9slvg"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nWhat it does\nHow we built it\nChallenges we ran into\nAccomplishments that we're proud of\nWhat we learned\nWhat's next for turing talk\nNot time, sorry. Maybe next time!", 
    "project_name": "turing talk", 
    "project_tags": [
      "javascript", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/turing-talk"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nAs an active Instagram user, I found it tedious to add the 'obvious' hash tags in the caption of every photo I post. This inspired me to create an app that would automatically generate the hash tags for me based on the image context. I also wanted a method of posting to Instagram through a different platform (not only restricted to my IPhone Instagram App).\nWhat it does\nInstaVision is a web application that allows users to upload a photo, automatically generate hash tags with the click of a button and post the photo to their Instagram account.\nHow I built it\nI used Microsoft Cognitive Services Computer Vision API to analyse the uploaded image and return a list of keywords which are converted into hashtags that are inserted into the caption.\nI built the back-end using PHP and various third party APIs such as Imgur API for uploading an image to cloud temporarily and NXS API for posting to Instagram.\nFor the front-end, I used Javascript/JQuery and AJAX for submitting form data to the API endpoint and handling image uploads, and I used HTML/CSS and the Bootstrap framework for the basic user interface.\nChallenges I ran into\n\nDebugging in PHP\nAJAX errors\nUploading the image file: I initially uploaded the image directly to the server using the PHP command: move_uploaded_file, but in the end I resorted to uploading to Imgur due to various problems including read-only structure of Heroku.\nDeleting the image file from Imgur after posting to Instagram\nHandling and parsing the Computer Vision API JSON response\n\nAccomplishments that I'm proud of\n\nMaking use of the Microsoft Cognitive Services API\nBuilding the full web application alone in the limited time frame\n\nWhat I learned\nI learnt a lot about the Microsoft Cognitive Services and it's various APIs and how to utilise them in PHP. I also learnt how to handle file uploads and send requests to the API using AJAX.\nWhat's next for InstaVision\n\nAdd a new feature to allow users to 'choose' an accuracy level for the hash tag generation.\nImplement security using public key encryption for login details\nImplement validation checks and security for image uploads\nImprove usability and user-friendliness of the application", 
    "project_name": "InstaVision", 
    "project_tags": [
      "php", 
      "javascript", 
      "html"
    ], 
    "project_url": "https://devpost.com/software/instavision"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nSome of the flights on sky scanner includes airlines which have very poor safety ratings. We want the users to travel safely so have removed the airlines which have poor safety ratings\nWhat it does\nUses the IATA API for getting airline safety ratings for SkyScanner flights\nHow we built it\nWe used IATA Api to get the safety ratings along with airlineratings.com. We pulled all the flight data between two airports from sky scanner and got their respective safety ratings. Then display that to the user\nChallenges we ran into\nUsing the pusher api to update the data in real time. \nAccomplishments that we're proud of\nMake air travel safe again.\nWhat we learned\nNever fly with Air Canada Express, Bangladesh Biman.\nWhat's next for Airlines safety\nWe are going to make the UI nicer and implement this as a chrome extension. Only show results above a certain safety rating", 
    "project_name": "Airline safety", 
    "project_tags": [
      "pusher", 
      "skyscanner", 
      "python", 
      "html5", 
      "css3", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/airlines-safety"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nWe had so much fun exploring the Microsoft Cognitive Services, we actually decided to create a game out of it!\nWhat it does\nCollect weapons and defenses, activate them by a specific emotion to beat your opponent!\nHow we built it\nWe created a custom C++ game engine and connected through Node.js to the Microsoft Emotion API.\nAccomplishments that we're proud of\nPretty hard to connect Node.js and C++ (we ended up using a custom REST service and the Microsoft C++ REST SDK).\nWhat we learned\nDefinitely the Microsoft API, lots of C++ and everything around it.\nWhat's next for Face.off\nLots of fun for everybody ;-)", 
    "project_name": "Face.off", 
    "project_tags": [
      "c++", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/face-off-3teic9"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Hack Cambridge 2017\nReal-time Event-based Monitoring System for Seniors and Elderly using Neural Networks\nTeam:\nCristian Axenie, Simeon Kostadinov, Mark Mathews\nIt has been estimated that 33% of people age 65 will fall. At around 80, that increases to 50%. In\ncase of a fall, seniors who receive help within an hour have a better rate of survival and, the faster\nhelp arrives, the less likely an injury will lead to hospitalization or the need to move into a long-term\ncare facility. In such cases fast visual detection of abnormal motion patterns is crucial. \nIn this project we propose the use of a novel embedded Dynamic Vision Sensor (eDVS) for the task of classifying falls. Opposite from\nstandard cameras which provide a time sequenced stream of frames, the eDVS provides only relative\nchanges in a scene, given by individual events at the pixel level. Using this different encoding scheme\nthe eDVS brings advantages over standard cameras. First, there is no redundancy in the data received\nfrom the sensor, only changes are reported. Second, as only events are considered the eDVS data rate is\nhigh. Third, the power consumption of the overall system is small, as just a low-end microcontroller is\nused to fetch events from the sensor and can ultimately run for long time periods in a battery powered\nsetup. This project investigates how can we exploit the eDVS fast response time and low-redundancy\nin making decisions about elderly motion. \nThe computation backend will be realized with a neural network classificator to detect fall and filter outliers. The data will\nbe provided from 2 stimuli (blinking LEDs at different frequencies) and will represent the actual position of the person wearing them.\nThe changes in position of the stimuli will encode the possible positions corresponding to falls or normal cases. \nWe will use Microsoft Azure ML Studio to implement a MLP binary classifier for the 4 (2 stimuli x 2 Cartesian coordinates - (x,y) in the field of view) dimensional input. We labelled the data with Fall (F) and No Fall (NF).", 
    "project_name": "neural_fall_detection", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/neural_fall_detection"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "followFeed\nHave you ever tried to lead a pub crawl? Or struggled with finding your friends at a music festival? There's a lot of apps that try to fix this problem, e.g. Find My Friends for iOS. They all share one massive drawback though: everyone needs to be using the same app. We fix that.\nOnce followFeed is installed on your device (we've developed it cross-platform using ionic framework), you're only a few clicks away from sharing your location live. You enter an event title, a start and stop time for tracking. The app will then run in the background of your device for the chosen time. And here's the crux: you are then given a URL that you can share with anyone to follow you in their web browser on whatever device. Without installing any apps.\nThe interface also allows you to add scheduled paths, which can be great for pub crawls etc. We also provide a chat feed using Pusher Feeds API (this is currently not working online due to pythonanywhere.com restrictions for free users). But it works locally and on any paid host.\nWe expect to make millions on this.", 
    "project_name": "followFeed", 
    "project_tags": [
      "javascript", 
      "css", 
      "html", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/followfeed-server"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nInspired by Hack Cambridge to add more detail to each Slack account to make the team forming process faster and easier. Allowing you to join or create a team that will give you the top hackathon experience. \nWhat it does\nThe bot collects information about each user when they join the Slack group, taking information from their Github and Devpost accounts, as well as mentor and team statuses. \nBy talking to the Cam Bot on the Slack account you can find out more about individual users and get lists of mentors or people looking for a team (which you can filter depending on any language requirements). \nWhen you ask about a specific user the Cam Bot will send you screenshots of the user's Github and Devpost pages, their team and mentor statuses, the languages they know, and links to their Github, Devpost and LinkedIn account. You can ask the bot for a list of mentors or people looking for a team, which you can then explore individually in  more detail. You can also update your team status, and view your profile.  \nHow we built it\nWe are running two Node.js servers that exchange data via a REST API.\nOne is used to control the chatbot itself and manage chat session data. It uses the Microsoft Bot Framework, which allows us to deploy our bot to several platforms easily - we currently have Slack and Facebook Messenger integration (although the primary use should be via Slack).\nOur second server manages user profiles, authentication, user OAuth tokens for 3rd party API integrations, and handles rendering of user image-dashboards - we are using a headless WebKit, PhantomJS, to render screenshots of new users' GitHub and Devpost previews. It later serves these assets for the chatbot controller to use them.\nHere we also handle team formations and persist user data.\nWhat's next for Team HackerBot\nThe Cam Bot can already be used in any Slack group, as long as the Slack admin adds Cam Bot to the group.\nHope to incorporate Facebook messenger. Extend the use of Team HackerBot for other team building applications, such as tech startups etc.", 
    "project_name": "Team HackerBot", 
    "project_tags": [
      "javascript", 
      "express.js", 
      "phantomjs", 
      "jquery", 
      "bootstrap"
    ], 
    "project_url": "https://devpost.com/software/team-hackerbot"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nWe noticed that minor medical conditions often are hard to pin down. Examples include skin irritation, indigestion, or migraine. To make matters worse, the causes for such symptoms are unique to each person. Therefore, we set out on a simple and yet challenging task to create personalised data tracking that is accessible to everyone. \nIn addition, we realised that the same platform can be used to make informed decisions about our lives. In my personal dataset that was uploaded to the server we saw that productivity suffers from alcohol. (More subtile correlations were excluded for privacy reasons)\nWhat it does\nBriefly, it interactively collects users data via chat-bots (slack/facebook/skype) and present analysed data back to the users. The user can pick the objectives he is interested in and our server picks the most important questions to ask. When there is enough data, the platform suggests an informed decision.\nHow we built it\nWe started off by brainstorming ideas through the email conversation, which was started by the organising team. Hence, we already knew what we wanted to do when we arrived \u2013 some conceptual design was followed by flowcharts and the build began. With 2-4 hours of sleep, the team was up and running for most of the time. The time was well spent and we have succeeded to make an MVP!\nChallenges we ran into\nWe encountered 3 main challenges : the Bot itself is stateless, and integrating State into such a complex system makes for a very sensitive process of compile-run-debug, which often times turned frustrating. Debugging seemed somewhat difficult since the system seemed to behave differently locally and on azure, so we needed to deploy and use the bot itself to get messages. The second problem was getting the Scala web back-end to connect to SQL Server, which was incredibly difficult (had to basically write an entire Java wrapper library) due to poor compatibility between Scala and JDBC. Our last problem was not getting the Amazon Alexa to work, which we attribute to the fact that the bot turned out to be a lot more complex to build than we had thought and so we ran out of time.\nAccomplishments that we're proud of\n\nWe managed to use Azure for the First Time\nWe built a restrictive, but fully functional chat bot with a programming language and framework we had never used before in less than 24hrs.\nWe managed to make our systems, which use many systems from different companies and different philosophies interoperate smoothly.\nWe managed to make our front-end be easy to use and not cluttered, perfect for users with poor internet connection.\n\nWhat we learned\n\nHow to work in a team\nHow to deliver an end-product to the customer\nHow to use cloud services\nHow to efficiently seek tech support\n\nWhat's next for KnowUrSelf\nAdd security layers, make it fully scalable, add dynamic NLP using MS Cog Services. More statistical analysis and data visualisation. Continue using it ourselves and recommend it to our friends\nTry it!\nTry chatting on HackCambridge slack channel with bot \"@knowyourself2\" (HackCambridge Team)", 
    "project_name": "KnowUrSelf", 
    "project_tags": [
      "scala", 
      "c#", 
      "jquery", 
      "java", 
      "sql", 
      "azure", 
      "heroku", 
      "github"
    ], 
    "project_url": "https://devpost.com/software/knowurself"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Click here to be part of the Hack Cambridge Playlist!\nInspiration\nWhether at parties, conferences, or meetings, we often need to generate music that a large group of people will like. We'd prefer to be able to do this without explicitly requiring the user to specify songs (as we can do in a collaborative playlist, for instance), instead automatically fetching the user's song preferences which already exist in their Spotify account.\nWhat it does\nIt generates a link that the organizer can share with the guests and allows them to login with their Spotify credentials only and automatically saves their preferences. We don't store any personal information.\nHow we built it\nWe integrated seamless OAuth 2.0 authentication which allows organizers and guests one-click access to our app. \nWith a carefully tuned and tailored algorithm for analyzing your audiences\u00b4 musical preferences, the app automatically creates and populates playlists on your Spotify account specially curated for your event.\nBuilt using Node on a JS stack, and deployed in the cloud, our solution scales to meet the demand of any event. \nChallenges we ran into\nAuthentication is hard. Sessions are hard too. Deployment is also hard. Getting database schemas in order.\nTuning algorithm to give the most relevant matches.\nAccomplishments that we're proud of\nWe have a fully functional app at the end of 24 hours that is poses a solution to a real-life challenge.  We\u00b4ve overcome all our challenges \nWhat we learned\nRapid prototyping on a Javascript stack, user experience and responsive apps. Spotify API and information retrieval.\nWhat's next for Crowdify\nWe are excited to work with event organizers (especially hackathons) to bring personalized entertainment to your event!", 
    "project_name": "Crowdify: Music from everyone.", 
    "project_tags": [
      "node.js", 
      "mongodb", 
      "spotify", 
      "ejs", 
      "express.js", 
      "passport", 
      "oauth", 
      "love"
    ], 
    "project_url": "https://devpost.com/software/crowdify-a3hnok"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nRecently, immigration has become a subject of controversy and political turmoil. We live in a world where walls are built while people leave their homes, seeking for help. Our endeavour was to model the migration of individuals in a fictional universe, in order to showcase the dynamic way in which people immigrate, and how this impacts the population and living standards in each country. This kind of simulation would be the answer to many \"What if...?\" questions governments, scientists or economists could ask. These answers would not only allow proactive measures to be taken, but could save lives.\nWhat it does\nUsing SpatialOS, we have built a large scale simulation of migration in the magical World of Warcraft. The current model consists of 10 countries between which thousands of people migrate. The phenomenon is based on both personal and regional characteristics, each movement having a certain probability of occurring at any given time. The model is flexible and permits simulation based on customizable parameters, making it a useful tool for governments which want to be prepared for an influx of immigrants, or in case of natural disasters or even war. Or if somebody decides to build a wall.\nHow we built it\nWe built the project using C# and integrating the map and movement of people in unity, and used SpatialOS to run the simulation at large scale. Starting from a simple model of random migration, we then used probability theory and population dynamics to mathematically describe the phenomenon.\nChallenges we ran into\nLearning the structure and functionality of SpatialOS and integrating it with unity were two of the major challenges we faced. Finding a relatively simple mathematical model to realistically describe immigration was also a challenging task.\nAccomplishments that we're proud of\nWe learned how to use SpatiolOS and integrate it with unity. Even though the learning process took a lot of time and we faced a lot of challenges, we managed to fix many of the bugs and to deliver a functional product.\nWhat we learned\nThe hackathon has been an invaluable learning experience, as we started from scratch with SpatialOS and spent the first few hours of the hackathon learning its structure, functionality and particularities. We also read various research papers on immigration, population dynamics and migration modeling. Besides, we improved our knowledge of C# and learned unity.\nWhat's next for SpatialLink\nThe next important steps are building larger maps and modeling more parameters which determine the probability of migration. By introducing these features, we will increase the flexibility of the platform, making it able to simulate migration at continent and even global level. Also, a nicer interface!", 
    "project_name": "SpatialLink", 
    "project_tags": [
      "c#", 
      "unity"
    ], 
    "project_url": "https://devpost.com/software/spatiallink"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nThe idea stemmed from wanting an easy yet melodic way to collaboratively create music over the internet!\nWhat it does\nThe user is presented with a harmonic table whereby they are free to place pieces down in order to create music. These pieces create a pulse which create the music, and that goes through the table changing the pitch in varying degrees depending on its direction.\nThere are several different pieces, from the simple Start and Stop, to pieces like\n\nRicochet (redirects the pulse in a predefined direction),\nSplit (splits the pulse into 5 pulses in different directions)\nRotate (the pulse gets sent in a different direction each time the piece is hit, rotating in a clockwise fashion)\nTeleport In/Out (the pulse gets sent to any place on the board)\n\nHow we built it\n\nWe decided to build this in HTML5 and JS, as we wanted an easily accessible interface that anyone can access.\nIn order to create the sounds, we employed the use of Midi.JS\nTo draw our game interface, we used Create.JS\n\nChallenges we ran into\n\nSince music and technology rarely mix, and half our team were not musically gifted, understanding music concepts such as octaves and semitones was a big challenge. Online documentation was sparce and we spent a lot of time deciding how to lay out the grid.", 
    "project_name": "Hexhogg", 
    "project_tags": [
      "html", 
      "javascript", 
      "firebase", 
      "midi.js", 
      "create.js", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/hexhogg"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nWho hasn't ever felt stressed and wanted to listen to peaceful music? Or perhaps felt really excited and wanted to have epic music ful-surround and imagine to be driving in the middle of a Highlands-like landscape? Well, wouldn't it be cool to turn on the laptop, ask him for music and immediately have the music you want without having to ask him to?\nWhat it does\nMoodsic reads your face using a camera (eg your laptops webcam) and learns your mood. Then it uses this info to pick an appropriate music for your mood.\nHow we built it\nWe used Microsoft's Cognitive API* for the facial recognition and a .NET environment for the development (C#, XMAL, WPF). For the music selection we used Rhythm API by Gracenote Developer. Finally, the songs are directly downloaded from YouTube.\nChallenges we ran into\n\nLack of an official/universal implementation to use the webcam.\nDifficulties to get audios/videos from songs.\nUsing WPF environment, which lacks of community support compared to older environments.\n\nAccomplishments that we're proud of\n\nMost important, overcoming the challenges mentioned above.\nDeveloping with an environment which was completely new to all of us.\n\nWhat we learned\n\nExciting and useful APIs.\nNew programming environments (I'm sorry if I repeat myself too much, I'm sorry).\n\nWhat's next for Moodsic\nOrdered from easier to harder to implement:\n\nAllow the user to choose the genre, era, or artist they want to listen to if they want something more specific.\nUse a personal library of music combined with Internet-retrieved music.\nImprove the parallelism of the application for the downloads to avoid making the user wait.\nUse ML to better predict what the user wants to listen to. We've thought of a neuronal network with user's mood as input and the track's mood and genre as outputs.\nImprove the UI. (sorry not fans of front-end)", 
    "project_name": "Moodsic", 
    "project_tags": [
      "c#", 
      ".net", 
      "xaml"
    ], 
    "project_url": "https://devpost.com/software/moodsic-rx6ihq"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nRecently we experienced several events where a lot of us were surprised with the outcomes (eg. Brexit, US presidential elections). Most/all of our friends generally share our opinions on social media. There must be a way we can statistically assess this to help us form unbiased opinions.\nWhat it does\nSocial Bubbles allows a user to input a phrase, and uses their network to visualise the social bubbles in their network. The social bubbles will also make inferences about what likely opinions your friends might have, and how likely you are to see people with different views on your Facebook Feed.\nHow we built it\nSocial Bubbles takes the facebook friendships, friends posts and their connections of a user using machine learning (K-Mediods) to cluster the posts into groups. We filter the posts by the provided phrase. We then consider the Sentiment of each post using Microsoft Cognitive Services. We finally classify the users (based on their posts assignments) to different clusters using a Bayesian Classifier.\nThe result is displayed finally on a D3 Web interface with useful graph statistics such as network percentage, groups interconnectedness and top works per cluster.\nChallenges we ran into\nRetrieving the Facebook Data\nTweeking our clustering algorithm\nData mining/cleaning", 
    "project_name": "Social Bubbles", 
    "project_tags": [
      "python", 
      "nltk", 
      "scipy", 
      "d3.js", 
      "natural-language-processing", 
      "facebook-graph"
    ], 
    "project_url": "https://devpost.com/software/social-bubbles"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nI was trying to create a new way of interacting with power users by adding the ability to run terminal commands based on emotions.\nWhat it does\nConstantly monitors user facial expressions. If the user is angry or surprised, the program can run terminal command lines.\nHow I built it\nI used JavaFX in combination with Microsoft Emotions API and OpenCV to analyse facial expressions of the user, and run appropriate terminal commands.\nChallenges I ran into\nDependency problems.\nWhat I learned\nLearned more about JavaFX, OpenCV, and the Microsoft Emotions API. \nWhat's next for FaceControl\nExpand selection of emotional commands. Allow program to run in the background.", 
    "project_name": "FaceControl", 
    "project_tags": [
      "html", 
      "java", 
      "css", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/facecontrol"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Creating mosaic waves\nOur application is the ideal complement for a multitudinary event, such as a concert or a sports competition. The goal is to display a gradial wave between two colors by combining the images that appear on tons of different phones. \nHow will it work?\nFirst of all, the administrator generates a QR by setting up the parameters of the animation such as resolution, number of frames, colors and speed. This person also determines where the QR will be projected, so he will also input information on the room, and on the QR. \nThe next phase is at the time of the event. The administrator will display a QR and ask all the people in the venue to enter the website and upload a picture of the QR. Then, the server calculates the position of each phone and in what order should the images appear on the screen.", 
    "project_name": "eWave", 
    "project_tags": [
      "css", 
      "javascript", 
      "python", 
      "html", 
      "flask", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/ewave"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "A multiplayer game in which you defeat your enemies with code", 
    "project_name": "Codebot Wars", 
    "project_tags": [
      "python", 
      "javascript", 
      "react", 
      "jquery", 
      "html", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/codebot-wars"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nMissing scenes from netflix when I temporarily leave the laptop.\nWhat it does\nIt uses deep learning to recognise the person via the laptop's webcam. After that, the daemon can be configured to do anything. For demo purposes, we are using it to pause netflix / youtube videos after 10 seconds. Another use case is to lock the laptop after a certain amount of time without the user sitting in front of the laptop. This is vital in a highly secure environment to avoid unauthorised access to data.\nOther potential applications:\nWe can see this being applied in areas where full attention of the user is required for high security reasons, such as in the following two use cases:\n\nAir traffic controllers work in a job that requires them to focus every second on the screen showing the current flow of air traffic. Even a few seconds can cause fatal plane accidents. Automatic Face Recognition can monitor in the background if the controller is focused on the screen, if not it will notify the supervisor.\nBaggage screening at airports requires the user to identify objects on the screen. As soon as Automatic Face Recognition realises that the user is not focused, it will automatically stop the belt and wait for the user to return.\n\nHow we built it\nUsed a popular open-source project, Boss Sensor as inspiration to use face recognition via deep learning, training on examples of faces. The deep learning is performed by using Tensor flow and Keras. To get the video feed, we're using OpenCV. \nChallenges we ran into\n-- Using Tensor flow and Keras for deep learning. A huge number of training examples are required. Therefore, it is not as accurate yet as we'd like it to be. \n-- Getting OpenCV installed on a mac. This was a nightmare.\nAccomplishments that we're proud of\n-- Able to differentiate between different faces as opposed to just traditional face detection. This is able to recognise different faces for example the face of an authorised user vs. an unauthorised user.\nWhat we learned\nWe've learned how to use Tensor flow for deep learning. We also learned about feature recognition and image manipulation. \nWhat's next for Automatic Face Recognition\nWe would like to automate the learning process of the algorithm. Currently, we have to manually capture images and train the algorithm. Automating this process would mean a larger training dataset, resulting in higher accuracy.", 
    "project_name": "Face recognition to execute commands", 
    "project_tags": [
      "opencv", 
      "bash", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/automatic-face-recognition"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nWe wanted to find an application of bots to help learning languages, with focus on early beginner (eg. children).\nWhat it does\nThe user gets to pick a category of images and then different images are showed to him/her. The user should input the objects present in the image and compare the user's input with the results obtained from Computer Vision API.\nHow we built it\nWe built it using Node.js SDK and Microsoft Bot Framework and 2 of the Microsoft Cognitive Services.\nChallenges we ran into\nSetting up and connecting the APIs. Lack of enough example code and documentation for Microsoft Bot Framework.\nAccomplishments that we're proud of\nWe have a bot!\nWhat we learned\nWorking with a new technology stack.\nWhat's next for tech-miners\nImplementing the Speech Recognition API and publish the bot on more platforms.", 
    "project_name": "tech-miners", 
    "project_tags": [
      "node.js", 
      "telegram"
    ], 
    "project_url": "https://devpost.com/software/tech-miners"
  }, 
  {
    "hackathon_name": "Hack Cambridge Recurse", 
    "project_description": "Inspiration\nVR game where you had to do some physical exercises to achieve victory.\nWhat it does\nIn this game, you run around in a maze and if you find an enemy, you need to jump in real life to attack the foe. \nHow we built it\nWe used Google VR (Google Cardboard) together with Unity3d engine\nChallenges we ran into\nLocal networking is very tricky to implement when you can test it on your phone only which doesn't have to debug.\nAccomplishments that we're proud of\nVR is working nad we had no prior experience.\nWhat we learned\nVR and local network multiplayer implementation in Unity\nWhat's next for MazeVR\nSingle player mode, mode weapons and challenges to get powerups", 
    "project_name": "MazeVR", 
    "project_tags": [
      "unity", 
      "google-cardboard"
    ], 
    "project_url": "https://devpost.com/software/mazevr"
  }, 
  {
    "hackathon_name": "R.U. Hacking? Mini Hack!", 
    "project_description": "CrudpostBot\nPosts crud to Discord.\nLink for adding: https://discordapp.com/oauth2/authorize?client_id=273888371208617985&scope=bot&permissions=0\nCommands:\nUploading image to DM with caption - saves/setup sticker\n!liststickers - DMs stickers\n!sticker  - requests sticker", 
    "project_name": "CrudpostBot", 
    "project_tags": [
      "javascript", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/crudpostbot-ma9td2"
  }, 
  {
    "hackathon_name": "R.U. Hacking? Mini Hack!", 
    "project_description": "MiniHack\nProject for MiniHack Hackathon at the University of Reading on the 25th of January 2017.\nCreated by James McCartney (@jsmuk), Lucy Firman (@mikotohe2) and Jamie Luckett (@jimjam707)\nDependencies\n\ntweepy", 
    "project_name": "MiniHack", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/minihack"
  }, 
  {
    "hackathon_name": "R.U. Hacking? Mini Hack!", 
    "project_description": "Inspiration\nBoredom\nWhat it does\nCan do variable bindings and run functions defined in the standard library. Has string, float, and arbitrarily sized integer types.\nHow I built it\nCargo build\nChallenges I ran into\nTime\nAccomplishments that I'm proud of\nWorking language prorotype in 6 hours\nWhat I learned\nMemory safety is hard\nWhat's next for mimir\nProbably nothing", 
    "project_name": "mimir", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/mimir"
  }, 
  {
    "hackathon_name": "R.U. Hacking? Mini Hack!", 
    "project_description": "Inspiration\nI wanted an IDE that worked exactly how I wanted it to.\nWhat it does\nIt can open a file that you can edit and has syntax highlighting. It can also run files with hashbang!\nHow I built it\nI wrote it in python using tkinter to create the window and pygments to achieve syntax highlighting.\nChallenges I ran into\nOne problem was learning how to make only 1 line of text's syntax highlighting redone every time the user types new values in order to ensure that the program did not run too slow.\nAccomplishments that I'm proud of\nIt works more or less flawlessly.\nWhat I learned\nI've learnt how to create a windows in python.\nWhat's next for Micro-IDE\nImplement the ability to edit multiple files , configurable themes and implement build rules.", 
    "project_name": "Micro-IDE", 
    "project_tags": [
      "python", 
      "pygments"
    ], 
    "project_url": "https://devpost.com/software/micro-ide"
  }, 
  {
    "hackathon_name": "R.U. Hacking? Mini Hack!", 
    "project_description": "We wanted to make a game. However, it's our first experience in game development, therefore we decided to create a game with a simplistic art style, similar to limbo. We wanted to try and recreate an atmospheric and somewhat creepy experience that Limbo was able to capture. At the same time, we understood that our ambition to create such a game in just three hours, with our limited experience, was a long shot! Hence we were also inspired by games such as 'The Binding of Isaac' created in game-jams of their own in extremely short time frames. This resulted in us learning how to use 'gamemaker' as a game engine and 'GIMP' for level design. The short time frame allowed us to appreciate the task to create quality games. Whilst under such time constraints we were unable to include an initial key feature of ours which was to use sophisticated light mechanics. Unfortunately, our constraints didn't allow us enough time to learn how to use open GL shaders. However, despite this, we were still happy to create a functional prototype of our initial level. We managed to design the level and character externally and then implement the separate code we wrote in gamemaker.", 
    "project_name": "Equinox", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/equinox-bu2kv1"
  }, 
  {
    "hackathon_name": "R.U. Hacking? Mini Hack!", 
    "project_description": "Inspiration\nWhat it does\nHow we built it\nChallenges we ran into\nAccomplishments that we're proud of\nWhat we learned\nWhat's next for Bejeweled_kinda\n\nfinishing", 
    "project_name": "Bejeweled_kinda", 
    "project_tags": [
      "java", 
      "eclipse"
    ], 
    "project_url": "https://devpost.com/software/bejeweled_kinda"
  }, 
  {
    "hackathon_name": "DurHack", 
    "project_description": "Inspiration\nBoth of us fly a lot. Check-in rules vary from airline to airline, and depending on where you go, so it's nice to have one place to ask. \nWhat it does\nWe ask the user for a flight number, and then send a series of API calls to the FlightAware interface. This lets us know where the flight is going, coming from, what airline it is, etc. With the origin and destination, we class the flight as European, Domestic, or International. We then lookup what the baggage and check-in rules are for this airline, for this type of flight. We also determine how long it would take to get to the airport by the user's preferred method, using the Google Maps Directions API. \nWith this and the check-in information, we then determine when the user should leave home. The user can then ask follow-up questions about their bag allowance, and whether meals are served onboard, which will then be answered.\nAccomplishments that I'm proud of\nIt works. Miraculously.\nWhat I learned\nAlexa is really limited in terms of understanding speech. You need to template every conceivable way someone could phrase the question, there is no built-in aliasing. \nIn the Alexa skills API there is no way to retrieve the location of the user, not even the address hardcoded into the Alexa account. These details are exposed to only a small set of industry API users, such as Uber, granting an unfair competitive advantage. \nApple are dicks. When charging a mobile device through a Macbook, they reduce the charge amperage for any non-Apple device. I suppose if you're incapable of building quick charge into your own products, you can still look good by making everything else charge slowly. \nWhat's next for Elloplane\nMore follow-up questions. Pulling your flight number from email confirmation so that you can just ask about \"my flight\", without having to specify.", 
    "project_name": "Elloplane", 
    "project_tags": [
      "alexa", 
      "flightaware", 
      "amazon-web-services", 
      "google-maps"
    ], 
    "project_url": "https://devpost.com/software/elloplane"
  }, 
  {
    "hackathon_name": "DurHack", 
    "project_description": "Inspiration\nGiven recent events, we feel it is important for Durham students to find their way home safely after a night out. With the release of lots of data by Durham County Council, we thought this provided an opportunity to improve the safety of students in Durham.\nWhat it does\nAfter a heavy night out, it's important to get home safe. This means following lit streets - and, particularly in Durham - staying away from the river, and being conscious of traffic. Get Home Safe combines the familiarity and ubiquity of Google Maps with never-before-seen data points from Durham County Council to show clubbers the safest route home after a night out.\nGet Home Safe highlights the density of streetlights and traffic across County Durham to visually indicate to the user the safest path through the city.\nHow we built it\nGet Home Safe is a web app using node.js and MySQL on the backend, and revolves largely around the free Google Maps API on the frontend. Each team member took care of separate parts of the project, including developing the backend, populating the database, interpreting and visualising the data, and taking care of the front end. \nOur database contains approximately 80,000 entries - each representing the coordinates of a street light in County Durham. Upon loading the web app, the backend dynamically sends the required entries to the user, depending on their map viewport. \nChallenges we ran into\nOne of the initial challenges was converting the data into a usable format. The coordinates had to be bulk converted from 'easting and northing' format to 'longitude and latitude', which is no small task when there are 80,000 points to convert! We then had to load these into the database, which proved to be difficult due to the sheer number of entries.\nAnother idea we had was to reduce the number of data points with a clustering algorithm. However, due to time constraints, it proved unfeasible to comprehend all the complex modules and techniques that would be required.\nWe attempted to map each data point to a street - this in itself proved difficult due to the method by which Google Maps stores information about its streets and the sheer processing power this would require.\nWe used Google's API to plot lines on the roads that were lit (i.e. that had street lights on them), and this work (although incomplete) can be seen on the Lit Roads page.\nAccomplishments that we're proud of\nOur interface is user friendly, responsive and well optimised. Having a nearly finished - and, crucially, usable - product in such a short space of time is something to be proud of, and we feel that our product could be tweaked and released as a commercial app. \nThe map data is surprisingly responsive - by dynamically loading the data points that are needed and then using Google's API to convert this to a heatmap means the work done by the browser is far less than that if we were to load all 80,000 data points into the webpage.\nWhat we learned\nUsing Git is something many of us had not experienced before, but now we feel we have a certain level of ability and are able to use it in future projects.\nnode.js runs the backend of our project, and we have learnt more about making a 'static' site using Express.\nWe learnt adaptable skills in how to take third party APIs and put these together to realise a complete idea. \nWhat's next for Get Home Safe\nThe plan is to further develop the Lit Roads idea, to best show the user the safest route home. We could also further optimise the site to work on small mobile devices. \nWe could even use more data from other county councils to expand our reach, or to include other Durham data such as footfall, and combine all this to find even safer routes home.", 
    "project_name": "Get Home Safe", 
    "project_tags": [
      "node.js", 
      "google-maps", 
      "html5", 
      "css", 
      "javascript", 
      "mysql", 
      "bootstrap"
    ], 
    "project_url": "https://devpost.com/software/get-home-safe"
  }, 
  {
    "hackathon_name": "DurHack", 
    "project_description": "What it does\nThe website we have built visualizes places in Durham County where you can find access to the internet, car parks, public libraries and cemeteries.\nHow we built it\nWe obtained CSV websites from Data Mill North, converted the Easting and Northing coordinates to Latitiude and Longitude and then used Google Maps API to plot markers on the map. Quite simple actually :)\nChallenges we ran into\nThe datasets did not provide Latitudes and Longitudes and so we had to convert the Easting and Northing coordinates into Latitude and Longitude. We had to make sure that the conversion presereved the format of the dataset.", 
    "project_name": "WiLife", 
    "project_tags": [
      "google-maps", 
      "html", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/durhamvisualisations"
  }, 
  {
    "hackathon_name": "DurHack", 
    "project_description": "We aimed to create a website which could compare the ease of cycling along a given route with taking the bus, given criteria such as distance elevation change. Though not finished and polished, we have a solid foundation on which the service could be built in order for the user to make informed decisions on which mode of transport to use.", 
    "project_name": "Transport Comparison", 
    "project_tags": [
      "python", 
      "html", 
      "css", 
      "flask", 
      "openstreetmap", 
      "google-maps", 
      "github"
    ], 
    "project_url": "https://devpost.com/software/durhack2017-9wk25e"
  }, 
  {
    "hackathon_name": "DurHack", 
    "project_description": "Inspiration\nHave you ever gone into a store, or a restaurant, and realised that you didn't have cash on you? That's where our inspiration comes from. \nWhat it does\nOur native android app takes card machine data from across the web, and plots on a map whether nearby restaurants and shops in Durham take card. It also plots nearby ATM machines, so you can easily spot where your closest cashpoint is. It keeps itself up to date by collecting user feedback.\nHow we built it\nWe used python as a server, also to scrape the data that we need from the web. The frontend is built in react-native. \nChallenges we ran into\nThe biggest challenge we ran into was collecting the data. This kind of application hasn't been done before, so the data was difficult to collect. The solution was to scrape from LINK (for ATM data), as well as American Express credit card locater. This means that not every shop/restaurant is covered. This is why we came up with the idea of crowd-sourcing. As you can see from the app, the majority are covered. However, once people start using it, the idea is that the database will just keep growing and growing. \nAccomplishments that we're proud of\nProducing an app like no other. This is something that is not in the market, and highly useful on a day to day basis. \nWhat we learned\nWe spent a lot of time setting up our environments, so having stuff installed pre-hack is a must. Also, we overestimated how much data was out there. However, our workarounds to these problems have contributed to a successful hack.  \nWhat's next for Cardopedia\nWe're adding support for Apple/Android pay, as well as more debit cards. This functionality is already in place, however we are waiting for an authentication code from MasterCard.", 
    "project_name": "Cardopedia", 
    "project_tags": [
      "react-native", 
      "flask", 
      "python", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/cardopedia"
  }, 
  {
    "hackathon_name": "DurHack", 
    "project_description": "Inspiration\nDurham is wonderful place but one thing it lacks is good public transport and taxi services. Meaning that every night many students very far from home are strander, drunk, cold and incapable of looking after themselves after a night out. Yet they still make the arduous journey in the middle of the night intoxicated back to their colleges. This can be especially dangerous if you have to go through dark wooded areas of if you are by yourself. \nMany times I have had to take my friends home on a 30minute walk or just stumbled across collapsed men and women in the street who were too drunk to go home. The student union had an answer to this. A night bus, it would pick you up no matter where you are and take you home for \u00a32. Problem is that is not advertised well (ask anyone if they know what it is, they likely won't - the number is hidden on a 95 page document), notoriously difficult to get hold of and not very user friendly to use (you have to describe where you are to the driver over the phone = nightmare). Factor in the fact that your drunk and you can see why students don't use this excellent service and put themselves at risk by going home. \nThe night bus is the safe way for lone students to get around Durham safely:\nWhen studying late in the library to get home\nTo get to and from the train station late at night\nTo travel between colleges\nTo get to or from late bars and nightclubs\nYou\u2019re visiting friends\nAt the cinema or theatre\nWhat it does\nDUber is essentially an SOS get me home now app. Let me set the scene, a student on night out decided that it would be wise to down a bottle of vodka and now needs to head home. He lives in the hill college, half an hour away. He pulls out the app, hits the pick me up button. The nightbus driver is pinged his picture, location and the student is given an ETA. The driver and the student both get eachothers numbers and can contact eachother if the student or driver can't find each other. The App handles the payment and whether the student paid. We get all the data from CIS so the driver and the union know exactly who are using the service.\nHow we built it\nThe app consists of two major components. An app which the driver and student will use and a PHP REST API. The API scrapes the student data from Durham username and password and handles all the DB operations and provides the endpoints which the app relies on.\nChallenges we ran into\nOperating around the constrains of the universities systems was the only challenge we faced. Trying to get a way to authenticated on Durham's portal using students passwords and username was quite a challenge. (This was omitted from this release due to security concerns, will be work on and put back in at a future date)\nAccomplishments that we're proud of\nWe have a working app and the API is functional. Although both need refining we have proven that it is feasible and intend on carrying on development on the project and handing it over to the student union.\nWhat's next for DUber\nThere is a genuine potential here. I have called the nightbus to get many of my friends home. But hardly anyone knows about it. I have seen many people frantically try to ring cab companies or call an actual uber. Only to be disappointed. If they are really really really lucky they will run into a rep that will take them home. But if not they are stranded and if they are in the hill colleges they have a good half hour walk just to get home. We intend on developing this fully and giving it to the union for free. I think this will be especially helpful for freshers and will significantly increase the safety of students.", 
    "project_name": "DUber", 
    "project_tags": [
      "php", 
      "swift", 
      "json", 
      "mysql", 
      "objective-c"
    ], 
    "project_url": "https://devpost.com/software/duber-0et241"
  }, 
  {
    "hackathon_name": "DurHack", 
    "project_description": "Inspiration\nWe are simple men, we saw cameras, we liked.\nWhat it does\nTakes traffic camera data and where they can see, and is able to detect if you would have been seen.\nHow we built it\nWe pressed the green arrow button and gradle went to town..\nChallenges we ran into\nRyan.\nLack of John.\nOverambitious project.\nGoogle play OAuth.\nBlocking image reads.\nSettings bar being a pain.\nCold outside.\nToms laptop.\nAccomplishments that we're proud of\nManaging with only one hour of sleep.\nWhat we learned\nGet more than one of sleep.\nWhat's next for DurHide\nSafety Mode (allows you to stay safe on a potentially dangerous walk home)\nBugfixes\nOptimizations\nUpdated Graphics", 
    "project_name": "DurHide", 
    "project_tags": [
      "java", 
      "android", 
      "python", 
      "css", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/durhide"
  }, 
  {
    "hackathon_name": "DurHack", 
    "project_description": "ZOMSURV Docs\nStory\nYou went to Durhack, Zombies came, Mitchel is a meme, survive!\nWarning: In \"Beta\"", 
    "project_name": "ZomSurv", 
    "project_tags": [
      "java", 
      "matlab"
    ], 
    "project_url": "https://devpost.com/software/zomsurv"
  }, 
  {
    "hackathon_name": "DurHack", 
    "project_description": "Inspiration\nNo-one likes arriving in town only to find you can't move for the crowds around you. Our online tool allows you to easily check how busy your destination is likely to be, in the same way to checking the weather forecast, without having to leave the house.\nWhat it does\nThe tool queries historical data of footfall on selected days, months and times, in specified locations, to calculate average footfalls in certain conditions, and show the user what the footfall is likely to be. This footfall is modelled as crowding agents, displayed upon a map of the specified location, with the agents avoiding obstacles such as buildings.\nHow I built it\nWe used Coffeescript for modelling the boids, with the database in SQL, and JS and PHP scripts linking it together with google maps.\nChallenges I ran into\n\nThe google maps style API has some problems\nOur scripts and database stopped working together when we tried to host in all on a server\nJS wasn't made for image processing\n## Accomplishments that I'm proud of\nManaging to produce a map of obstacles for the boids\nModelling fantastic crowding agent behaviour\n## What I learned\nDon't leave integration to the last minute\n## What's next for Pedestrian Congestion\nGetting the database to work properly\nHosting it on an external server\nImproving agent movement", 
    "project_name": "Pedestrian Congestion", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/pedestrian-congestion"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Nashville 2017", 
    "project_description": "", 
    "project_name": "Empower Heroes", 
    "project_tags": [
      "html", 
      "javascript", 
      "photoshop"
    ], 
    "project_url": "https://devpost.com/software/empower-heroes"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Nashville 2017", 
    "project_description": "Nashville Neighbors\nWhat it does\nNashville Neighbors is an Amazon Alexa skill used to present local Nashville area community resource information to users.  Users can ask for a list of categories of local community resources.  They can also ask for a list of organizations by category as well as details of a specific organization.  \nWhat we used\nNashville Neighbors is an Amazon Alexa skill that was built using Node.js on AWS Lambda. The Serverless framework is used to automate the creation of AWS resources.  We used the data.nashville.gov API to retrieve data about community resources in Nashville. \nOur Inspiration\nWe love our city.  We want to make information about community resources in Nashville easily accessible in order to inform and equip citizens of Nashville.  For example, a user may want to know where they can make a food donation in Nashville and not know where to go or who to contact.  A social worker may want location information about resources in a certain community.  A citizen of Nashville may just need information about the public Nashville community and what's available to them.  Nashville Neighbors accomplishes all these things.", 
    "project_name": "Nashville Neighbors", 
    "project_tags": [
      "javascript", 
      "node.js", 
      "alexa", 
      "amazon-alexa"
    ], 
    "project_url": "https://devpost.com/software/nashvilleneighbors"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Nashville 2017", 
    "project_description": "Inspiration\nAs the world becomes increasingly technical, it is important for Christians to have bible and worship music digital resources to remain relevant. Scripturally Sound is inspired by worship leaders who need to support a pastor's message, reference scriptures when introducing a song, and digging deeper in the songs they sing about. It's also inspired by fulfilling the curiosity of Christians who want to know the story behind the song.\nWhat it does\nScripturally Sound provides scriptural references and topics of the songs used for worship, and the Christian songs that they may listen to on the radio or streaming services. It allows Christians to be more discerning of the music that they listen to.\nHow we built it\nWe build an API and admin backend in rails. We built a data import script in Node.js. We build the front end in ES6 Javascript, using the pug templating language.\nChallenges we ran into\n\nFiguring out how to scrape relevant information from websites\nConnecting with the Digital Bible Platform API for verse text\nRepresenting Bible Verses and range selections in the database\nComplexity of setting up a front end framework\nTranslating mockup details to prototype\n\nAccomplishments that we're proud of\n\nclean design\n\nWhat's next for Scripturally Sound\nWe plan on building the database to be robust, with thousands of songs, and more scriptures per song. We will create an API that would show the lyric to scripture relationship line by line, and create lyric inspired-bible studies for subscribers. Scripturally Sound could potentially be referenced by Christian music artist after their concerts, providing their fans with a biblical resource that allows them to grow deeper spiritually. It can scale to be a resource for Christian schools K-12, filmmakers who need songs to for movie scores, and for worship schools. Scripturally Sound is a Project Music program headed by the Entrepreneur Center.\nOur code\nhttps://github.com/mellowfish/c4tk", 
    "project_name": "Scripturally Sound", 
    "project_tags": [
      "ruby-on-rails", 
      "html", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/scripturally-sound"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Nashville 2017", 
    "project_description": "Inspiration\ntodo...\nrepos: https://bitbucket.org/medicalequipmenttracker\nWhat it does\nHow we built it\nChallenges we ran into\nAccomplishments that we're proud of\nWhat we learned\nWhat's next for TECH Medical Equipment Tracker", 
    "project_name": "TECH Medical Equipment Tracker", 
    "project_tags": [
      ".net", 
      "angular.js", 
      "amazon-dynamodb", 
      "azure"
    ], 
    "project_url": "https://devpost.com/software/tech-medical-equipment-tracker"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Nashville 2017", 
    "project_description": "Enabling the next generation to memorize the Word of God.\nCustom Alexa Skill that interacts with your voice\nUsed AWS Lambda with the Alexa Skills SDK, Apache Spark, Dynamo DB, AWS Lambda\nChallenges we ran into - many limitations of the Alexa SDK / API\nAccomplishments that we're proud of - a working product that is very close to being ready to learn\nWhat we learned - tons of information about building with Alexa, limitations of Voice UI's, etc.\nWhat's next for Alexa Scripture Memory - wrapping up some edge cases and submitting the first MVP to the Alexa skills store", 
    "project_name": "Alexa Scripture Memory", 
    "project_tags": [
      "node.js", 
      "alexa", 
      "particle", 
      "amazon-dynamodb"
    ], 
    "project_url": "https://devpost.com/software/alexa-scripture-memory"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Nashville 2017", 
    "project_description": "Inspiration\nHome Street Home\nWhat it does\nLocates, coordinates, and tracks volunteer interactions with homeless camps in and around Nashville\nHow we built it\nMVC.net with Materialize\nChallenges we ran into\nReact and jQuery conflicted and .net Core not working well with Azure SQL\nAccomplishments that we're proud of\nWe shipped a MVP\nWhat we learned\nUse easiest and fastest tool available technology\nWhat's next for Homeful\nHome Sweet Home will field test and then we will iterate on feedback", 
    "project_name": "Homeful", 
    "project_tags": [
      "c#", 
      ".net", 
      "azure", 
      "jquery", 
      "google-maps", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/homeful"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Nashville 2017", 
    "project_description": "Inspiration\nWe know one of the challenges that homeless people face is the lack of a permanent address.\nWhat it does\nWe use a raspberry Pi with a servos and biometric scanners to create an easy way to set up mailboxes that have minimal security,\nHow I built it\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for Barnabas Box", 
    "project_name": "Barnabas Box", 
    "project_tags": [
      "raspberry-pi", 
      "node.js", 
      "javascript", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/barnabas-box"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Nashville 2017", 
    "project_description": "Inspiration\nWhat it does\nHow I built it\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for AvailsMuch\nContinued development.", 
    "project_name": "AvailsMuch", 
    "project_tags": [
      "react-native"
    ], 
    "project_url": "https://devpost.com/software/availsmuch"
  }, 
  {
    "hackathon_name": "Hack the Holidays 2", 
    "project_description": "What it does\nThe app allows two users to pull a christmas cracker, and the phone with the greatest acceleration wins.\nA joke from /r/Jokes or /r/programmerhumor is also displayed to the user after pulling the cracker.\nHow we built it\nThe server is a Node.js application using Express and SocketIO. MongoDB is used for the database, providing user -and match data storage, with Mongoose providing a model layer between the code and DB.\nVue.js allowing us to operate a single page web app with real updating features, using Webpack, vue-loader and many other modules to combine all of the Vue components into a single file. The client also uses the HTML5 acceleration API to measure data from the accelerometer.\nThe server runs on AWS Lightsail, with pm2 for managing the node application, mongoDB running in the same VM, and Apache as a reverse proxy.\nChallenges we ran into\n\nGetting Vue.js to work\nLogic flow for creating matches\n\nWhat we learned\n\nVue.js 2.0 app structure\nHTML5 acceleration API\nChrome network debugging is awesome for testing on a phone", 
    "project_name": "eCracker", 
    "project_tags": [
      "node.js", 
      "mongodb", 
      "amazon-web-services", 
      "reddit", 
      "socket.io", 
      "express.js", 
      "linux", 
      "mongoose"
    ], 
    "project_url": "https://devpost.com/software/ecracker"
  }, 
  {
    "hackathon_name": "Hack the Holidays 2", 
    "project_description": "Inspiration\nWhat it does\nDevelopers can choose a location on the map, and create a dialogue box explaining their event. The event is then pin-pointed on a map with details including the exact location and any other information the developer deems necessary to include. These then update on the site for all to see.\nHow We built it\nThis was built using a number of things. We used JavaScript and jQuery to produce the scripts that take in the locations and allow the developers to upload their events. HTML and CSS was used to create the front end, with the help of bootstrap to keep it looking nice.\nChallenges We ran into\nWe found that some of the things didn't work as we had initially expected, and we had to work out our own way around them. For example some of the scripts wouldn't upload the correct data to the dialogue boxes, and so we had to find out why this was happening, and fix it.\nAccomplishments that We're proud of\nWe're proud of being able to work together well as a team to produce the product that we set out to make.\nWhat We learned\nBootstrap was a new feature to all of us in the team, and we had to learn how to work with it to make the project look nice and do what we want it to do.", 
    "project_name": "DevsConnect", 
    "project_tags": [
      "javascript", 
      "jquery", 
      "html", 
      "css", 
      "bootstrap", 
      "esri"
    ], 
    "project_url": "https://devpost.com/software/devsconnect"
  }, 
  {
    "hackathon_name": "Hack the Holidays 2", 
    "project_description": "What the Hack Am I Hearing?\n\"What the Hack Am I Hearing?\" is a small web-based game about guessing Christmas songs as quick as possible. One has 30 seconds to guess the name of each song played. The faster one guesses, the more points they get.\nDevelopment\nThis project has been made using HTML5, CSS3 and Javascript. jQuery was used for the front-end and Spotify Web API to grab the Christmas tracks. The design of the website was, of course, inspired by the Hack the Holidays 2 counterpart.\nChallenges\nThe main challenge was learning on how to use Spotify's API, especially the process of grabbing the essential data and parsing it. Another difficulty I experienced was with jQuery, where some components refused to cooperate. However, I have managed to successfully overcome these issues, making this game playable.\nNOTE: The game will not function without an access token, which is why you will not be able to play the version hosted on GitHub.", 
    "project_name": "What the Hack Am I Hearing?", 
    "project_tags": [
      "javascript", 
      "html", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/wthaih"
  }, 
  {
    "hackathon_name": "Hack the Holidays 2", 
    "project_description": "What it does\nYou enter 2 twitter names and then you get a random tweet and you have to guess who it was that tweeted it\nHow we built it\nInitially we wrote a functioning backend using ASP .NET core, however we ran into problems when trying to deploy to Azure. Hence we decided to rebuild it using Node.js and express which we deployed successfully to Heroku. Our frontend is a single page app powered by Vue.js \nChallenges we ran into\nOur attempts to deploy ASP .NET Core to a Microsoft Azure server failed which we were unable to fix.\nWe eventually figured out how to get Vue.js 2.0 to work, having had to upgrade from version 1.x.\nAccomplishments that we're proud of\nWe did sleep briefly this year, following our own advice from last year.\nOur MVP was ready more than a hour before the end of the hackathon.\nWhat we learned\nMicrosoft breaks our stuff.\nHow to access REST APIs in C#\nWhat's next for Who Tweeted It", 
    "project_name": "Who Tweeted It", 
    "project_tags": [
      "node.js", 
      "jquery", 
      "css", 
      "html5"
    ], 
    "project_url": "https://devpost.com/software/who-tweeted-it"
  }, 
  {
    "hackathon_name": "Hack the Holidays 2", 
    "project_description": "Inspiration\nIt's a week before Christmas, and like all student's we haven't done our shopping and don't know what to get everyone. Instead of trawling across Amazon like the rest of our ilk, we decided to create a program to do it for us! secret santas can be hard, what if we buy our sister the wrong present, or even worse ... our mum!!!\nWhat it does\nthe current basic version takes in tags which the user can choose 5 of for the person they are buying a present and the algorith returns 5 presents it thinks the person will enjoy.\nHow we built it\nWe created most of the logic in Python, running it all on a Django web server.\nChallenges we ran into\nAmazon web services didn't want to play nice with Django! After one of us spent most of Saturday and some of Sunday trying to make it work, we decided to give it a rest and present it locally!", 
    "project_name": "GiftNinja", 
    "project_tags": [
      "django", 
      "python", 
      "html5"
    ], 
    "project_url": "https://devpost.com/software/giftninja"
  }, 
  {
    "hackathon_name": "Hack the Holidays 2", 
    "project_description": "Alexify\nSoon to be a Spotify skill for alexa!\nJust ask her how danceable a song is and she will reply with a percentage of danceability!", 
    "project_name": "alexify", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/alexify"
  }, 
  {
    "hackathon_name": "Hack the Holidays 2", 
    "project_description": "Inspiration\nWe wanted a Christmasy version of this: https://www.youtube.com/watch?v=cM_sAxrAu7Q\nWhat it does\nPlays music by pulsing the stepper motor driving the floppy driver read-write head at the specific frequency of the note we want to play.\nHow we built it\nWe power it using a hacked apart and soldered ATX power supply four pin power cable, and we are using an Arduino to pulse the motor control pins on the data connector of the floppy drive, and we flashed the Ardiuno with the music as part of the instructions.\nChallenges we ran into\nWe wrote a system to stream audio over USB from a computer to the Arduino, but we then discovered that our USB-serial adaptor is broken, so we have no way of communicating with the Arduino without connecting a laptop to the same Arduino microcontroller that's connected to an ATX power supply, which we suspected could start a fire. (So we completely abandoned that idea).\nTherefore, we tried to make a MIDI interpreter in Python to convert MIDI audio instruction files into a list of notes and their durations, but we didn't manage to get it working in the time. Our demo involved music flashed onto the Arduino, which is not the most elegant way of communicating with it but we got the speakers working so we wanted to demonstrate that.\nAlso, the sound is really quiet, so we made some hollow boxes that slightly improve the volume. We experimented with drinks cans but we found them to be less effective and sharper to work with.\nAccomplishments that we're proud of\n\nMaking a floppy drive play music without needing to take it apart.\nWriting a very nearly functional MIDI parser\n\nWhat we learned\n\nTo test serial adaptors before we spend a while programming whilst assuming they'll work\nAbout the innate simplicity and hackability of the humble floppy drive\n\nWhat's next for Musical Floppies", 
    "project_name": "Musical Floppies", 
    "project_tags": [
      "c++", 
      "python", 
      "arduino"
    ], 
    "project_url": "https://devpost.com/software/musical-floppies"
  }, 
  {
    "hackathon_name": "Hack the Holidays 2", 
    "project_description": "Twas the night before Christmas, when all through the house\nNot a creature was stirring, not even a mouse.\nThe stockings were hung by the chimney with care,\nIn hopes that St Nicholas soon would be there.\nThe children were nestled all snug in their beds,\nWhile visions of sugar-plums danced in their heads.\nAnd mamma in her \u2018kerchief, and I in my cap,\nHad just settled our brains for a long winter\u2019s nap.\nWhen out on the lawn there arose such a clatter,\nI sprang from the bed to see what was the matter.\nAway to the window I flew like a flash,\nTore open the shutters and threw up the sash.\nThe moon on the breast of the new-fallen snow\nGave the lustre of mid-day to objects below.\nWhen, what to my wondering eyes should appear,\nBut a miniature sleigh, and eight tiny reindeer.\nWith a little old driver, so lively and quick,\nI knew in a moment it must be St Nick.\nMore rapid than eagles his coursers they came,\nAnd he whistled, and shouted, and called them by name!\n\"Now, Dasher! now, Dancer! now, Prancer and Vixen!\nOn, Comet! On, Cupid! on, Donner and Blitzen!\nTo the top of the porch! to the top of the wall!\nNow dash away! Dash away! Dash away all!\"\nAs dry leaves that before the wild hurricane fly,\nWhen they meet with an obstacle, mount to the sky.\nSo up to the house-top the coursers they flew,\nWith the sleigh full of Toys, and St Nicholas too.\nAnd then, in a twinkling, I heard on the roof\nThe prancing and pawing of each little hoof.\nAs I drew in my head, and was turning around,\nDown the chimney St Nicholas came with a bound.\nHe was dressed all in fur, from his head to his foot,\nAnd his clothes were all tarnished with ashes and soot.\nA bundle of Toys he had flung on his back,\nAnd he looked like a peddler, just opening his pack.\nHis eyes-how they twinkled! his dimples how merry!\nHis cheeks were like roses, his nose like a cherry!\nHis droll little mouth was drawn up like a bow,\nAnd the beard of his chin was as white as the snow.\nThe stump of a pipe he held tight in his teeth,\nAnd the smoke it encircled his head like a wreath.\nHe had a broad face and a little round belly,\nThat shook when he laughed, like a bowlful of jelly!\nHe was chubby and plump, a right jolly old elf,\nAnd I laughed when I saw him, in spite of myself!\nA wink of his eye and a twist of his head,\nSoon gave me to know I had nothing to dread.\nHe spoke not a word, but went straight to his work,\nAnd filled all the stockings, then turned with a jerk.\nAnd laying his finger aside of his nose,\nAnd giving a nod, up the chimney he rose!\nHe sprang to his sleigh, to his team gave a whistle,\nAnd away they all flew like the down of a thistle.\nBut I heard him exclaim, \u2018ere he drove out of sight,\n\"Happy Christmas to all, and to all a good-night!\"", 
    "project_name": "Slayyylmao ride", 
    "project_tags": [
      "spotify", 
      "unity", 
      "c#", 
      "javascript", 
      "digitalocean", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/slayyylmao-ride"
  }, 
  {
    "hackathon_name": "Hack the Holidays 2", 
    "project_description": "Inspiration\nAs it was our first hackathon, we wanted to make something simple and beautiful. The idea was to create something small and then add to it more and more if we have time. As the result, our project has a lot of small bits that are responsible for different parts of it.\nWhat it does\nIt connects to Spotify.com via it's API and plays a song. While the song is on, the app translates some song's data (frequencies, volume) to the website which does some visual effects which depend on the sent data.\nHow we built it\nOur code is 90-95% javascript. It was sort of a challenge for us as we both did not have a lot of experience in js. We picked it on purpose as hackathons are about learning, are not they ?\nChallenges we ran into\nStay awake for 35 hours\nAccomplishments that we're proud of\nWe managed to split our work so both of us had stuff to do all the time. Also, we are satisfied with the result, it is way better than we expected.\nWhat we learned\nLots of javascript ! \nWhat's next for Songs from Spotify\nWe plan at least to clean the code. Also, a login page can be made as soon as Spotify allows to play full songs from other websites. By now, a link that contains the version which was submitted on Hack the Holidays 2 is attached.", 
    "project_name": "Songs from Spotify", 
    "project_tags": [
      "three.js", 
      "spotify", 
      "javascript", 
      "jquery", 
      "html5", 
      "html", 
      "css3", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/songs-from-spotify-4jadfu"
  }, 
  {
    "hackathon_name": "Hack the Holidays 2", 
    "project_description": "Inspiration\nWe're not quite sure\nWhat it does\nIt can show you the world (If you know what you're doing)\nHow we built it\nWe're not quite sure ourselves\nChallenges we ran into\nWell, all of them pretty much.\nAccomplishments that we're proud of\nGetting this far\nWhat we learned\nDon't hold on to that hope that you will actually finish it. It'll just make it more painfl in the end.\nAlso, dont write infinite while loops in unsaved code\nWhat's next for santa scrolly quick type thingy\nThe recycling bin", 
    "project_name": "santa scrolly quick type thingy", 
    "project_tags": [
      "javascript", 
      "esri"
    ], 
    "project_url": "https://devpost.com/software/santa-scrolly-quick-type-thingy"
  }, 
  {
    "hackathon_name": "Hack the Holidays 2", 
    "project_description": "SantaScript\nFeatures:\n\n    unwrapping numbers, evaluations, strings. \n    Declaring variables. \n    Cannot unwrap variables. \nTo add a new function. \n1. Add a new elif statement in the Lexer \n2. Add a new if statement to parse it \n\nCode examples\n$var = 1\nif $var == 1 then\n    unwrap \"True\"\nendif\nunwrap \"Hello world\"", 
    "project_name": "SantaScript", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/santascript"
  }, 
  {
    "hackathon_name": "Hack the Holidays 2", 
    "project_description": "Inspiration\nWe often have great trouble telling whether or not we should be in a room, especially around christmas. Wouldn't it be so much easier if we could phone a number, and it tell us whether to stay or leave?\nWhat it does\nYou call our hotline, it will listen for sound until you press #. If it detects christmas music, it'll let you know that the room is okay to be in, if it doesn't detect any music it says so, and if it detects non-christmas music it tells you to leave.\nHow we built it\nThe Spotify API is used to get a list of christmasy songs and store them in an array. Nexmo is then used to receive incoming calls, and forwards them to our Node app. It records a section of the call and sends it to the ACRCloud music recognition API. It then compares the response with our list of christmas songs, and sends a text-to-speech response using Nexmo.\nChallenges we ran into\nNexmo has its quirks (but it ultimately pretty great). ACRCloud is horrible.\nAccomplishments that we're proud of\nIt works.\nWhat we learned\nFor some of us it was Javascript, others it was how to use specific APIs. We all learned something different.\nWhat's next for Get out\nGet out.", 
    "project_name": "Get out", 
    "project_tags": [
      "node.js", 
      "nexmo", 
      "spotify"
    ], 
    "project_url": "https://devpost.com/software/get-out"
  }, 
  {
    "hackathon_name": "Hack the Holidays 2", 
    "project_description": "Inspiration\nJoe\nWhat it does\nSays something like Joe would\nHow I built it\nWith no help from Joe\nChallenges I ran into\nPreventing Joe seeing it prematurely\nAccomplishments that I'm proud of\nJoe not seeing it prematurely\nWhat I learned\nJoe is unobservant when helping Luana with git\nWhat's next for Josh Nash Wisdom\nRefreshing the page for more wisdom from Joe", 
    "project_name": "Joe Nash Wisdom", 
    "project_tags": [
      "ruby", 
      "sinatra", 
      "html", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/josh-nash-wisdom"
  }, 
  {
    "hackathon_name": "Hack the Holidays 2", 
    "project_description": "Inspiration\nthe inspiration behind this development was to allow anyone to have access to Spotify music on the go without the need of using mobile data or having Spotify premium\nWhat it does\nthe program allows you to call a number which connects you to a call that plays a Spotify playlist full of Christmas songs\nHow we built it\nwe built the system using the python programming language and the all the API's needed to allow an audio file to be converted into a .wav file type while including SMS messages that informed the user about the song what was playing\nChallenges we ran into\nAccomplishments that we're proud of\n\nusing the Spotify APIs to gain access to the songs and import them into our system\ncalling the number and having a small starting message that informs the user about what number they have called\nplaying the songs through the phone call and having it sound somewhat of decent quality\n## What we learned\nwe have learned that using certain speech to text apis can be extremely difficult due to the lack of documentation they provided. also we found that the slightest error can cause the hotline to function incorrectly\n## What's next for Christmas Music Hotline\nSpeech-to-text support", 
    "project_name": "Christmas Music Hotline", 
    "project_tags": [
      "python", 
      "json", 
      "nexmo", 
      "amazon-web-services", 
      "spotify"
    ], 
    "project_url": "https://devpost.com/software/christmas-music-hotline"
  }, 
  {
    "hackathon_name": "Hack the Holidays 2", 
    "project_description": "asksanta", 
    "project_name": "asksanta", 
    "project_tags": [
      "html", 
      "css", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/asksanta"
  }, 
  {
    "hackathon_name": "Hack the Holidays 2", 
    "project_description": "An innovative approach to motivating a team for a hackathon.", 
    "project_name": "The Noot Alarm", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/the-noot-alarm"
  }, 
  {
    "hackathon_name": "Porticode", 
    "project_description": "Table #8\nInspiration\noctopuses communicate by changing their colours\nWhat it does\nits a game\nHow I built it\nunity, Arduino, serial ports\nChallenges I ran into\nserial ports\nAccomplishments that I'm proud of\nstaying up all night and finishing the project\nWhat I learned\nusing new hardware, serial communication, unity libraries \nWhat's next for Blush\nthat's it", 
    "project_name": "Blush", 
    "project_tags": [
      "unity", 
      "lilypad", 
      "adafruit", 
      "github"
    ], 
    "project_url": "https://devpost.com/software/blush"
  }, 
  {
    "hackathon_name": "Porticode", 
    "project_description": "By Table 10!\nInspiration\nI believe the Wikipedia Game originated from the glory that is 4chan.org. That's where I first heard of it anyway. And everything is more fun with automatic integration.\nWhat it does\nSends you to a random Wikipedia article, whereupon you have 4 clicks to make it to the page on Adolf Hitler.\nHow I built it\nUsing JavaScript and Chrome's API for extensions. Also a tiny bit of HTML and CSS to make things pretteh.\nChallenges I ran into\nThe counter for number of clicks randomly resetting or failing to; understanding JavaScript syntax.\nAccomplishments that I'm proud of\nSending messages back and forth between a background process and a main process to keep track of which links have been visited in the current game. Learning JavaScript in a few hours (applies to our entire team) and actually implementing pretty much the entire thing in the language.\nWhat I learned\nHow to use JavaScript lol\nWhat's next for The Wikipedia Game\nImplementing difficulty levels that limit number of clicks further as well as the implementation of a timer to increase tension. Beyond that, integrating multiplayer functionality in which you play in real-time with a friend (seeing which articles they end up on) would be awesome as well.", 
    "project_name": "The Wikipedia Game (Table 10)", 
    "project_tags": [
      "javascript", 
      "chrome", 
      "html", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/the-wikipedia-game"
  }, 
  {
    "hackathon_name": "Porticode", 
    "project_description": "Inspiration\nI love Game Boys! I own quite a lot of them, and I've been wanting to write a game for one for quite a while. I have this flash cartridge that lets you run whatever you want on the Game Boy.\nBecause I'm really bad at coming up with game ideas, I ended up making something 'useful' instead!\nWhat it does\nIt's a todo list that runs on a Game Boy! Because the Game Boy is such a versatile platform, this software is compatible with the original GB, the Color, and all models of the Advance.\nHow I built it\nI used the GBDK - it's a set of compilers and linkers for targeting the Game Boy (and other z80-like processors). The last release was in 2002, and even trying to compile it for Mac was a huge pain. I eventually found some binaries that somebody had uploaded to a forum in 2006 and used them.\nGBDK has a load of helper functions for doing stuff on the Game Boy. The means rendering text and using cout is pretty simple! But it doesn't have enough helper functions to handle something like displaying a menu. I had to write that myself (and it's horrible).\nChallenges I ran into\nI had all kinds of problems with missing header files. This problem was compounded by the fact that I literally have no idea when it comes to C. The biggest blocker was not being able to clear the screen. The way all the >10 year old docs said it should be done just didn't work. It still doesn't work, and I have no idea why.\nAccomplishments that I'm proud of\nI got a working rom, and it runs on real hardware! (but not in an emulator for some reason)\nWhat I learned\nC isn't all that bad, but it is mostly. I'm motivated to keep learning it and get better, then eventually I'll work on a proper game!\nWhat's next for GBTLC\nI keep reading everywhere that the only way I'm truly going to be able to get fine control over what I want to do is with assembly programming. The docs and tutorials around asm on the Game Boy are actually really good - much better than with GBDK.\nI really just need to find the time to learn now!", 
    "project_name": "GBTLC", 
    "project_tags": [
      "c"
    ], 
    "project_url": "https://devpost.com/software/gbtlc"
  }, 
  {
    "hackathon_name": "Porticode", 
    "project_description": "Table 19\nInspiration and how it works\nSome people use bikes to travel around London but sometimes you may have to spend more than you want to. The tfl bike system charges extra for not parking in the bike after 30 minutes. The purpose of the app is to provide a route to be able to park the bike every 30 mins, avoiding any extra charges. \nHow we built it and challenges\nWe started by using android studio to create an app using google maps. The next step we took was creating tracking system so that the app knows the current location of the user. We then added configurations so that the user can click to the destination they want to go to. The first major challenge we experienced was creating a JSON parser specifically for tfl\u2019s bike point API. After spending a long time we finally managed. After that we had to fiddle around with the Async settings which delayed us a bit further. We then had to build a second parser for google API so that we could accurately calculate the timings between several points. We then wrote an algorithm that would find the most effective route between a start and end point which also saves money for the user in the process. \nWhat we learned\nBiggest takeaway from this project was learning how to write a JSON parser and then using the information to provide live updates and feedback. \nFuture\nThis can help more people to consider cycling instead of using more polluting methods of transport as they would save money in the process too.", 
    "project_name": "BudgetBikes", 
    "project_tags": [
      "android-studio", 
      "java", 
      "android", 
      "google-maps"
    ], 
    "project_url": "https://devpost.com/software/budgetbikes"
  }, 
  {
    "hackathon_name": "Porticode", 
    "project_description": "We are Table 18\nInspiration\nAlexa is very formal. You cannot mess around it with and gives very straightforward answers most of the time. So we decided to build a skill for Alexa that allows her to be more informal with users. We called it Nancy because we invoke it by saying \"Alexa, tell Nancy to do something\".\nWhat it does\nNancy can recite poems, narrate 2 line horror stories, flirt with you and motivate you with inspirational quotes.\nHow we built it\nWe are using Amazon Web Services to host a lambda function which does work. Alexa looks for the particular keywords like 'scare', 'motivate', 'flirt' and 'recite'. The keyword is then sent over to our lambda function which uses it query the approriate database (for 'scare' it would query the database containing horror stories, for 'motivate' it would query the database containing motivational quotes...you get the idea). Once a result is received a lambda response is sent back to Alexa which reads out the response. We also have a website dedicated to Nancy which is built using HTML, CSS, Bootstrap and javascript. The website will be pulished \nChallenges we ran into\nScarping data from the internet was big challenge we had to over come. We had to alter our source code multiple times to scrap the appropriate data from different websties and return JSON data. Configuring Alexa was also  a big challenge due to intermittent drops in WiFi. We spent 4 hours trying to figure out why Alexa would not pick up our skill only to find out that the account was in English US and Alexa was in English UK. Furthermore, due to Amazon's policy, our skill will only be fully downloadable to everybody once it has been reviewed by them.  \nAccomplishments that we're proud of\nWe successfully programmed the Alexa to do what we wanted it to do\nWhat we learned\nWe learnt a lot of new things today like how to scrap data from websites and how to work on back end services like AWS. We learnt programming languages like Node.js and python.", 
    "project_name": "Nancy", 
    "project_tags": [
      "node.js", 
      "python", 
      "html5", 
      "css3", 
      "javascript", 
      "bootstrap"
    ], 
    "project_url": "https://devpost.com/software/nancy"
  }, 
  {
    "hackathon_name": "Porticode", 
    "project_description": "Table: 11\nInspiration\nWe all love Slack, but sometimes in big teams it is impossible to keep up with all the messages.\nWhat it does\nSumantha works with a Slack command '/catchup' or by contacting her as with other bots. Sumantha is also accessible through a Echo Skill, which makes it really convenient to use.\nHow we built it\nWe are using a AWS Lambda function that gets POSTS requests from the Bot and answers back with the most important messages. In order to calculate the relevance of the messages, we take into account several parameters:\n\nNumber of reactions\nLength of the message\nMentions to the user and/or channel\nFrequency of the messages, to know which messages triggered a discussion\n\nChallenges we ran into\nDebugging a Lambda function and formatting data so the Echo is able to read it. Also, parsing the input for the Slack bot.\nAccomplishments that we're proud of\nDeveloping a working product of an idea with a useful outcome.\nWhat we learned\nUsing the Slack API, Bot SDK, Alexa SDK and AWS Lambda functions to create a voice application. We've also learnt to value which are the important factors in a conversation and how to gather these data.\nWhat's next for Sumantha\n*Improving the algorithm to make it work with high volumes of messages.\n*Being available in the Echo Store and as a Slack app.", 
    "project_name": "Sumantha", 
    "project_tags": [
      "node.js", 
      "amazon-web-services", 
      "amazon-alexa"
    ], 
    "project_url": "https://devpost.com/software/sumantha"
  }, 
  {
    "hackathon_name": "Porticode", 
    "project_description": "Inspiration\nThe need to find something to do with our time while waiting in an airport for a plane\nWhat it does\nAirMate pairs you with other people who are waiting for the same flight in the airport. This guarantees that you can make new friends and make use of all your time in a fun and interactive way. This can also provide opportunities of adventures with strangers in other countries.\nHow we built it\nWe built it with a framework for PHP called Laravel, and we integrated the SkyScanner API\nChallenges we ran into\nSome trouble implementing the SkyScanner API and the chats for the airports\nAccomplishments that we're proud of\nWe managed to implement all the main features that we planned for this hackathon\nWhat we learned\nWe learned how to use the SkyScanner API\nWhat's next for AirMate\nIntegrate the hotel and car rental services from the SkyScanner API", 
    "project_name": "AirMate", 
    "project_tags": [
      "laravel", 
      "php", 
      "html5", 
      "bootstrap", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/airmate-0q4ov5"
  }, 
  {
    "hackathon_name": "Porticode", 
    "project_description": "ucl-secret-santa\nSecret Santa website\nTeam members: \nYi Xuan Sim\nMiruna Serian\nJohann klopp\nMantas Pastolis\nTable Number = 16", 
    "project_name": "ucl-secret-santa", 
    "project_tags": [
      "html", 
      "python", 
      "css", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/ucl-secret-santa"
  }, 
  {
    "hackathon_name": "Porticode", 
    "project_description": "We are table 14 by the way.\nOur website is supposed to be a  get-away from pressure sort of website. There are literally tons of apps helping people -particularly students be on top of their studies or work, so we thought why not create something to ease the break free process ?! It's actually our first time ever doing web dev so we opted for a template at first, but it took us AGES to tailor every single line of code !! We wanted then to use an api so that when the user chooses one sort of destination, the website connects to google places API to collect information about all nearby attractions matching that destination type. We went through some tutorials and managed to use the API but we could not parse JSON on javascript so it ended up a bit basic! Quite proud of how far we learned though!", 
    "project_name": "Snake Tech", 
    "project_tags": [
      "javascript", 
      "css", 
      "html", 
      "php"
    ], 
    "project_url": "https://devpost.com/software/snakeescape"
  }, 
  {
    "hackathon_name": "Porticode", 
    "project_description": "After you register, you can create your own playlist, by simply adding the urls of the article that you want to add. \nFuture Modifications: When a new article is add to a playlist, it should be possible to access the audio file of that article, which should be automatically made.", 
    "project_name": "Articles - Table 7", 
    "project_tags": [
      "django", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/articles-up3rg9"
  }, 
  {
    "hackathon_name": "Porticode", 
    "project_description": "We were inspired by the classic Clippy helper in Microsoft Word.\nOur app provides hints in a similar way, but for Github instead of Word. \nAs well as randomised 'at rest' animations, Octocat and Hu-bot make action-specific animations, e.g. when you save, delete and search.\nNaomi built the app using atom, html, css and javascript. Asiyla created the animations using gimp and spriter.\nNeither of us had dealt with animations before, we didn't event know what a sprite sheet was! We ran into some technical issues with uniform image sizes on the spritesheets and figuring out atom.\nWe especially like Mona's ears animation, she's so cute!\nHow to animate, yay!\nWhat's next - more animations and more actions! \n\n\n\n\n\n\nTable number 2", 
    "project_name": "Octoclippy", 
    "project_tags": [
      "photoshop", 
      "javascript", 
      "html", 
      "css", 
      "gimp"
    ], 
    "project_url": "https://devpost.com/software/octoclippy"
  }, 
  {
    "hackathon_name": "Porticode", 
    "project_description": "Inspiration\nTable: 20 \nWhat it does\nHow I built it\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for pubview", 
    "project_name": "pubview", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/pubview"
  }, 
  {
    "hackathon_name": "Porticode", 
    "project_description": "Table 13\nInspiration\nWe want to make organising meetings as easy and cost efficient as possible. We all want to meet our friends but the stresses of arranging a place to meet can make this very difficult for us. Meetings Planner lets users arrange meetings at a click of a button.\nWhat it does\nMeetings planner is a website where the user inputs the locations of the people who want to meet and the dates between which they are all available. Meetings Planner then finds the cheapest place for the users to meet, guaranteeing that one user in the group does not have to take a flight at all. \nHow we built it\nWe used the skyscanner api to access the flight times and javascript to sort the information.\nChallenges we ran into\nNo one in the team had ever used javascript or html so we had to learn the languages from scratch.\nAccomplishments that we're proud of\nThe Meetings Planner does return the cheapest destination to meet and the total travel cost for the group.\nWhat we learned\nHow to make websites and what API's are and how to use them.\nWhat's next for Meetings Planner\nIt would be good if Meetings Planner could find the cheapest location for the group to meet without one person in the group to not have to travel. Meetings Planner could also find cheap hotels in the area using a live pricing.", 
    "project_name": "Meetings Planner", 
    "project_tags": [
      "javascript", 
      "html5", 
      "css", 
      "skyscanner"
    ], 
    "project_url": "https://devpost.com/software/meetings-planner"
  }, 
  {
    "hackathon_name": "Porticode", 
    "project_description": "Table\n24\nInspiration\nWe wanted to make an app that tells you whether bananas were ripe or not, and if not ripe, would let you know how long it would to take to ripen.\nWhat it does\nIt can tell you if a picture has a banana in it.\nIt can also tell you the flavour of crisps in an image.\nHow I built it\nJS, HTML, CSS, CLARIFAI, and WEBCAMJS.\nChallenges I ran into\nApi we were using couldn't differentiate between different hues on banana skin accurately enough...\nSo we pivoted into analysis of chip flavours.", 
    "project_name": "Bananalyser", 
    "project_tags": [
      "javascript", 
      "clarifai", 
      "html", 
      "css3"
    ], 
    "project_url": "https://devpost.com/software/bananalyser"
  }, 
  {
    "hackathon_name": "Porticode", 
    "project_description": "INSPIRATION: common interest in fantasy horror video games and we wanted to recreate the protagonist experience (shoutout for addition inspiration to the broken Costa machine in the lower south junction that won't stop screaming)\nWHAT IT IS: bascially it is a robot that thinks that it is the protagonist of a horror video game. It is a scared of  darkness, loud noises and anything getting in the way of its escape. It will emit stressful noises when encountering something that scares it (which is almost everything)\nHOW: we used the gopigo robots that we built during the TechSoc Hardware sessions, added a vibration sensor (as a path sensor), a light sensor, a sound detector and a buzzer. We wrote a python code that should cause it to roam around screaming for a good part of 3 minutes\nOUR CHALLENGES: neither of had a very good understanding of scripting. We also encountered multiple hardware malfunctions (batteries died and it took us 6 hours to figure out that was the problem) and generally there was so much external knowledge and googling necessary to understand every single line we wrote\nWHAT WE ARE PROUD OF: good teamwork despite different backgrounds and skills in different domains of computer science (and one of us not even being from UCL COUGH COUGH OLIVIA COUGH COUGH IMPOSTER). We faced multiple challenges but have powered through it all.\nWHAT WE LEARNED: nothing works and the scream bot is actually an accurate representation of what coding feels like\nTHE FUTURE OF SCREAMBOT?: good things, we hope. for now, is shall be put to rest until it is needed again. do not applaud too loud. you WILL scare it.", 
    "project_name": "ScreamBot", 
    "project_tags": [
      "hardware", 
      "raspberry-pi"
    ], 
    "project_url": "https://devpost.com/software/screambot"
  }, 
  {
    "hackathon_name": "Porticode", 
    "project_description": "Inspiration\nAfter spending the whole day searching for how to implement a database using Java, I got severe depression because I didn't understand Java and database. Suddenly, I realised that I needed an anti-depressant which could save me from certain boredom. The idea of creating a dynamic web app which uses the Reddit API and Python to show gifs of funny animals crossed my mind!\nWhat it does\nIt chooses and displays pictures of cute cute animals.\nHow I built it\nPython and boredom.\nChallenges I ran into\nSometimes images could not be displayed due to format incompatibility.\nAccomplishments that I'm proud of\nI am not depressed anymore.\nWhat I learned\nCats are scared of cucumbers.\nWhat's next for Funny Animal\nInclude wider variety of pictures.", 
    "project_name": "Funny Animal", 
    "project_tags": [
      "python", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/funny-animal"
  }, 
  {
    "hackathon_name": "Porticode", 
    "project_description": "", 
    "project_name": "quantum-leap", 
    "project_tags": [
      "html", 
      "css", 
      "bootstrap", 
      "javascript", 
      "unity", 
      "c#"
    ], 
    "project_url": "https://devpost.com/software/quantum-leap"
  }, 
  {
    "hackathon_name": "Porticode", 
    "project_description": "Table\n1 (I think)\nInspiration\nBeing broke\nWhat it does\nWatch your friends beg for money, and help them. Relieves peer pressure.\nHow we built it\nHTML5/CSS/JS/jQuery\nChallenges we ran into\nIt was hard to make it do the thing. Everything is hard.\nAccomplishments that we're proud of\nLooks pretty good, does the thing.\nWhat we learned\nEverything! APIs, Javascript, CSS - all the things we used.\nWhat's next for Banking with Friends\nA good nap.", 
    "project_name": "Banking with Friends", 
    "project_tags": [
      "html5"
    ], 
    "project_url": "https://devpost.com/software/banking-with-friends"
  }, 
  {
    "hackathon_name": "Porticode", 
    "project_description": "Table21\n^ ^ ^ \nInspiration\nMost of us have stickers on their laptop. And who does not think they have the coolest. Well, know you can find out if you are right with the use of our app.\nWhat it does\nUsing OpenCV to calculate a 'hacker score' based on the stickers you have on your laptop cover.\nHow we built it\nThe project was build with Android Studio and OpenCV.\nChallenges we ran into\nOpenCV was a pain to get to work.\nAccomplishments that we're proud of\nWe are proud to have a project version running before the submission deadline. \nWhat we learned\nIt was a fun project to learn about OpenCV and App development. \nWhat's next for Swagathon\nSpread the word and get people using the first version of the app.\nRecognise different stickers and count the numbers of Hackathons attended.", 
    "project_name": "Swagathon", 
    "project_tags": [
      "android-studio", 
      "opencv"
    ], 
    "project_url": "https://devpost.com/software/swagathon-uif10m"
  }, 
  {
    "hackathon_name": "Porticode", 
    "project_description": "At the moment, companies around the world are looking for new ways of securing accounts and payments . Passwords become more and more ineffective and everyone is looking for a solution to use instead of the classic PINs and passwords.\nBiometric verification is the future and that's why we wanted to do something with face recognition.\nOur plan was to log into an account from a page made by us using face recognition. However we did not achieve that. We ran into some problems :\n\ncouldn't install openCV into our computers ( probably because we have windows) -  this step took us most of our time\nfound out that it is quite difficult to link a button from a html page to a matlab project ( when clicking the button, the matlab project will open)\nthe matlab project takes time to run\n-the face recognition thing needs some ort of level of light in order to work ( it will not work if there is poor light or too much light !)\n\nWe tried to implement biometric verification into simple html pages, but it was kind of difficult or maybe impossible.\nHowever, we are proud of the fact that we made some code that works ! And it recognises your face! Also,it prints our 1 or 0 into a text file if it found a face or not( 1 if it found , or 0 if it didn't). \n What we have learnt :\n\nto never use matlab to a hackathon\nhow face recognition works\n\nWe are table number 13", 
    "project_name": "!Faced", 
    "project_tags": [
      "matlab"
    ], 
    "project_url": "https://devpost.com/software/faced"
  }, 
  {
    "hackathon_name": "Porticode", 
    "project_description": "Table 17\nInspiration\nI always wanted to be a king. Not necessarily in order to wear a crown and have a nice throne, but to be able to say orders and they would be done. Now, this vision comes true. Just text your Concierge (butler, assistant etc) what you need to have done and, within limits, this will be done.\nWhat it does\nThe base idea was to connect people who need simple services like cleaning, car repair, plumber services etc. with sole traders in order to help the people get their stuff done and on the other hand to give competitive advantage for suppliers who have a hard time competing with huge firms already dominating the market. The idea evolved to incorporating all different services like cab calling, flight booking, and ordering food.\nThe app is only and as much as a chat. You text the virtual Concierge who then analyses it, agrees details of the order with you, and the service in its way. The whole magic happens in the background where the server is looking for contractors for your order and makes all necessary arrangements.\nHow I built it\nPower of Kotlin, NLP, Java, MySQL, and love to tech!\nChallenges I ran into\nBackend + Lack of time :))\nAccomplishments that I'm proud of\nHeld through and did not give up. \nWhat I learned\nKotlin, more Android Development. Teamwork pays off more than sole freelancing\nWhat's next for Mobile Concierge - You are the King!\nFull integration with Uber, Skyscanner, Deliveroo.\nAndroid Pay or some other mobile payment system\nAdd any other service that comes to mind!!!", 
    "project_name": "Mobile Concierge - You are the King!", 
    "project_tags": [
      "android", 
      "natural-language-processing", 
      "php", 
      "mysql"
    ], 
    "project_url": "https://devpost.com/software/mobile-concierge-you-are-the-king"
  }, 
  {
    "hackathon_name": "#OpenDataHack @ECMWF - Beyond weather: explore creative uses of open data", 
    "project_description": "HidroNext: A web application for assisting hydroelectric sector in acquiring and using climate information in decision making processes.\nTeam name & members\nHidroNext Team:\n\nOlga Mar\u00eda Serrano Ramos\nJorge Paz Jimenez\n\nDescription\nHydroelectricity is the most important renewable source in Europe (and worldwide) but, currently climate services for this activity are focusing on wind, solar, etc.   (at least in the R&D programs as Copernicus, H2020,etc.). This sector is currently using climate records for decision making processes as planning of maintenance, evaluation of investment operations, design of the plants (power, etc.), planning of the sector, etc. They are not using seasonal forecasts and long term climate change projections (valuable for this long live assets). The main reason for that it this sector requires river flow as the most important Essential climate Variable, and this variable should be generated with hydrological models, that requires a lot of information (land uses, digital elevation model, etc.) However, two projects are providing this information (in demo mode). SWICCA (Service for Water Indicators in Climate Change Adaptation) offers readily available climate-impact data to speed up the workflow in climate-change adaptation of water management across Europe. ECMWF Web Coverage Service (WCS) is delivering 30 day projections. HydroNext will run in a free web portal. It will allow users to enter the location of the plant they wish to study and some basic parameters (power, reservoir capacity, etc.). Combining this information with river flow data adquired online  from SWICCA and WCS it will generate the next information: \n\n  River flow  series for the entire 21st century considering the ouputs of different models and RCPs from SWICCA\n  Energy generation for the entire 21st century computed \n  Energy generation evolution in four periods\n  River flow evolution for the next 30 days \n  Energy generation for the next 30 days\nCurrently, an demand of studies about climate information is emerging but in other parts of the globe (SouthAmerica, etc.) These studies are funded by public institutions, and don\u00b4t offer an interactive layer. \n\nHydroNext will boost the demand of climate information in Europa, focusing on private sector and actors that don\u00b4t make use of climate change projections and seasonal forecast. \nThe business model will be FREEMIUM. A free web portal will allow to generate the consultations indicated previously. Premium services will include computation of hydro cascade systems , study of the sediments, etc. \nThe portal is running. It has been developed using Dwango. Visualizations make use of C3.js. All data from SWICCA and WCS are adquired trhougth web services. Algorithms for computing energy generation and other indicators are python functions.\nEverything is in https://github.com/OpenDataHack/HydroNEXT\nLessons learnt\nWhat have you accomplished during the OpenDataHack? \n\n  Development of a running web application can be achieved in a weekend!!!!\n  Access to SWICCA and WCS is complicated to integrate into applications, but can be automated, and in a reasonable time this data will be available through the Copernicus Climate Data Store (SWICCA) and will include additional information (WCS).\nWhat would you do differently if you had to start all over again?\n  User experience could be improved. Templates, forms, etc. should came ready to the next Hackathom\n\nFuture developments\n\n  As soon as the data from SWICCA is available through the Copernicus Climate Data Store (SWICCA) our application has to point there.\n  WCS under development.\n  Presentations could be improved as well: maps, new graphs, \n  Downloadable data can be provided to users (txt files, etc.)", 
    "project_name": "HydroNEXT", 
    "project_tags": [
      "python", 
      "html", 
      "javascript", 
      "css", 
      "django"
    ], 
    "project_url": "https://devpost.com/software/hydronext"
  }, 
  {
    "hackathon_name": "#OpenDataHack @ECMWF - Beyond weather: explore creative uses of open data", 
    "project_description": "Accident and break-down prediction for Reading Buses\nInspiration\nWe were impressed with the approach of Reading Buses to make their data open and available. \nWe wanted to use their data to show that open data creates win-win situations between the public sector, \nthe private sector, and civil society. It was our ambition to create a real, value-adding product for \nReading Buses using ECMWF data. \nWhat it does\nOur model predicts probability of accidents for buses on bus lines in response to weather conditions.\nKey data sets we combined included line routes and Claims data from Reading buses alongside Weather \ndata from the MARS archive in particular data sets relating to Total Column Ozone, Precipitation, \nSonw fall and Evaporation.\nHow we built it\nWe used data on bus collisions from 2001 to 2016 and ECMWF data from MARS extracted via the python API. \nWe started off with exploratory data analysis in R and plotly (included as html).\nModels were built in R using generalised linear models with lasso and ridge regression, \ncross-validation for hold-out test and validation datasets, and plots.\nWe identified the key words of our challege to be \u201cpredicting breakdowns\u201d. Following this on a qualitative \nlevel we brainstormed a series of questions using the S.Mm.A.R.T (specific, Measures, Motivation, Actions, Routes) \nacrynom. Questions we asked included where were major claims occuring? What are the quantities and measures of the Claims? \nEtc. We then identified data sets that we could combine to help us answer these questions and form hypotheses.\nChallenges we ran into\nCleaning the bus data was challenging, and it would have been nice to get the MARS data directly into R.\nHowever, the python API did a great job in the end! Perhaps we should come back to the dataset and write an\nR package implementation of the Web API library?\nAccomplishments that we're proud of\nBuilt a model with an out-of-sample AUC of 0.76! AUC is a measure of predictive accuracy, \nwith 0.5 being random and 1 being a perfect prediction. 0.76 indicates a pretty decent result for a real-world, \nlarge-scale dataset like this. Quite a bit better than we had initially anticipated! \nTeam name & members\nPredicting Accidents for Reading Buses\n\nFiona Grimson - Fiona.grimson@gmail.com\nRajesh Sydlon - rajesh.sydlon@gmail.com\nLaura Castrillo - Castrillo@gmail.com\nMo - mtarky@outlook.com\nGordon Rates - wegiangb@hotmail.co.uk\nLaurens Geffert - laurensgeffert@gmail.com\n\nLessons learnt\n\"How to extract MARS data via the python API, and how to deal with NetCDF format data in R.\nIf we could start all over again we would force John to stay with us the weekend ;)\nMore of his domain expertise on the could have benefited a lot!\" -Laurens\n\"I learnt a lot about how to use data to back up hypotheses. Coming from a strategic background, working alongside data scientists gave me my first taste of hands-on cleaning of data and using data i nreal time to inform (or invalidate) hypotheses.\" - Rajesh\n\"Weather dataset can be very varied and correlate to even bus crashes.\"  - Gordon\n\"There is so much potential for interdisciplinary collaborations. Everybody had a different background and skills which were all important in getting the analysis done!\" - Fiona\nFuture developments\nWe are pretty confident that Reading Buses will be interested in using our model. \nWe are handing over code and model, and hope that there will be opportunities to build on this work in the future! \nOther data can be included to improve the model, such as bus operations, special events in Reading, and time of the day. We are interested in learning more about developing this work in the Reading buses innovator programme, testing our work in small scale pilots within Reading buses and working with the Finance, Engineering and Marketing teams to build economic models around our products. We also brainstormed a number of ideas around both the customer experience and acquisition of more customers.\nAdditional Data sets...\n\nMore weather data, perhaps of high spatial resolution\nIncluding events like Reading Festival in the model\nMore bus operations data and passenger surveys\n\nExpand predictive analytics within Reading Buses...\n\nScheduling engineers \nOptimising customer experience ( information about delays )\n\nWrite an R package for accessing ECMWF data? (rOpenSci)", 
    "project_name": "Accident and break-down prediction for Reading Buses", 
    "project_tags": [
      "r", 
      "javascript", 
      "google-maps", 
      "google"
    ], 
    "project_url": "https://devpost.com/software/accident-and-break-down-prediction-for-reading-buses"
  }, 
  {
    "hackathon_name": "#OpenDataHack @ECMWF - Beyond weather: explore creative uses of open data", 
    "project_description": "Project - Water Disease Protection system\nMany African countries suffer from poor water supply and drainage, which in turn leads to flash floods and droughts. Both flash floods and droughts in affected areas are very likely to cause disease outbreaks, added to the original problem of lack or surplus of water. Therefore, by using rainfall predictions it is possible to predict the likelihood of disease, droughts, water shortage problems and floods. Predicting the possibility of these hazards then allows emergency response teams to make informed decisions on where to best deploy emergency resources. \nThe protection system uses the following data elements:\n\u00b7         Spatial Population coverage/villages\n\u00b7         Medical centres\n\u00b7         Cholera cases (per region)\n\u00b7         Rainfall prediction\n\u00b7         Drought index (SPI)\n\u00b7         Poverty\n\u00b7         Livestock\n\u00b7         Accessibility to water\nTech\nLanguages:\nJava script / d3js, leaflet;\nPython;\nFortran;\nMARS scripting;\nSystems:\nArcGIS/ArcMAP;\nQGIS;\nData\nDistrict/villages boundary and population;\nMedical centres;\nCholera cases (per region);\nERAInterim Total Precipitation;\nStandardised Precipitation Index (using ERAInterim precipitation);\nPoverty;\nLivestock density;\nRiver/Water bodies/Water Points;\nAccessibility to water;\nSources\nECMWF (http://apps.ecmwf.int/datasets/);\nWorld Resources Institute (http://www.wri.org/resources/data_sets);\nFAO (http://www.fao.org/home/en/);\nHDX (https://data.humdata.org);\nCWT;", 
    "project_name": "Water Disease Prevention System", 
    "project_tags": [
      "javascript", 
      "d3.js", 
      "python", 
      "leaflet.js"
    ], 
    "project_url": "https://devpost.com/software/water-disease-prevention-system"
  }, 
  {
    "hackathon_name": "#OpenDataHack @ECMWF - Beyond weather: explore creative uses of open data", 
    "project_description": "", 
    "project_name": "African Animals Migration", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/african-animals-migration-ikupcd"
  }, 
  {
    "hackathon_name": "#OpenDataHack @ECMWF - Beyond weather: explore creative uses of open data", 
    "project_description": "Inspiration\nWhat it does\nengg project\nHow I built it\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for smart systems", 
    "project_name": "smart systems", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/smart-systems"
  }, 
  {
    "hackathon_name": "#OpenDataHack @ECMWF - Beyond weather: explore creative uses of open data", 
    "project_description": "", 
    "project_name": "African Animals Migration", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/african-animals-migration"
  }, 
  {
    "hackathon_name": "#OpenDataHack @ECMWF - Beyond weather: explore creative uses of open data", 
    "project_description": "https://paper.dropbox.com/doc/Project-Submission-8K9mqbPtBEdTXwM4M43f6", 
    "project_name": "Bus Viewer", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/bus-viewer"
  }, 
  {
    "hackathon_name": "#OpenDataHack @ECMWF - Beyond weather: explore creative uses of open data", 
    "project_description": "Inspiration\nWhen you're searching for a cruise, you buy based on dates and price. But when you get off the boat, what you remember is either fun in the sun or non-stop queasiness. \nWhy do we not think about the weather? Well, now you can.\nWhat it does\nSearch major cruise lines for dates and pricing, and correlate that with reliable weather data. \nHow we built it\nPour over massive amounts of data and write scripts to organise all of it.\nWhat's next for Totes maBoates\nEngaging ui", 
    "project_name": "Totes maBoates", 
    "project_tags": [
      "ruby-on-rails", 
      "postgresql"
    ], 
    "project_url": "https://devpost.com/software/totes-maboates"
  }, 
  {
    "hackathon_name": "#OpenDataHack @ECMWF - Beyond weather: explore creative uses of open data", 
    "project_description": "Inspiration\nThe aim of our project is to raise awareness of the overuse of resources\nand high emissions across the world, which are driving climate change and\ndestroying habitats world-over. In order to motivate this, we have developed\na Shiny App which enables the user to input details of their journeys, including\nmode of transport, starting location, end destination, and then compare their\nconsequent carbon footprint with the national average of their home country. By\ngiving the app the element of comparison, it becomes less of a negative thing\nand gains an aspect of improvement and competition.\nWhat it does/how we built it\nThe app has been designed in Shiny App (because none of us have any expertise\nin app or website development), using R, using emissions data from the World\nBank for the per capita country averages. We also used World Bank data on\nautomobile emissions for various brands, models and fuel types and similarly\nfor buses, trains and aeroplanes. By inputting the start location and end\ndestination of their journeys, the app calculates the journey distance for the\nchosen mode of transport and thereby finds the resulting CO2 emissions.\nFinally, the app compares the total journey emissions against the national\naverage, where it can be decided whether the user has beaten their nation or\nnot.\nChallenges we ran into\nLack of expertise in app or web development. Different coding language expertise.\nAccomplishments that we're proud of\nThe variety of parameters choosable in the app. For example, when travelling by car,\nthe user is able to specify brand, model type, year, fuel type... and more!\nWhat we learned\nHow to use Shiny App and calculate carbon emissions for almost any journey, via\nvarious modes of transport.\nWhat's next for Can you beat the average?\nIdeally, we would also like to include calculations of the CO2 emissions\nresulting from household gas and electricity usage and factors concerning waste\nand food miles, in order to get a complete picture. It would also have been good\nto make an actual app or game, for nicer user interfacing.", 
    "project_name": "Can you beat the average?", 
    "project_tags": [
      "r"
    ], 
    "project_url": "https://devpost.com/software/can-you-beat-the-average"
  }, 
  {
    "hackathon_name": "#OpenDataHack @ECMWF - Beyond weather: explore creative uses of open data", 
    "project_description": "Inspiration\nNone\nWhat it does\nCan move around a procedurally generated scene, tracking metrics associated with a 3D zone.\nHow I built it\nOnline IDE at playcanvas.com\nChallenges I ran into\nUnable to shrink weatherdata that a browser can handle\nAccomplishments that I'm proud of\nNone\nWhat I learned\nFirst time using it\nWhat's next for Weatherbirds\nMore gamification and integration of data", 
    "project_name": "Weatherbirds", 
    "project_tags": [
      "playcanvas", 
      "webgl", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/weatherbirds"
  }, 
  {
    "hackathon_name": "#OpenDataHack @ECMWF - Beyond weather: explore creative uses of open data", 
    "project_description": "OpenDataHack-StoryTeller\nA Story Teller that generates a random story based on weather data from ECMWF.", 
    "project_name": "WeatherTales", 
    "project_tags": [
      "python", 
      "r", 
      "shell"
    ], 
    "project_url": "https://devpost.com/software/weathertales"
  }, 
  {
    "hackathon_name": "#OpenDataHack @ECMWF - Beyond weather: explore creative uses of open data", 
    "project_description": "Inspiration\nMany young people are not too fussed in terms of where they want to go on holiday as much as they are concerned about having good weather. For this reason, this app will take your weather preferences as filters first, and then find suitable cities for you to visit.\nWhat it does\n\nHolideal will be in charge of suggesting you the best holiday given specific parameters\nThe flask Web-Server serves requests coming from the Web-app, ios app, and android app in an easier to digest format than ECMWF.\nThe web interface will allow you to use Holideal in a tinder-like fashion, by specifying weather parameteres such as surface temperature, cloud coverage, sea temperature, and other parameters. Once these are set, the user is presented a restricted dataset that fits his filters. Then you get the chance reject or accept locations. Rejected ones will not be shown to the user again, while accepted ones will be able to be viewed later on a separate page to review his/her choices. \nThe mobile interfaces (ios and android) will also serve the same functionality, allowing the user to swipe choices left (reject) and right (accept).\n\nHow we built it\nWe used Flask for the Web-app interface, as well as an api\nReact Native used for both iOS, and Android\nChallenges we ran into\nWe found the dataset fairly difficult to get used to. For this reason, we decided to serve requests as part of our Flask server\nThe fact that we were developing for 3 platforms was also fairly difficult and in retrospect, quite ambitious\nInteracting Flask with javascript is not the most pleasant experience.\nAccomplishments that we're proud of\nTime constrained completion of tasks that we've never touched before (API, ECMWF, etc)\nA functioning app that runs cleanly and smoothly (none of us are web developers)\nWhat we learned\nHow to interact flask with javascript, bootstrap, etc in order to make web apps\nDistributing data across different devices from a central server\nAccessing and reading NETCDF4 files as well as its fairly complex api\nWhat's next for HoliDeal\nImplement our functionality for more cities in europe\nImplement flight and hotel price checkers, and perhaps a further filter on this when users want to swipe\nTeam name & members\n\nSimion\nNikhil\nDace\nAldis", 
    "project_name": "HoliDeal", 
    "project_tags": [
      "python", 
      "flask", 
      "react", 
      "bootstrap", 
      "html", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/holideal"
  }, 
  {
    "hackathon_name": "#OpenDataHack @ECMWF - Beyond weather: explore creative uses of open data", 
    "project_description": "Inspiration\nWhat it does\nHow we built it\nChallenges we ran into\nAccomplishments that we're proud of\nWhat we learned\nWhat's next for Reading bus service quality", 
    "project_name": "Reading bus service quality", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/reading-bus-service-quality"
  }, 
  {
    "hackathon_name": "Hackers at Cambridge Game Gig", 
    "project_description": "Inspiration\nWorms are amazing\nWhat it does\nLets you play as a worm, in a large galaxy\nHow I built it\nUsing Unity\nChallenges I ran into\nRan out of time\nAccomplishments that I'm proud of\nStarting somewhere\nWhat I learned\nEveryting\nWhat's next for worm-galaxy Table 8\nworm-galaxy 2", 
    "project_name": "worm-galaxy Table 8", 
    "project_tags": [
      "unity"
    ], 
    "project_url": "https://devpost.com/software/worm-galaxy"
  }, 
  {
    "hackathon_name": "Hackers at Cambridge Game Gig", 
    "project_description": "we're at table five lol", 
    "project_name": "emoji wizard 5", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/emoji-wizard"
  }, 
  {
    "hackathon_name": "Hackers at Cambridge Game Gig", 
    "project_description": "Inspiration\nWe wanted to make a Guitarhero-style game, where tasks and events rush at you at the same time and you have to judge what to prioritise. Unlike Guitarhero, you can't hit every note (or event). Like the game Reigns, you make decisions between rounds and these affect how far you get in the game, whether you'll graduate, how far you make it up the boaty ladder and more.\nHow I built it\nUsed pixi for javascript as the game framework. All of the code, graphics and music was made entirely by our team of four.", 
    "project_name": "CamSim - Table 7", 
    "project_tags": [
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/camsim"
  }, 
  {
    "hackathon_name": "Hackers at Cambridge Game Gig", 
    "project_description": "Inspiration\nDavid had made a tower defense game before and we thought it would be cool to make one with a twist.\nWhat it does\nDon't get eaten by rabbits.\nRaise your offspring on the corpses of your dead enemies!\nDominate the world with cabbages!\nHow we built it\nUsing Gamemaker.\nAssets were created on a digital drawing software.\nChallenges we ran into\nDescribing the behaviour of the sprites. We had to do trial and error and multiple rounds of troubleshooting before making something that worked. \nAccomplishments that we're proud of\nThe rabbits move!! Fluffy rabbits.\nWhat we learned\nMaking games is hard work!\nWhat's next for Cabbage\nWe might extend it so that the story can reach its conclusion. Also adding more tower defense mechanics to extend the playing time!", 
    "project_name": "Cabbage @ Table 5", 
    "project_tags": [
      "gamemaker"
    ], 
    "project_url": "https://devpost.com/software/cabbage"
  }, 
  {
    "hackathon_name": "Hackers at Cambridge Game Gig", 
    "project_description": "Inspiration\nShooting game FPS \nWhat it does\nShoot the aliens \nHow I built it\nUsing Java and the Game Engine created by our group: EngineX\nChallenges I ran into\nAs our engine is built from scratch, a lot of problems arose. One of them is that we don't have enough time to implement everything, especially sound\nAccomplishments that I'm proud of\nA Game Engine from scratch.\nWhat I learned\nWhat's next for Tanks vs. Aliens - Table by the Locker\nMore rounds. Rather than the Survival mode!", 
    "project_name": "Tanks vs. Aliens - Table by the Locker", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/tanks-vs-aliens"
  }, 
  {
    "hackathon_name": "Hackers at Cambridge Game Gig", 
    "project_description": "Inspiration\nCollect as many coins as possible\nWhat it does\nCollect points before the clock runs out. Yellow coins give you points, purple coins add to your time, enemies reduce your score. You also earn points each second (for staying alive).\nHow I built it\nI build it using Unity3d\nChallenges I ran into\nLearning to code in C sharp.\nAccomplishments that I'm proud of\nBuilding the game\nWhat I learned\nThinking about the user experience, not just if the game works\nWhat's next for CoinCollect\nI am thinking of developing a next level for the game", 
    "project_name": "CoinCollect_by_the lockers_and_door", 
    "project_tags": [
      "unity"
    ], 
    "project_url": "https://devpost.com/software/coincollect"
  }, 
  {
    "hackathon_name": "Hackers at Cambridge Game Gig", 
    "project_description": "Inspiration\nThrust from the 1980s\nWhat it does\nFly a rocket ship to save an ogre from an evil turret infested planet\nHow we built it\nUsing unity, blood, sweat and tears\nChallenges we ran into\nIt genuinely made us feel sick at one point\nAccomplishments that we're proud of\nOur turret follows the player\nWhat we learned\nHow to use Unity\nWhat's next for Thrust^2\nMore levels, more fun and hats for your spaceships\nWe got the sound from www.freesound.org", 
    "project_name": "Thrust^2 - Table 1", 
    "project_tags": [
      "unity", 
      "c#", 
      "gimp", 
      "mspaint"
    ], 
    "project_url": "https://devpost.com/software/thrust-2"
  }, 
  {
    "hackathon_name": "Hackers at Cambridge Game Gig", 
    "project_description": "What it does\nIt does its best\nSoftware used\nUnity, Monodevelop, Krita, Audacity, Windows Calculator\nWhere I sat\nLast table to the right looking from the entrance (next to the lockers)\nPlay the game yourself!\nVisit the Github link to download the latest build and its build_data", 
    "project_name": "Balls and Running", 
    "project_tags": [
      "unity"
    ], 
    "project_url": "https://devpost.com/software/balls-and-running"
  }, 
  {
    "hackathon_name": "Hackers at Cambridge Game Gig", 
    "project_description": "Inspiration\nLearning unity via a project, to potentially use it for a larger game.\nWhat it does\nSimulates the travesties of a redcuboid attack in the odly shaded grasslands.\nHow I built it\nUsing unity.\nChallenges I ran into\nNot knowing unity.\nAccomplishments that I'm proud of\nLearning unity.\nWhat I learned\nSome familiarity with unity and C#.\nWhat's next for OdlyShadedGrassLandsRedCubiodAttack\nOrangeCuboids??", 
    "project_name": "OdlyShadedGrassLandsRedCuboidAttack on Table2", 
    "project_tags": [
      "unity"
    ], 
    "project_url": "https://devpost.com/software/odlyshadedgrasslandsredcubiodattack"
  }, 
  {
    "hackathon_name": "Hackers at Cambridge Game Gig", 
    "project_description": "Inspiration\nThe daily cycle into town\nWhat it does\nCan you cycle down Huntingdon Road without getting caught by zombies?\nHow I built it\nUnity, C#\nChallenges I ran into\nRunning out of time to create more complex game\nAccomplishments that I'm proud of\nBringing zombies into Cambridge\nWhat I learned\nCycling is difficult\nWhat's next for Hunted On Road - Table 3\nNext goal: make it to your supervision untouched by the undead", 
    "project_name": "Hunted On Road - Table 3", 
    "project_tags": [
      "c#", 
      "unity"
    ], 
    "project_url": "https://devpost.com/software/hunted-on-road-table-3"
  }, 
  {
    "hackathon_name": "Hackers at Cambridge Game Gig", 
    "project_description": "Inspiration\nWhat it does\nCubes move around, changing the colours of the floor tiles\nHow I built it\nUnity\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for Red & Blue", 
    "project_name": "Red & Blue (Table 2)", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/red-blue"
  }, 
  {
    "hackathon_name": "Hackers at Cambridge Game Gig", 
    "project_description": "Inspiration\nThe darkness of the Universe. \nWhat it does\nThe players have the full power to move two spaceships, in Churchill (the good guys) and Trinity (the bad guys) colours, around in the dark universe filled with white aliens shaking of anger. There is also an opportunity to shot red lasers and try to avoid a vigorously moving black hole.\nHow we built it\nThe team quickly maximized its efficiency by distributing areas of responsibility: gameplay, graphical design and sorting out github issues.\nChallenges we ran into\nGithub.\nAccomplishments that we're proud of\nTeamwork and that we (Anirudh) managed to get the lasers to work.\nWhat we learned\nHow github is meant to be used.\nWhat's next for Laser-Wars\nSimulation of gravitational pull from the black hole.", 
    "project_name": "Laser-Wars, table 4", 
    "project_tags": [
      "unity", 
      "javascript", 
      "c#", 
      "git"
    ], 
    "project_url": "https://devpost.com/software/laser-wars"
  }, 
  {
    "hackathon_name": "Hackers at Cambridge Game Gig", 
    "project_description": "great project woooohooo", 
    "project_name": "Fighting in Hawaii - table 4", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/fighting-physics"
  }, 
  {
    "hackathon_name": "Hackers at Cambridge Game Gig", 
    "project_description": "We made this game!", 
    "project_name": "Space Space Shoot Revolution - Table 7", 
    "project_tags": [
      "c++"
    ], 
    "project_url": "https://devpost.com/software/space-space-shoot-revolution"
  }, 
  {
    "hackathon_name": "Hackers at Cambridge Game Gig", 
    "project_description": "Inspiration\nA game played many years ago as children.\nWhat it does\n3 levels. Each one harder than the last. Same premise.\nHow we built it\nGameMaker Studio 2 in an hour.\nChallenges we ran into\nThe time limit.\nAccomplishments that we're proud of\nActually making something that works.\nWhat we learned\nStart new projects earlier if the old one seems broken.\nWhat's next for Spitter (PCCL012)\nMore innovation!", 
    "project_name": "Spitter (PCCL012)", 
    "project_tags": [
      "gamemaker"
    ], 
    "project_url": "https://devpost.com/software/spitter-pccl012"
  }, 
  {
    "hackathon_name": "Hackers at Cambridge Game Gig", 
    "project_description": "What it does\nGhost follows the player by finding the shortest path using breadth-first search. You earn points by collecting food before the ghost catche up to you\nAccomplishments that I'm proud of\nFinishing a very small project after changing our idea multiple times\nWhat I learned\nFirst time using Lua and Love2D!\nWhat's next for HiddenGhosts\nCreate some new levels and more complicated mazes", 
    "project_name": "HiddenGhosts (Lockers)", 
    "project_tags": [
      "lua"
    ], 
    "project_url": "https://devpost.com/software/hiddenghosts"
  }, 
  {
    "hackathon_name": "Hackers at Cambridge Game Gig", 
    "project_description": "Inspiration\nAs keen adventurers in South America, this story of a brave adventurer really resonates with us and will surely appeal to all who have ever wished to treasure-hunt in mysterious temples themselves.\nWhat it does\nA simple but charming platformer about an explorer in an Aztec temple.\nHow we built it\nGameMaker Studio 2, with lots of problems with the nascent software!\nChallenges we ran into\nSource control is completely broken.\nAccomplishments that we're proud of\nWorking around broken source control.\nWhat we learned\nMuch.\nWhat's next for Aztec Quest: Curse of the Winged Serpent\nAdding many more levels.", 
    "project_name": "Aztec Quest: Curse of the Winged Serpent (PCCL012)", 
    "project_tags": [
      "gamemaker"
    ], 
    "project_url": "https://devpost.com/software/aztec-quest-curse-of-the-winged-serpent"
  }, 
  {
    "hackathon_name": "Hackers at Cambridge Game Gig", 
    "project_description": "Inspiration\nDucks ducks ducks and VR :D \nWhat it does\nAllows user to shoot randomly flying ducks\nHow I built it\nUnity\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for Duck shooter", 
    "project_name": "Duck Hunt VR - Table 6", 
    "project_tags": [
      "unity"
    ], 
    "project_url": "https://devpost.com/software/duck-shooter-2dir7s"
  }, 
  {
    "hackathon_name": "Hackers at Cambridge Game Gig", 
    "project_description": "Cambridge Game Gig", 
    "project_name": "drill_planet @ table NaN", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/drill_planet"
  }, 
  {
    "hackathon_name": "Hackers at Cambridge Game Gig", 
    "project_description": "In a Hackathon five years ago, Adomas developed a competitive version Snake for two players in 2D. This is a variation on that, but with a first-person viewpoint and in a 3D environment.\nIt is version of snake where 2 players compete to be the last one standing in a walled area. When a player hits a wall, they lose a unit of their length until they \"die\". Players gain units of length by eating apples and can obtain a temporary speed boost power-up. This is advantageous as bumping into the other player's head causes them to lose units of length in their snake - however this collision also causes you to lose a unit. The game ends when one of the players loses all of their length.\nWe used the engine Unity and the language C# to develop this game.\nThere were problems with getting the chain of spheres representing the snake to move together smoothly, but the problems were fixed relatively easily. Another issue was typing errors in the code, which cost a lot of time for something very simple. Another significant challenge was the time pressure. We had a lot of ideas we wanted to put into this, but unfortunately we ran out of time to complete them.\nWe are proud of what we managed to do in this time and are quite happy with how it looks given our lack of design experience.\nWe learnt how to actually develop games using the Unity engine and about writing algorithms for a basic AI for the computer to play instead of another human player.\nWe were planning to add a computer controlled snake who avoids obstacles and managed to complete a possible algorithm, however we ran out of time to implement this into the game. We also planned to include in-game menus and a scoring system. We are planning to port this for use on VR headsets such as the Oculus Rift.", 
    "project_name": "Snake Logic Wars (table by the lockers)", 
    "project_tags": [
      "unity"
    ], 
    "project_url": "https://devpost.com/software/snake-logic-wars"
  }, 
  {
    "hackathon_name": "HackNotts 2016", 
    "project_description": "Inspiration\nOver the years, many .sexy websites have emerged from the minds of young, inspired artisans on their craft. We decided it was about time we put the power of .sexy into the hands of the people.\nWhat it does\nAllows you to get a subdomain, upload pictures and create a .sexy page. (For example, http://pandelis.sexy)\nHow we built it\nWe used the sheer power of the One True Dev Language. Plus some modules which are written in the One True Dev Language.\nChallenges we ran into\nNobody likes Jade. Jade sucks.\nWhat's next for is-so.sexy\nWelcome the world.", 
    "project_name": "is-so.sexy", 
    "project_tags": [
      "javascript", 
      "mongodb", 
      "react", 
      "html", 
      "css", 
      "node.js", 
      "express.js"
    ], 
    "project_url": "https://devpost.com/software/is-so-sexy"
  }, 
  {
    "hackathon_name": "HackNotts 2016", 
    "project_description": "Code-Zero\nWe developed a side-stroller in Java over 24 hours using awt as our rendering package.\nThe goal of the small game is to get to the castle at the end of the level (Somewhere to the right). If you make a mistake then you can re-wind time at the cost of Sanity. \nControls are W, S, A, D for movement and E for rewinding time by 3 seconds.", 
    "project_name": "Code-Zero", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/code-zero"
  }, 
  {
    "hackathon_name": "HackNotts 2016", 
    "project_description": "Inspiration\nwe thought of a punny domain name, and we had to think of something to put on it. Everyone's favorite aquatic feline obviously was the first thing that came to mind.\nWhat it does\nYou click the button, you get a Cat. You click it again, you get another cat.\nHow we built it\nSo much grepping.\nSo much.\nChallenges and Successes\nMaking a website appear online in 24 hours is hard. AWS made it easy.\nYou can never have too many octocats. Thanks GitHub!\nWhat's next for hacktocat.com\nWho knows??????\nMoar cats?!?!?!?!?!?!?!?!?", 
    "project_name": "hacktocat.com", 
    "project_tags": [
      "html", 
      "javascript", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/hacktocat-com"
  }, 
  {
    "hackathon_name": "HackNotts 2016", 
    "project_description": "Inspiration\nWindows media player animations \nWhat it does\nDynamically generates basic shapes based off audio files and displays them on an LED matrix powered by a raspberry pi. \nHow we built it\nWe used python with the aubio framework (to sample audio files)\nChallenges we ran into\nRunning our code on an (old) raspberry pi, running multiple bits of code concurrently, selecting audio information that would make for distinct animations for any file.\nAccomplishments that we're proud of\nScraping data from audio files and dumping them into numpy arrays; getting a raspberry pi hooked up to 36 LEDs and having them update in sync with each other.\nWhat we learned\nA lot about audio libraries and signal processing, merging git branches and multiprocessing in python \nWhat's next for AudioAffair\nMoving from an LED matrix to a more advanced renderer (OpenGL?) and using more data points from files to seed our algorithms (signal energy, amplitude differential etc).", 
    "project_name": "AudioAffair", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/audioaffair-ybn4qv"
  }, 
  {
    "hackathon_name": "HackNotts 2016", 
    "project_description": "Inspiration\nThe original idea for roombox came from a common frustration at parties - everyone loves Spotify, but why doesn't it allow other people to queue songs in a playlist? Eventually, we became fed up with constantly queueing songs for others, and decided to build roombox, a simple room-based queueing system for Spotify.\nWhat it does\nroombox allows users to create password-protected rooms, which in turn creates a playlist in their Spotify account. Other people can then join that room and queue songs into that playlist - the idea being that Spotify plays through whatever has been queued in order, removing the need for someone to oversee the music.\nHow we built it\nFor the backend, we used Flask - a powerful template-driven Python web framework designed with modularity and scalability in mind. This allowed us to build roombox up from just a home page without really needing to modify our existing code. This definitely made the development process go a little more smoothly, as well as providing a lot of useful inbuilt stuff.\nFor the frontend, we elected to use a framework called MaterializeCSS - this was perfect for a variety of reasons:\n\nIt allowed us to have a site which worked well on both mobile and desktop browsers.\nIt allowed us to create a site with a very clean, minimal design.\nMaterializeCSS has toast notifications built in - we used a Flask template to effectively create a \"message handler\" for Flask messages, which let us create toast notifications using only Flask's inbuilt flash() function.\nIt removed a lot of the guesswork involved in creating a usable layout; most of the elements arrange themselves into a neat layout without much work on our part.\n\nChallenges we ran into\nHonestly, the development went quite smoothly all things considered. We ran into an issue where a bug in our code caused the database into an odd state, resulting in errors when performing queries - because we weren't storing any valuable data at that stage in development, we could work around the problem by deleting the database until we fixed the bug. In general, we found that database management was the most difficult part of the project to implement. Aside from that, there were no show-stopping issues, and we were able to get roombox finished relatively quickly.\nAccomplishments that we're proud of\n\nThe server is resource-efficient enough that it runs fairly quickly with memory to spare inside the cheapest available DigitalOcean droplet ($5/mo for 512MB RAM, 20GB SSD and 1 vCore). If we run into performance issues as time goes on, we may consider upgrading, but for now it works fine.\nWe were able to get the project finished in just over 12 hours - this left us plenty of time to squish any minor bugs and usability issues that we found with the project after that point.\n\nWhat we learned\nDeveloping roombox taught us a lot about front-end development more than anything; making sure the site was straightforward, ensuring the next steps were obvious, et cetera. We found that a lot of our time was spent rearranging things on the frontend to remove unnecessary steps, and fixing usability issues with the layout (like putting the search bar above the queue, where previously it was below and could end up off-screen). Additionally, it was nice to learn how the Spotify Web API works, and we learned a lot about how to make requests (and parse the response) using the popular requests library available on pip.\nWhat's next for roombox\nWe have thrown around the idea of preparing roombox for public use - the idea seems to be popular with people who have had it demonstrated to them, and the site is pretty close to being ready for public consumption - we just need to finish implementing little \"polish\" things (like auto playlist deletion after a given time, and the ability for the host to delete things from the queue).", 
    "project_name": "roombox", 
    "project_tags": [
      "flask", 
      "postgresql", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/roombox"
  }, 
  {
    "hackathon_name": "HackNotts 2016", 
    "project_description": "Inspiration\nWe found that documenting hackathons outside of GitHub was very tough, and it was easy to forget to note down some of the more sentimental things that happened. Initially, we planned on using Alexa to note down milestones and events, but as this later became less of an option, APIs were suggested to us.\nWhat it does\nIt acts to help hackathon attendees document tweets, commits, and milestones, and presents these in a final summary table.\nHow we built it\nWe built the frontend using core HTML initially, neglecting to style the website until core functionality was in place. We also endeavoured to implement the Twitter and GitHub APIs. We allowed users to store what they wanted to document in MongoDB, and endeavoured to parse Twitter and GitHub data into this database too.\nChallenges we ran into\nMaking sense of both the Twitter API and GitHub API were a challenge. Parsing the Twitter data was also a nightmare! We had no previous experience using these APIs. Interfacing between PHP and HTML proved a challenge, since the website was very heavy on both reading and writing database data.\nAccomplishments that we're proud of\nWe are proud of making the APIs work and integrating all our work together! We believe that with a quick and easy setup, this could be a tool that we all use during hackathons.\nWhat we learned\nWe learned about new APIs, building forms, and using databases. In particular, Simon began to understand PHP, and while Darren had experience in this before, he learned about the most effective ways to use database data in a website.\nWhat's next for Hacker Tracker\nIntegrate more APIs into Hacker Tracker to make it a stronger platform for many people use it as a platform to document their previous hackathons! It also has social network potential.", 
    "project_name": "Hacker Tracker", 
    "project_tags": [
      "html", 
      "css", 
      "php", 
      "javascript", 
      "twitter", 
      "git", 
      "github", 
      "mongodb", 
      "bootstrap", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/hacker-tracker-ewutrx"
  }, 
  {
    "hackathon_name": "HackNotts 2016", 
    "project_description": "", 
    "project_name": "Aqua-Mazing", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/aqua-mazing"
  }, 
  {
    "hackathon_name": "HackNotts 2016", 
    "project_description": "Action Action\nScan your books, newspapers and documents. Quickly find sections that involve drama and action. Interesting parts are easy to find by searching for the highlighted paragraphs.\nIt even enables you to have a look at different plots of the underlying features as well as giving you the opportunity of highlighting the word type structure and frequency of your document.\nThe project was implemented by:\n\nusing a diverse range of features extracted from different text units \n(i.e. sentence length, amount of adjectives...)", 
    "project_name": "Action Action!", 
    "project_tags": [
      "python", 
      "nltk", 
      "flask"
    ], 
    "project_url": "https://devpost.com/software/nlp-analysis"
  }, 
  {
    "hackathon_name": "HackNotts 2016", 
    "project_description": "hackNottsAlexa\nWe came up we a load of ideas of how to use Alexa. They were either already built in or impossible due to limitation in the technology.\nEventually we found an idea that we could work with. Make the slackbot but on Alexa. We've tried to make it flow as best as possible.\nWe hope you like it.", 
    "project_name": "hackNottsAlexa", 
    "project_tags": [
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/hacknottsalexa"
  }, 
  {
    "hackathon_name": "HackNotts 2016", 
    "project_description": "Inspiration\nOnline Harassment is a serious issue, but awareness needs to be raised. \nWhat it does\nThe site features a short quiz designed to test the user's knowledge regarding online harassment. It is scored immediately, with the form marking answers correct or incorrect. At the bottom of the page, there is a link to #HackHarassment's brochure, where the information for the quiz was found. It also links to the #HackHarassment's challenge.\nHow we built it\ndomain + HTML + jotform + AWS = website!!!\nChallenges and Future Goals\nInitially I was going to have a large set of questions and randomize the questions that appear each time the site is loaded, but incorperating the jotform element into javscript was a bit harder than expected. It will definitely be a part of future versions.", 
    "project_name": "hacksnothate.com", 
    "project_tags": [
      "amazon-web-services", 
      "html", 
      "jotform"
    ], 
    "project_url": "https://devpost.com/software/hacksnothate-com"
  }, 
  {
    "hackathon_name": "HackNotts 2016", 
    "project_description": "Inspiration\nWerewolf is an amazing game.Combine it with Alexa's voice command and a little (huge actually) amount of Python in the backend and you get countless hours of fun.\nWhat it does\nCalls into Alexa's API in order to simulate the host of a werewolf game.\nHow we built it\nThe backend is fully supported by AWS,while Alexa makes calls to our Flask server to get the whole story of the werewolf.Then,it parses the info into our front end written in html,css and js in order to provide mobile users with a GUI\nAWS challenge\nLambda - handles Alexa integration\nGame Server - EC2\nRoute53 for static routing\nCloudWatch\nS3 with CloudFront to serve silent mp3 files for timing.\nDomain challenge :\nalexaplaywerewolf.com\nChallenges we ran into\nGet alexa to understand how to run our game\nAccomplishments that we're proud of\nLearning how to use Alexa Python SDK in order to develop our project.\nWhat we learned\nA lot about Alexa,how it works and what you can use it for.\nWhat's next for Alexa the Werewolf\nUi imporvements and a lot of code cleaning.", 
    "project_name": "Alexa the Werewolf", 
    "project_tags": [
      "amazon-alexa", 
      "python", 
      "html5", 
      "css3", 
      "javascript", 
      "flask", 
      "amazon-web-services", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/alexa-the-werewolf"
  }, 
  {
    "hackathon_name": "HackNotts 2016", 
    "project_description": "Inspiration\nWe started off wanting to make a game based on the music that you're listening to. We ended up making a music visualiser optimised for edm with special events or kicks and drops.\nWhat it does\nHow we built it\nloads and loads of js \nChallenges we ran into\njavascript is 90% bs\nAccomplishments that we're proud of\nWhat we learned\nWhat's next for DubRace", 
    "project_name": "DubRace", 
    "project_tags": [
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/dubrace"
  }, 
  {
    "hackathon_name": "HackNotts 2016", 
    "project_description": "Inspiration\nWe were reading up on big-data science and statistics but got bored by chapter 2. Our focus moved away from trying to visualise trends to simply making pretty art instead. Unfortunately, both of us stopped drawing professionally at age 7 and our skills haven't developed since then.\nWhat it does\nIt takes an aggregated data-set provided by Nationwide and animates the income, outgoings and balance over time into a so-called polar-coordinates-color-overlay-awesome-graph.\nHow we built it\nJavascript + Magic\nChallenges we ran into\nFuchsia vs Magenta...\nAccomplishments that we're proud of...\nRealising that neither Fuchsia nor Magenta were suitable and instead choosing Mauvish Crimson.\nWhat we learned\nColor theory is hard.\nWhat's next for Transaction Nebulae\nThe ability to throw new data at the running program in real time and have the graph(s) keep getting drawn. This could also be adapted for stock market visualisations.\nMaking it work in ($browsers - $browsers[chrome]) would be cool, too.", 
    "project_name": "Transaction Nebulae", 
    "project_tags": [
      "javascript", 
      "html5", 
      "css3", 
      "canvas"
    ], 
    "project_url": "https://devpost.com/software/generative-transaction-art"
  }, 
  {
    "hackathon_name": "HackNotts 2016", 
    "project_description": "", 
    "project_name": "bank-of-alexa", 
    "project_tags": [
      "python", 
      "flask", 
      "alexa", 
      "capital-one"
    ], 
    "project_url": "https://devpost.com/software/bank-of-alexa"
  }, 
  {
    "hackathon_name": "HackNotts 2016", 
    "project_description": "Inspiration\nWe are basically a bunch of creative students who thought hard about the small life hacks that people will like. Pebble was a new gadget for most of the team and we wanted to explore what we could do with it.\nWhat it does\nHotPebble is made up of 3 simple utilities function.\n\nHands-free smooth scrolling of webpages by rotating the wrists.\nControl of media on the pebble, such as play/pause, previous and next song/video and volume controls.\nControl of PowerPoint presentation on the pebble.\n\nUse Cases:\n\nImagine following a cooking recipe in the kitchen and using the scroll feature to follow the steps of the recipe.\nReading an e-book/blog and not having to constantly reach for the trackpad on your laptop to view the contents.\nMany of us like to lie on our beds/walk around the house while listening to music from the computer. It is always a pain to walk right up to it to change tracks, adjust the volume or start/stop playing. With HotPebble, there is a simple and seamless solution to manage your media experience.\n\nHow we built it\nThere are two main components to this project, the client-side pebble application and the server scripts to handle client data. The client-side pebble application is built in pure C, the highest level language in the world ;). The server scripts are built in Python and caters separately to both macOS and Windows. The macOS scripts uses Python libraries such as pyautogui and pynput, whereas the Windows scripts uses the win32api.\nThe pebble app collects accelerometer data and performs on-device processing to eliminate jitter and smoothen out spikes in orientation values. The app then pipes the data via Bluetooth serial to a server listening on a laptop, which interprets the data to perform the various commands that HotPebble is capable of. This includes scrolling the active window, sending media keys such as Play/Stop, Next/Previous Track, volume control and simple presentation shortcuts.\nChallenges we ran into\nIt was a difficult process to connect pebble applications to non-mobile devices as there was no official API support for direct connection. We had to rely on an external Python library (libpebble2) to accomplish it. The documentation was not very extensive and not much resources/examples were available online. Therefore, we had to spend a lot of time figuring out how to implement the functionalities that we desire.\nAccomplishments that we're proud of\nIt was our first hackathon together as a team even though we had known each other for more than a year. It was an amazing experience as we got to learn about each other better. \nWe are super proud to have completed what we had set out to do. It will definitely be a memorable time and a start for many more great hackathon experiences to come.\nWhat we learned\nLearning to work well in a team. Finding workarounds to technical obstacles that we face. Helping each other solve problems. Managing our expectations and time. \nWhat's next for HotPebble\n\nImplement server scripts to cater to the Linux platform\nAdd more modules for greater functionality", 
    "project_name": "HotPebble", 
    "project_tags": [
      "python", 
      "c", 
      "pebble"
    ], 
    "project_url": "https://devpost.com/software/hotpebble-68wm4n"
  }, 
  {
    "hackathon_name": "HackNotts 2016", 
    "project_description": "Accomplishments that I'm proud of\nI finished my first game starting from scratch with just c++ and sfml\nGitHub: https://github.com/chtorr97/HackNotts16.git", 
    "project_name": "(SKIP THIS) Fat Zombies (SKIP THIS)", 
    "project_tags": [
      "c++"
    ], 
    "project_url": "https://devpost.com/software/zombiesurvival"
  }, 
  {
    "hackathon_name": "HackNotts 2016", 
    "project_description": "Inspiration\nOur (excluding Stephen) hack from last year, now for a similar robot sequel (including Stephen).\nWhat it does\nWalkies. Play dead. You give it commands and it does it.\nHow we built it\nLots of tape. Not GIT. Anything but GIT.\nChallenges we ran into\nGravity, things falling apart, number of pictures, the adhesiveness of certain materials. Ghosts possibly, probably?\nAccomplishments that we're proud of\nCompetent Amazon Alexa integration. It looks really sad. Face detection.\nWhat we learned\nHow to do \nWhat's next for Clausiosity Rover 2: The Woofening\nFully integrated face recognition for walkies.", 
    "project_name": "Clausiosity Rover 2: The Woofening", 
    "project_tags": [
      "raspberry-pi", 
      "arduino", 
      "amazon-web-services", 
      "amazon-alexa", 
      "java", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/clausiosity-rover-2-the-woofening"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nBen and I are both PhD students in science subjects and have experienced phases when our supervisors have been traveling for a while. However, when skyping with them it is often difficult to convey mathematical ideas, as most chat are not able to properly typeset equations or able to easily share sketches.\nWhat it does\nIt's basically a chat room with extra support for latex and a whiteboard. The idea is that you're skyping with your supervisor, open the chat room on your laptop and tablet and use the laptop to write equations and the tablet to draw sketches. Everything appears in realtime at the other end.\nHow we built it\nWe use node.js with express.js and socket.io for the backend, the front end is written in angular2 with typescript.\nChallenges we ran into\nA few... not really knowing angular or node at all was the main one. \nAccomplishments that we're proud of\nDoing our first hackathon and actually submitting something!\nWhat we learned\nNever mess with angular routers....\nWhat's next for collaboard\nBetter layout on small phone screens, export to latex/pdf documents.", 
    "project_name": "collaboard", 
    "project_tags": [
      "node.js", 
      "socket.io", 
      "express.js", 
      "azure", 
      "typescript"
    ], 
    "project_url": "https://devpost.com/software/collaboard"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "", 
    "project_name": "AutoDJ", 
    "project_tags": [
      "python", 
      "midi.js", 
      "nltk", 
      "machine-learning", 
      "requests", 
      "beautiful-soup", 
      "php", 
      "css3"
    ], 
    "project_url": "https://devpost.com/software/autodj-i87zrp"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "", 
    "project_name": "Don't Laugh", 
    "project_tags": [
      "python", 
      "opencv", 
      "arduino", 
      "microsoft-project-oxford"
    ], 
    "project_url": "https://devpost.com/software/don-t-laugh"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nThe magical world of Harry Potter\nWhat it does\nEnter the digital world of Play Lumos on your mobile (webbrowser). You add your name and then you will be randomly assigned to a house. You enter the map of the location and select a opponent. After confirming by the opponent the magic begins, you need to cast spells to each other. When you win a duel, your house get points. \nHow I built it\nWizard powers\nChallenges we ran into\nImplementing the map... many more...\nAccomplishments that I'm proud of\nCreating a wizardry playful game for mobile in the web browser that let's people play with there friends.\nWhat we learned\nJava-script, using Esri API\nWhat's next for Play Lumon\nMastering the dark arts of programming further to make the app more ready for releasing it to muggles.\nWebsite\nplaylumos.com (still pending...)", 
    "project_name": "Play Lumos", 
    "project_tags": [
      "javascript", 
      "jquery", 
      "php", 
      "esri", 
      "sql"
    ], 
    "project_url": "https://devpost.com/software/play-lumon"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nMeeting each other and making friends lead to the discussion of something almost every university student has on their bucket lists: backpacking. Wandering off on your own without any plan seems like fun, but we realised that as adventurous as we may be, some things such as finding cheap places to stay at along the route are quite necessary. Alas, Bag'Packers was born. \nWhat it does\nThis web app takes in the details of your trip, and proposes a route you could take during your journey. It also proposes an itinerary for you, taking into account how much hiking you would have done in a day, and shows you various options for cheap hostels and places to stay at where you'd be stopping your day's hike. \nHow we built it\nUsing sky scanner and google's API. Written in Python and integrated in Django.\n HTML, CSS and JavasScript for front end.\nChallenges we ran into\nEvery one coded in python for the first time and it was also our first time using an API. The Skyscanner API was particularly difficult, especially for the hotel search. \nAccomplishments that we're proud of\nWe were able to complete a working prototype despite our lack of experience, and managing to actually use the Skyscanner API. \nWhat we learned\npython, api , teamwork, how to stay up all night to finish the work.\nWhat's next for BagPackers\nto keep improving on what we have built to make it better and simpler with more features. Also create a mobile app.", 
    "project_name": "BagPackers", 
    "project_tags": [
      "django", 
      "python", 
      "javascript", 
      "skyscanner"
    ], 
    "project_url": "https://devpost.com/software/bagpackers"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nOnline harassment has many forms, and one of them is the possibility of the malicious triggering of vulnerable individuals. Trigger warning are becoming more and more mainstream and we wanted a safe space to be available online for such vulnerable users. #HackHarassment\nWhat it does\nTrigger Replacer allows the user to type up a list of words that trigger them, and the words they would like them to be replaced with. The user can remove and reset the list of words as they wish, and Chrome will save them for future reference without the user having to input them each time.\nHow we built it\nWe used a Chrome extension and their APIs to create a JavaScript code with jQuery elements which is injected on all tabs. An HTML file was made to create the options page of the extension for the user to edit their trigger words.\nChallenges we ran into\n\nInitially the code was run on button click, and we wanted to ensure one click replaced all words and not just one at a time.\nUsing regular expressions to exclude elements of the html within tags.\nAsynchronicity of the API callback functions.\nReading and writing of words using Chrome storage API.\n\nAccomplishments that we're proud of\n\nCreating something that works from scratch.\nThe ability of replacing all instances of the words on the static HTML page.\nAllowing the user to edit the words as they wish.\nMaking the internet a safer space.\n\nWhat we learned\n\nHow to create a Chrome extension.\nWorking together with new people on a project with a very tight deadline.\n\nWhat's next for Trigger Replacer\n\nEnsuring the extension works on dynamic sites like Facebook or Twitter where the user can scroll (currently only replaces the first few instances of the words)", 
    "project_name": "Trigger Replacer", 
    "project_tags": [
      "javascript", 
      "json", 
      "html", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/trigger-replacer"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "", 
    "project_name": "Moon", 
    "project_tags": [
      "c++", 
      "gimp"
    ], 
    "project_url": "https://devpost.com/software/moon"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nEvent data analysis with Microsoft Cognitive Services Emotions API and outputting it in a geolocation aware format using Esri maps API.\nWhat it does\nTakes a simple two-field input: a link to a Facebook album with photos from an event and a location. Analyses photos in the album and evaluates emotions of people present on the photos. Plots a point on a 2D map and displays information about the event gathered from the Emotions API.\nHow we built it\nA broad overview of our application is basically getting all the photos from Facebook and then passing the links on to the backend for further processing. The backend calls the Microsoft Cognitive API's for every image and does some minor data processing on the returned values and gives it back to the user. But it was even harder to implement this simple workflow. We started with just calling the cognitive api's through JavaScript but it took a lot of time to send all the images and do required calculations. So we thought of sending a message to an AWS SQS queue and wrote a Go server, which is attached to the queue and when it receives new messages, it calls the API for all the images concurrently thus bringing our execution time from about 10secs to 1-2secs. Apart from that we run node.js server on an EC2 instance and the frontend is written in Angular.js, HTML5 and CSS.\nChallenges we ran into\nThe major challenges were basically related to concurrency in Go, eliminating data races, avoiding null pointers and reduce the number of goroutines. Also understanding the AWS SDK for Go lang was a big challenge and setting up the Simple Queue Service wasn't easy as well.\nAccomplishments that we're proud of\nEfficient use of multiple APIs and actually harnessing the power of Go and Amazon AWS.\nWhat's next for Hackathon Happiness\nUser registration, added functionality to save your map even when the session has expired.", 
    "project_name": "Hackathon Happiness", 
    "project_tags": [
      "html5", 
      "amazon-web-services", 
      "go", 
      "node.js", 
      "angular.js", 
      "behavioral-media-networks-cognitive-insights", 
      "facebook-graph", 
      "express.js", 
      "esri", 
      "javascript", 
      "npm"
    ], 
    "project_url": "https://devpost.com/software/hackathon-happiness"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Features:\nInspiration:\nthe reactions of Facebook\nWhat it does:\ntells which photo will gain the most attention\nHow we built it:\nused machine learning to analyze Facebook photos and learned which tags make the most successful photos; the website outputs the best photo from a given set\nChallenges we ran into:\nran out of memory, not enough time to debug the model, Django usage\nAccomplishments that we're proud of:\nthe website gives some good predictions\nWhat we learned:\nteam members should stay together and collaborate\nWhat's next for Fameboost:\ndeveloping more sensitive features", 
    "project_name": "Fameboost", 
    "project_tags": [
      "facebook", 
      "python", 
      "css", 
      "django", 
      "github", 
      "numpy", 
      "scikit-learn"
    ], 
    "project_url": "https://devpost.com/software/fameboost-jbp1qf"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nWe are bringing the capabilities of services like Google Analytics into the real world!\nAllowing businesses to explore how people interact with billboards, posters and ads has tremendous value. \nAnd with our application, we can give the insights that people need to better target their audience in the physical world. \nWhat it does\nWe are using the Microsoft Cognitive Services to analyze video footages of people around things like billboards, posters or other kinds of advertisements. \nUsing this footages, we can analyze facial features and determine how people react to whatever they are looking at. \nSo we also can determine demographics such as age, gender and other characteristics to give insights into how the target audience looks like.\nHow we built it\nVideo footages are processed with the Microsoft Cognitive Services APIs.\nFirst, we process the video file to find the different faces through the video.\nThen we generate frames for every point in the video where faces are recognized. \nThese images are then slightly enhanced and go through further processing by the Faces API and Emotion API. \nThis data is then aggregated using react.js and highchart to provide clear characteristics about the audience reactions and demographics. We could even tell you how many people wear glasses.\nChallenges we ran into\nSince we currently don't have a system with cameras attached to advertisements in places such as the London Underground, we don't have these footages to analyze. Therefore, we used timelaps videos of public places as a replacement. The charts shown in the images are based on this footage: https://www.youtube.com/watch?v=ZpHRp-WgQ0w.\nAccomplishments that we're proud of\nEven though we did not have much experience in the area of video processing, we accomplished fairly good results and were able to work with video footage without further problems.\nThe tool-chain that we built to generate the final data has grown very quickly and has several intermediate steps. With this established tool-chain, it is easy to process further videos.\nWhat we learned\nWe learned how to process video footage with the Microsoft Cognitive Services and how to use external libraries to generate images for specific frames in a video. We were astonished how fast we could achieve good results using the Microsoft Cognitive Services without training a dedicated model for this task.\nWhat's next for crowd-reactions\nCurrently we can track faces in the video of people in front of ads, but we can't say whether they look on their phone, at the ad or somewhere else. As a next step we want to build a custom face recognition model that also computes for each face the probability that this person ist actually looking at the ad. Furthermore, our current platform can process complete video files. This can be extended with an endpoint, which consumes video streams in real time.", 
    "project_name": "crowd-reactions", 
    "project_tags": [
      "javascript", 
      "python", 
      "react", 
      "redux", 
      "flask"
    ], 
    "project_url": "https://devpost.com/software/crowd-reactions"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nIt always challenging for medical students and new doctors to interpret electrocardiograms (ECGs) given how often they are used in clinical practice. \nWhat it does\nHeartBeat helps them to interpret ECGs and differentiate between cardiac arrhythmias. It is a tool that they can use on top of their existing clinical knowledge in order to confirm the interpretation of the ECG. \nHow we built it\nWe used a cardiac arrhythmia dataset from UC Irvine and taught our classifier to differentiate between normal ECGs and ECGs showing cardiac arrhythmias (eg heart attacks, heart blocks, sinus tachycardia, etc.). \nChallenges we ran into\nIt was challenging to figure out what to teach the classifier, how to input the data, and how to structure it neatly. Connecting everyone's work was challenging too (front-end, machine learning algorithm, and back-end). \nAccomplishments that we're proud of\nWe're proud that we could work together to get our project done within 24 hours! Teaching a machine to distinguish between the presence and absence of cardiac arrhythmias and classifying it was technically challenging. \nWhat we learned\nWe learnt a lot about Python, ECGs, scikit-learn, and machine learning!  \nWhat's next for HeartBeat\nInstead of uploading csv files to input the data, it would be cool to just upload images so that pictures are just needed in order to interpret the ECGs.", 
    "project_name": "HeartBeat", 
    "project_tags": [
      "javascript", 
      "python", 
      "html", 
      "css", 
      "amazon-web-services", 
      "machine-learning", 
      "adobe-illustrator", 
      "scikit-learn"
    ], 
    "project_url": "https://devpost.com/software/heartbeat-fg29wr"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nWe were inspired by a meme we saw during chemistry class that depicted a squirrel with its arms in the air captioned, \"Interpretive Dance\".\nWhat it does\nThe application is an IOS app, that uses the core motion framework to allow for a ball on the screen to be rolled around by tilting the phone. The goal of the game is to make the ball follow a highlighted path.\nHow we built it\nUsing the phone's accelerometer, we determined the components of gravity acting on the phone, and extended that to the motion of the ball.\nChallenges we ran into\nOur initial idea was to create an app that tracks the iPhone using the accelerometer and gyroscope. This app would guide the user to move in such a way as to simulate dancing. It proved to be very difficult to track the location of the phone in 3D space, so we ended up using the accelerometer reading to make a ball roll on the screen. The idea of the ball following the a line on the screen remained, just without the simulation of dancing. Of course, nothing is preventing the user from dancing while playing the game...\nAccomplishments that we're proud of\nIn working on this project we created a level interface that makes level selection very smooth and easy on both the front and back end. However, we were not able to fully utilize it, nor create all the levels we desired.\nWhat we learned\nWe improved our skills in swift and learned a lot of Linear Algebra during our initial attempt to create a dancing game.\nWhat's next for Jitterbug\nWe hope to work out the formulas that the dancing portion of the game requires.", 
    "project_name": "Jitterbug", 
    "project_tags": [
      "swift", 
      "xcode", 
      "uikit", 
      "ios"
    ], 
    "project_url": "https://devpost.com/software/jitterbug"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nAssist people with dementia in their day-to-day lives.\nWhat it does\nIt learns from the person's actions and reminds the user where \nHow we built it\nChallenges we ran into\nAccomplishments that we're proud of\nWhat we learned\nWhat's next for Novis Obligate", 
    "project_name": "Novis Obliviate", 
    "project_tags": [
      "swift", 
      "ios", 
      "python", 
      "love", 
      "machine-learning"
    ], 
    "project_url": "https://devpost.com/software/novis-obliviate"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nSolving Education\nWhat it does\nA social network where you can share specific content, setup meetings with people of interest, mentoring, advising, meeting in person.\nHow we built it\nTrial and error\nChallenges we ran into\nServer-client syncing, ui, css\nAccomplishments that we're proud of\nWe learned stuff\nWhat we learned\nWe learned how to make instasearch!\nWhat's next for fypster2\nFurther dev", 
    "project_name": "fypster2", 
    "project_tags": [
      "meteor.js", 
      "react", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/fypster2-b8mav5"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nBeing able to find relevant people in hackathon venues\nWhat it does\nLocallize and show people on a building plan\nHow I built it\nWith my sweat and blood\nChallenges I ran into\nDeploying Node.JS server\nAccomplishments that I'm proud of\nSocket managing, server-client communication\nWhat I learned\nSome JS, deploying is a bitch\nWhat's next for hackersmap\nA Database and more interactivity\nBuilt With\nJS", 
    "project_name": "hackersmap", 
    "project_tags": [
      "javascript", 
      "css", 
      "html", 
      "angular.js", 
      "socket.io", 
      "esri", 
      "express.js"
    ], 
    "project_url": "https://devpost.com/software/hackersmap-jsktwr"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\n\nThe ability to have everyone engaged in a music based social experience by contributing together ideas and interests.\nListen to playlists that the majority will enjoy.\nAvoid upsetting someone by offending them if you don't like their taste in music (anonymous voting feature)\n\nWhat it does\n\nHas built in library of music that can be found with search bar (type in artists, songs, genres etc...)\nIf a user does not like a certain playlist, artist, song etc they can vote to skip (anonymously) what is currently playing (MVP version), if the majority also vote to skip then this action takes place\nIf someone suggests a playlist, artist etc in the search bar, a popup appears which asks users if they agree - if the majority agree then the suggested request becomes the current music option\n\nHow we built it\n\nFirstly, developed/mind mapped ideas fully using business model template\nBack end build by linking youtube feature\nLogo design by graphic designer after thorough consultation and discussion\nFront end developing following a mock up draft\nConnecting the back and front ends to finalise the MVP\n\nChallenges we ran into\n\nBuilding a front end with no experience was a challenge\nFirst time using YouTube related database\nSmall team, little time and multiple super interesting ideas (if there was more time a great website could be produced!)\n\nAccomplishments that we're proud of\n\nFinished the MVP of the app, it looks really cool and works for the time we had been given\n\nWhat we learned\n\nIntegrating YouTube with back end\nFront end developing skills\nDedication! \n\nWhat's next for choice\n\nIf this could be developed with a bigger team, this would be an excellent project, which could potentially change the \"social gathering\" scene - such as a chilled Friday in the office, going out clubbing, or just hanging out at home with friends - as they say, \"music is a piece of art, that goes in the ears and straight to the heart\"", 
    "project_name": "choice", 
    "project_tags": [
      "node.js", 
      "html", 
      "css", 
      "javascript", 
      "youtube", 
      "bootstrap", 
      "adobe-illustrator", 
      "websockets", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/choice"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nAfter recently incredibly depressing news, I wanted a way of reading headlines without making you not want to get out of bed.\nWhat it does\nIt shows you the daily headlines, currently from bbc news (in future imported from your feedly) and displays them in a star wars intro scroller.\nHow I built it\nCurrently in Processing, porting to p5.js and creating a web interface\nChallenges I ran into\nXML parsing can be a problem.\nFonts not working in Processing.\n when starting to port to javascript had some probelms with objects and parseing.\nAccomplishments that I'm proud of\nWhat I learned\nRotating text in the X axis.\nWhat's next for May The News Be With You\nPort to p5.js make nice web interface where you can use feedly to import news.\nput on www.maythenewsbewithyou.com", 
    "project_name": "May The News Be With You", 
    "project_tags": [
      "processing", 
      "javascript", 
      "css3"
    ], 
    "project_url": "https://devpost.com/software/may-the-news-be-with-you"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nWhat it does\nIt reconstructs a 3D point cloud from a given video sequence containing a certain object.\nHow we built it\nWe extracted the frames from the video and used VisualSFm library to reconstruct the point cloud from them.\nChallenges we ran into\nAccomplishments that we're proud of\nWhat we learned\nWhat's next for Semantic SFM", 
    "project_name": "Semantic SFM", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/semantic-sfm"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nWe are studying medicine, biomedical sciences, economics and computer science. As a multidisciplinary team, we wanted to incorporate all 4 areas to create an app which helps mental health patients. Depression and anxiety disorder cost $1 trillion per year (WHO), so this app could have medical and financial implications.\nOur research indicated that mood diary apps currently on the market require individuals to input their own emotional state. Research has shown that patients with mental health difficulties may not perceive their own emotional state accurately. As a result, we wanted to use software to analyse this instead.\nWhat it does\nThe app is a mood diary to monitor emotional states, allowing people to record their daily feelings and difficulties. This  feeds into Microsoft API to analyse text to check whether the sentiment was negative or positive, and offers advice for specific treatment goals. For example, it will direct patients displaying suicidal tendencies to the Samaritans hotline, provide patients with panic attacks management advice.\nIf patients have 7 negatives in a row, they are prompted to call their psychiatrist or a close family member/friend via the Dialler. If patients input positive entries, only these will be listed on the front page.\nHow we built it\nWe planned on a white board for 2 hours to determine our main goals: a simple and accessible app. We built an Android app using Android Studio, and used Material Design combined with many libraries. This allowed us to use web Microsoft API (Text Analysis) for cognitive services. \nUsing retrofit (a library for android development), we were able to send requests to the API, which gave us a sentiment score. This enabled us to know how positive/negative the user is feeling, as well as keywords to determine possible reasons for these extreme emotions. This prompted users with tailored advice.\nWe used this to display all positive stories on the front page, whilst hiding negative messages from sight. However, if the user entered a large number of negative messages over a long period of time, this could indicate deteriorating mental health. The Dialler would then be launched to contact a friend/doctor.\nWe used support libraries to make our application backward compatible, whilst still giving the material design to older phones. Libraries called RXJava and RXAndroid gave us cleaner code when developing.\nWe used Adobe Illustrator to design a Material Design inspired app icon, and generated multiple different pixel densities. This allows for the icon to be viewed on a greater number of devies.\nChallenges we ran into\nTiming was very difficult, as we had created an ambitious project with many goals. Furthermore, some of us had never coded before. We intended to use Muse, but we could not access the technology for the 24 hours. The Pebble watches did not have pulse detection so we could not incorporate this.\nWe tried to augment the new Microsoft API with IBM Watson Tone Analyser API, to give us a larger variety of emotions to select from. Potentially, this would have allowed us to assign percentages to measure the weighting of specific emotional states. However, due to the 24 hours time constraints, IBM were unable to accept our request for the beta trial in time.\nAccomplishments that we're proud of\nThree of us learnt how to code for the first time in only 24 hours at our very first hackathon. Our computer scientist learnt how to use the Microsoft API having never used it before. Also, he had never coded on Ubuntu Linux before during a hackathon.\nWhat we learned\nThose who had never coded before learnt basic programming skills, and our computer scientist learnt aspects of medicine and psychiatry.\nWhat's next for Museful\nIncorporate Muse technology to analyse strong emotions via brain activity, or measuring pulse via a smartwatch. These would prompt patients to open their diary and log a new entry via a notification. \nFurthermore, we would have liked to incorporate location features with SkyScanner API to allow individuals to recommend hotels, restaurants, doctors etc. for people with similar mental health conditions. Also, location features with Esri could allow individuals to form local support groups, which has been shown to be beneficial.\nWe would have liked to incorporate the Microsoft API more closely to pick up specific keywords, and offer even more specific tips to patients. This could be further improved with IBM Watson's API.\nA final touch would be to add a customisable personalised motivational wall on the front page. Patients could submit their own images, including motivational quotes and their favourite photos. This would aim to improve mental wellbeing over the long term.", 
    "project_name": "Museful", 
    "project_tags": [
      "android", 
      "microsoft-project-oxford"
    ], 
    "project_url": "https://devpost.com/software/museful-rxao8z"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nOur team was inspired by the fact that there are so many social websites that provide services like dating, chatting, finding jobs, connecting with friends, listening to music etc and for each of those there is one particular service that is exceptionally popular. However, there is no one service when it comes to events. There are several sites that offer a range of event suggestions but hosts either have to pay, be popular enough or sell tickets to them. The only platform that hosts events for free without any specific conditions is facebook. However, there is no functions to recommend events in your area. If you are looking for something specific, facebook is convenient, but not if you need inspiration on a friday night!\nWhat it does\nOur app takes voice input from the user, like \u201cshow me events in london\u201d and suggests events nearby sorted by categories like \u201cconcerts\u201d, \u201cfood markets\u201d, \u201cseasonal\u201d, along with time etc.\nHow we built it\nWith the aim of using voice recognition to find local events for users\nThe build consisted of a two-prong approach, involving an Android front-end and a Java based backend.\nThe Android front end component involved multiple API's, including Google's Speech Recognition, Facebook's Graph API for JSON retrieval of event data, as well as MonkeyLearn API for natural language processing elements.\nThe backend is written in Java using the Spring Boot framework for accessible REST calls. It is calling the Facebook Graph Event API to pull a list of events in the area, which is then filtering using calls to a trained NLP model on MonkeyLearn. The Endpoint is then exposed using ngrok.\nChallenges we ran into\n-Multiple rewrites and builds were executed due to numerous compatibility issues, but all were analyzd and resolved\n-- Natural Language Processing: it is very hard to categorise the event names and descriptions for some events on facebook and put them into appropriate categories. Hard coding words is not an efficient approach therefore we used machine learning that uses a bag of words method. This method, however, is still not error-prone and relies on labelled data.\nAccomplishments that we're proud of\n-Excellent work distribution involving everyone's own strengths, with particular focus on redundancies incase an approach failed.\n-- We are very proud of the team spirit, we quickly found each other, decided on the topic and divided the tasks. There were no major conflict of opinions and everybody contributed significant knowledge and expertise to this project and everything went smoothly until the end.\nWhat we learned\n\n36 hours is not enough time to create a commercial product.\n-Stuff like this can ONLY be done in teams and when everyone shows commitment it will ALWAYS WORK\n## What's next for Event5\nScaling up involving other APIs", 
    "project_name": "Event5", 
    "project_tags": [
      "android-studio", 
      "facebook-graph", 
      "java", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/event5-m8n9p1"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "", 
    "project_name": "PotterSmash", 
    "project_tags": [
      "phaser.js", 
      "javascript", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/pottersmash"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nThis is a Computer Vision project aimed at understanding the contents of images. This has numerous applications, such as in robotics, driverless cars, medical diagnosis and image editing. In all this cases, machines need to perceive and understand their environment in a manner similar to humans.\nThere are now cloud services, such as the Microsoft Cognitive Services API. However, these do not offer a detailed, per-pixel understanding of images, which is what my system does.\nWhat it does\nThe algorithm identifies the object class of every single pixel in the image. For example, it labels certain pixels as \"person\", and others as \"car\" and so on. Furthermore, it identifies unique instances of objects as well: So if there are multiple people, then it should identify each person separately. \nHow I built it\nThe core of the system is implemented using deep neural networks, and described in my research papers (I am a PhD student). I had already trained a model to perform Semantic and Instance Segmentation as part of my research and conference paper submission.\nIn the hackathon, I built a web interface to it, so that a user could upload images, or specify links to images on the internet, and see their result on unconstrained images. \nThis runs on the cloud, on a Titan X GPU using Cuda.\nChallenges I ran into\nI don't really know much about building websites. \nAccomplishments that I'm proud of\nIt seems to work! The algorithm had previously only been evaluated on academic datasets. Now it is being tested on random images from the internet.\nWhat I learned\nI learnt a bit about Flask and building websites in Python.\nWhat's next for Semantic and Instance Segmentation\nThere will be some improvements to the core recognition algorithm. Also, the \"Instance Segmentation\" part needs to deal better with occluding objects.", 
    "project_name": "Semantic and Instance Segmentation", 
    "project_tags": [
      "c++", 
      "python", 
      "flask"
    ], 
    "project_url": "https://devpost.com/software/semantic-and-instance-segmentation"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nOur inspiration was our love for travel and simple addictive games.\nWhat it does\nCombining a simple plane game with real flights data with real data from the skyscanner api, skybreak lets you accomplish your dreams by flying all across the globe. Starting from London, you can pick your flight. The price of the flight you take is taken away from your wallet and the distance covered by your flight is added to your score. A flight corresponds to a game and the longer you remain on flight without hitting a cloud or falling off screen, the more money you gain.\nThis game is a combination  of strategy in terms of picking the best flights and gaming skills in terms of making a flight last as long as possible. \nHow I built it\nWe built it using node.js to get the flights data from the skyscanner api and C# with unity to create the front-end of the game.\nChallenges I ran into\nGetting the distance between two airports required getting a database of airports with their locations and using the latitude and longitude took us some time. We also had to learn C# and unity during the project and set up a webserver for highscores.\nAccomplishments that I'm proud of\nCombining real world data with a simple game to make it fun and challenging.\nWhat I learned\nI learned C# and also how to use unity.\nWhat's next for Skybreak\nTake off in one hour!", 
    "project_name": "Skybreak", 
    "project_tags": [
      "c#", 
      "unity", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/skybreak"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nAs we become more attached to our machines, our ability to become isolated and depressed grows. When our team saw the power of Microsoft's emotion API, we saw an opportunity to fight that trend.\nWhat it does\nOur app presents the user with several funny gifs. After a second or two of display, we take a picture of the user's face and send it to Microsoft's API to gauge their response. By gathering this data over time, we can alert users when they begin to react less and less to originally amusing things, which could indicate mild depression.\nHow we built it\nThe app is composed of an express server and a mongodb backend. The pictures are taken on any built-in webcam.\nChallenges we ran into\nBrowsers understandably make it very hard for websites to access computer hardware. It took many iterations, but we eventually found an approach that works for all platforms we've tested.\nAccomplishments that we're proud of\nAs a team of mostly newbies, we're extremely proud of how we pulled together and built something significant out of technologies we'd never worked with before. \nWhat we learned\nFrom Git to Express, our whole team worked with new and interesting technologies. We learned a lot about programming and collaborative coding.\nWhat's next for Facial Response Tracker\nThe gifs need to be classified and some universal metrics need to be calculated. Measuring an individual's response only against their own history is prone to random fluctuation in short term moods and the quality of the gifs. We would also like to implement a feature that presents easy access to mental health resources to all and a community component that allows friends to support each other.", 
    "project_name": "Facial Response Tracker", 
    "project_tags": [
      "express.js", 
      "microsoft-project-oxford", 
      "mongodb"
    ], 
    "project_url": "https://devpost.com/software/facial-response-tracker"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nGarrelt is an ambitious hitchhiker! \nWhen going from London to Oxford it costs him a lot of money!\nThat's why Garrelt hitchhikers!\nGarrelt misses security, comfort and fun when traveling to his admired destination.\nWe build Hitchhacking to make hitchhiking great again!\nWhat it does\nHitchhacking connects millions of drivers with matching Hitchhikers.\nWe match the direction of the drivers route, with the admired direction of the Hitchhiker.\nBy using advanced similiarity matching, we prioritze a matching of people, who share the same interests.\nSpeech messages with each request help to keep an authentic environment.\nHow I built it\nWe build the app as an Android App in Java. The Backend is running on an Apache maschine only throug php scripts. The communication is realized over json. The database is a mysql database.\nChallenges I ran into\nWe had to advance the app's usability to make it comfortable for both participants use the app throughout a longer route. Additionally the driver shouldn't be distracted while driving. Keeping the app simple was a main aspect of the development. Moreover, the algorithm to find the correct direction of drivers without them having to type in a destination was a challenge and has still some room for improvement.\nAccomplishments that I'm proud of\nWe're proud of the simplicity of our API and the fact of using speech massages as a function to make both participant into contact.\nWhat I learned\nWe learned a lot about the work with gps targeted development and the small challenges when working in Android Studio.\nWhat's next for Hitchhacking\nWe will need to advance our algorithm for finding people with matching directions, to make it more functional in urban areas.\nWe would like to implement speech recoginition for having less interaction with the app through the driver.\nOur matching algorithm for common interest has some more room for improvement and should be implemented as a self learning one.", 
    "project_name": "Hitchhacking", 
    "project_tags": [
      "java", 
      "android-studio", 
      "php", 
      "mysql", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/hitchhacking"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nPeople don't always live where they work, but also don't want to spend too long on the train or in the car to get there. This is a problem we are now facing after graduation and finding jobs in new places. If you know two locations it is easy enough to query directly, but with hundreds of places within a reasonable distance, it is very difficult to work out the best options. Commute allows you to input your workplace, an amount of time you are willing to commute for and a method of transport. \nWhat it does\nGiven your work destination, choose how you would like to commute and the maximum amount of time you are willing to travel. Commute will show a map of potential places to live, with options to visualise layers of geographic data from ArcGIS OpenData in .geojson format.\nHow we built it\nWe aggregated data from a number of sources on UK locations in order to build a database of locations, names, population sizes and distances. This allowed us to filter the number of queries beign passed to the Google Maps Distance Matrix to improve loading times (and save requests to our API key!) After getting the travel time with Google, we then plotted the map on the front end with the Esri API and used their layers and OpenData to add contextual information.\nChallenges we faced\nFinding reliable data on place names in usable formats was difficult. We used a .csv file from GeoNames and an excel spreadsheet from a Government FOI request. Parsing this data and storing it in the database in an efficient way was one of the biggest challenges.\nAccomplishments we're proud of\nProducing a list of reasonable results in a reasonable time, for a genuine problem we have recently experienced. It was fun to see locations along the main train lines highlighted - also highlights the limitations of public transport in rural areas!\nWhat we learned\nNeither of us had much prior experience in javascript, so using the Esri API was a challenge but a rewarding one.\nWhat's next\nWe want to add a number of features - house price data particularly would make the tool much more useful to a wider audience. We would also like to find more data sources and allow the user to filter the results based on these. Finally, we'd like to add a second destination option, for couples who want to find somewhere central to live.", 
    "project_name": "Commute", 
    "project_tags": [
      "python", 
      "html", 
      "css", 
      "javascript", 
      "esri", 
      "google-maps", 
      "django"
    ], 
    "project_url": "https://devpost.com/software/commute"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nSkyScanner API inspired us to do something useful with it. Although there exist projects that use SkyScanner API to optimize travel path by the price or the distance, we wanted to optimize it by another variable that might be more meaningful to a person. That's why we came up with interest-based traveling salesman problem enabling end-users to find their optimal journey based on their interests, for example, museums, pubs or theaters. \nWhat it does\nThe webpage takes the user's list of interest and their location as a starting destination, along the dates and the preferred radius of travel. The output is a journey planned on the map based on their interests at the same time minimizing the prize with the SkyScanner.\nHow I built it\nThe website takes the user interests as an input along with a current location as a starting point for TSP problem. It uses Google Maps API to find the closest major cities within the specified radius and computes interest-related best cities to visit based on the average rating of the places on Google Maps. The cities are then passed onto SkyScanner API to search for the cheapest flights and routes. All combinations of these routes are passed onto the Traveling Salesmen Problem which computes the best path. The path and coordinates are then passed back to Esri API and displayed as a route on the map.\nChallenges I ran into\nWe had all the components working separately but with the limit of time we found it difficult to join them together smoothly. Because of this, a lot of details we wanted to include had to be omitted (for example displaying details of the route which is a very easy and logical next step), so that we could present the full product. Also, we used a lot of separate components, which was a challenge with respect to time.\nAccomplishments that I'm proud of\nWe all value the technologies that we learned, and above all the sense of achievement that came from fully working product that we achieved through teamwork\nWhat I learned\nthe use of various APIs, Django, how to interface between front-end and back-end\nWhat's next for HobbyHack - plan your journey based on your hobbies\nWe want to include more information about the journeys and most of all, add more variables to optimize for example weather information.", 
    "project_name": "HobbyHack", 
    "project_tags": [
      "python", 
      "javascript", 
      "google-maps", 
      "esri", 
      "skyscanner", 
      "json", 
      "django", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/hobbyhack-plan-your-journey-based-on-your-hobbies"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nBeing busy. And lazy.\nWhat it does\nWe used the Tesco API to search and suggest relevant items to people using sorting algorithms. This allows users to sort their items by price and nutritional content such as Calories, Protein, Fat or Sugar.\nChallenges we ran into\nSince we are dependent on Tesco's website, we faced problems when we realised we couldn't log into an account programmatically. We also encountered problems when trying to connect the front and back-ends.\nAccomplishments that we're proud of\nOur continued belief in the project even though everything was telling us to switch tactics.\nWhat we learned\n[Hichame] Using the networking feature of a browser to see the types of requests and content being sent.\n[Hichame] [Tolu ] Using the Tesco API.\n[All of us] Working on a tech project with complete strangers.\n[Chining] How to make a website from scratch\n[Eleni] My first hackathon was a great experience. My team help me to understand deeper the algorithmic thinking since I am beginner with programming. Also, I get familiar with languages that I have never worked with before.\nWhat's next for LazyShopper\nTracking the user over period of time in order to predict their future shopping habits. (The initial plan was to) Automate grocery shopping by allowing the user to select their favourite/common items (such as milk or chocolate). Create a spotify type page where users can just click a button and have recipe or mood based meals such such as \"Comfort Food\" or \"Mexican Night\".", 
    "project_name": "LazyShopper", 
    "project_tags": [
      "python", 
      "html", 
      "css", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/lazyshopper-2i7quy"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nI remember the first time Shu looked at me. He couldn t contain himself. 2 words popped out of his mouth. Those words will remain forever as our team name: Sparky Lashes. Jokes aside, our inspiration came from the fact that google trip was supposed to be a big hit, but it failed. Miserably. We tried to better it. We succeeded. Then we failed. Stay tuned for our story...\nWhat it does\nEverything, but what s supposed to actually do. Getting attractive locations? CHECKED. Getting distances? CHECKED. Routing? Double checked. Improving travel time? Well...we are all about sightseeing. We take our time. \nHow we built it\nSleepless hours, spilled blood and dead bugs are no far from the truth. Coming from a background involving hardcore C#-ing, C++ and Django, we thought about using none of those! 24 hours, of which 23 trying to understand what we were actually typing and one to write this epic story... Our salvation came in the form of API-s and open source. We will never forget our stranger friends. Not only we made the web, but it actually runs. \nChallenges we ran into\nCrazy words, blue screen due to 100+ tabs and sleep deprivation. Not to speak about each and single new line of code. At one point, Facebook refused our conversations. We thought about using git. But it was not hardcore enough. While we were trying to figure out javascript...we got into jquery.. We tried to run away from it, but we weren't fast enough. During morning hours, we had a moment of weakness in which we just collapsed. We woke up 15 minutes later, with no memory of our code. Of course, this did not stop us! We had to keep fighting! We had to prevail! Cheap version of red bull after cheap version of redbull and we were closer and closer to deploying our project. One thing we forgot. We forgot to learn Chinese (Microsoft Cognitive Services).. little did we know..\nAccomplishments that we're proud of\nWe can type jquery in 3 different ways. We added 3 more languages, including a bit of Chinese. We mumbled-jumbled our way thought this hack. We proved ourselves brave and limitless. We attended countless challenges, being involved in machine learning and competitive programming as well as in actually finishing our hack. We even won some points for our houses.\nWhat we learned\nExcept for the languages, to trust each other. I mean, I found it hard at first to let another pair of hands mess with my code. \nWhat's next for Accio Nimbus\nFixing the totally not existing bugs. Solving the NP-complete part of it. Some glory along the way. Voice integration for ease of access and semi-AI just to take a part of the challenge of deciding what to visit next. We consider ourselves community inclined, therefore we will provide a way of gathering parties for sightseeing. The users would be able to rate guides and propose trips. And, of course, our services will always have a free version.\nCarry on and accio Nimbus!", 
    "project_name": "Accio Nimbus", 
    "project_tags": [
      "html", 
      "javascript", 
      "jquery", 
      "gps", 
      "json", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/accio-nimbus"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nSmall and medium-sized remote enterprises may struggle to find the best locale to set up a meeting with employees based in various different countries.\nWhat it does\nIt provides the optimum location for people to congregate at minimum expense, which is of special importance for SME companies, for whom profit margins may be tight and who have no or small headquarters in few and disparate cities.\nHow we built it\nWe made use of genetic search and optimization algorithms.\nChallenges we ran into\nDefining the problem in a formal way using mathematic notation, in order to convert to a appropriate representation for the genetic algorithms.\nAccomplishments that we're proud of\nOur solution was designed to be easily scalable, such that meetings involving larger groups would be handled with minimum additional effort.\nWhat we learned\nApplication of genetic algorithms. The power of API as regards the quality of data available, is an influential element to the whole solution.\nWhat's next for Flock\nEnhancing it by introducing more parameters to the search function to increase to specificity and the power of the model and provide more detailed search results. Introducing hotel costs could give more accurate estimate of the true expense. The Skyscanner API has not the ability to show indirect routes between chosen airports, which limits the effectiveness of our model. Therefore the inclusion of this feature to the API could improve our solution.", 
    "project_name": "Flock", 
    "project_tags": [
      "python", 
      "skyscanner"
    ], 
    "project_url": "https://devpost.com/software/flock-2ca08q"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Our web service is integrated with the Google Calendar API and occasionally checks whether the user has some free time in the following month, and if they do, it tries to plan a trip for them using SkyScanner.", 
    "project_name": "Trippin", 
    "project_tags": [
      "node.js", 
      "google-calendar", 
      "skyscanner"
    ], 
    "project_url": "https://devpost.com/software/trippin-h2cwit"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nThe original plan was to integrate both the Skyscanner API with the Esri API to come up with a hack that would allow people to identify peak travel periods to different popular destinations around the world. This would be useful to those who are avoiding the crowd, and who are looking for the cheaper destinations.\nWhat it does\nIt generates a heatmap on the WebGL API, which identifies the destinations with lots of flights, using a self-written Gaussian function. It draws data from the Skyscanner API to do so.\nHow we built it\nThe original idea was to use the Esri API; however, there were technical issues with parsing the data into a geolocation database object that can be rendered by the layer, so we migrated to the WebGL API, feeding it with the JSON data drawn from the Skyscanner API.\nChallenges we ran into\nThe Esri API did not offer some of the functionalities that we needed, i.e. we could not process the data to be passed into the Layer, without having access to their server (which is a paid service). There were issues with making calls to the Skyscanner API, which was only resolved in the night. We had to manually write the gaussian blur for the heat map, before mapping it to the globe. After mapping it to the globe, we had to re-plot the points on the globe, without the data stacking.\nAccomplishments that we're proud of\nDespite the setbacks, we finally managed to complete the project, even though we had to start from scratch during the night.\nWhat we learned\nHow difficult it is to hack into APIs without proper documentation and few features, as well as the difficulty in deploying to AWS.\nWhat's next for jetblazinit\nMapping the data to history would allow people to plan their holidays in advance, so that they can make the best choices. We would also like to be able to write an algorithm that would identify the next best (nearest and cheapest) destination that people can look for as an alternative.", 
    "project_name": "jetblazinit", 
    "project_tags": [
      "skyscanner", 
      "three.js", 
      "javascript", 
      "webgl-earth"
    ], 
    "project_url": "https://devpost.com/software/jetblazinit"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nWe wanted to use the Microsoft Cognitive Services to build something.\nWhat it does\nIt allows you to create websites with your voice.\nYou say things like 'Set title, Oxford Hack' to add a title.\n'Add image of cookie', adds an image of a cookie.\nHow we built it\nWe used Django to build the server and parse the user's input.\nThe Bing search API provides us with the images to add to the \nChallenges we ran into\nWe needed to develop simple voice commands which reduce errors in detection while also being able to parse things on the backend.\nAccomplishments that we're proud of\nThe detection is very accurate and pretty fast as well. The webpages look very good and are take seconds to set up.\nWhat we learned\nDetecting and parsing voice commands.\nWhat's next for Voicer\nAdding different templates for the webpages so that the user has more customisation options.", 
    "project_name": "Voicer", 
    "project_tags": [
      "django", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/voicer"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nRemove all political posts from your social media", 
    "project_name": "Censor", 
    "project_tags": [
      "android"
    ], 
    "project_url": "https://devpost.com/software/censor"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nThe millions of suffering Americans stuck under Trump.\nWhat it does\nIt allows customers to insure themselves against the rule of a tyrannical political leader. If a customer insures themselves against the rule of a particular election candidate, then in the event that that candidate wins the upcoming election, TyrannyEscape auto books them a flight out of the country, using the SkyScanner API, within 12 hours.\nHow I built it\nBuilt by Mack - using python with the Skysanner API.\nChallenges I ran into\nFinding a way to scrape the internet for betting odds on upcoming election candidates.\nAccomplishments that I'm proud of\nIntegrating the SkyScanner API.\nWhat I learned\nThere aren't that many left wing world leaders right now...\nWhat's next for TyrannyEscape\nGoing global! And finding betting odds for election candidates further afield than Europe, so that TyrannyEscape can insure those with even more at stake in their leadership elections than us here in the West.", 
    "project_name": "TyrannyEscape", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/tyrannyescape"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nThe idea originally was to build an app for family and friends to fix up a vacation based on various factors. Didn't work, had to pivot a few hours before submission.\nWhat it does\nGoofs around\nHow we built it\nUsed Node for the server side logic, microsoft bot framework, Facebook messenger platform, \nChallenges we ran into\nDon't want to remember\nAccomplishments that we're proud of\nBuilt something that we won't be ashamed to submit\nWhat we learned\nSome vague idea about server side processing\nWhat's next for OxBot\ngit rm -r", 
    "project_name": "OxBot", 
    "project_tags": [
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/oxbot"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "", 
    "project_name": "Hacking is Magic", 
    "project_tags": [
      "arduino"
    ], 
    "project_url": "https://devpost.com/software/hacking-is-magic"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\n First ever hack, learning using code academy as I went along. Wanted to produce a website that allowed anybody to do a magic trick with very little practice. Work as a professional magician, and want to change my answer after I perform from, 'sorry, I can't tell you how I did that' to 'here's something that you can learn'.\nWhat it does\n It's an online magic trick. Read the instructions page first if you are using it. A person thinks of a card, or three people (one picks the colour, one picks the suit, one picks the value), they can change their mind as much as they want and you do not influence their decision. Whatever they say, when you click on the link a picture of their chosen card comes up. \nHow I built it\n I used the code academy tutorial to learn how to initially write the basic code structure in html and css. Then I learnt how to put in the appropriate images and links onto the page, and on each letter. Didn't know what software to put the code that I had written into, so I just coded into the text file on my wordpress website on a new page. Started by coming up with a set of words that could be split into 4 instructions, to represent the four suits, with 13 characters in each instruction (minus spaces) to represent the 13 potential card values in each suit. Then coded each individual letter to correspond to each playing card (this took the bulk of the time as I had to attach an image link to every letter). I then reformatted all the information so that it was in one line as a sentence and added a title. Created a new instructions page and added a link to that. Then coded in the pictures and links, as well as centre lining the text and making it look nice. Finally I added a link from the instructions to my website (not coded during the hackathon), because... why not right? \nChallenges I ran into\n The biggest challenge I faced was convincing myself to start learning to code, then it was ensuring that all of the code was formatted and the website looked nice. Coming up with the word combination was difficult, as was ensuring that the link looked as much like one single hyperlink as possible. \nAccomplishments that I'm proud of\n Finally got around to learning to code, and am now looking forward to working on many more exciting projects. Also proud to have come up with the idea and then gone on to execute it. Proud that it was all written in actual code rather than just editing the words on wordpress as I usually do with my website.\nWhat I learned\n How to use html/css. How to create headings, change font sizes, import images, add hyperlinks, add image hyperlinks, reformat code to become one sentence, work continuously for a few hours without procrastinating. \nWhat's next for Online Magic Trick - Amaze Your Friends\n Definitely going to design some more magic tricks that people can do for their friends using the platform. Hope to make them even better and far more difficult to figure out. Maybe also mix coding with some real life magic tricks. Also hope to do a psychology page where people can take part in experiments (eg. implicit association tests) to see if they have implicit biases and how they compare to the rest of the population.", 
    "project_name": "Online Magic Trick - Amaze Your Friends", 
    "project_tags": [
      "html", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/online-magic-trick-amaze-your-friends"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nWith increasing numbers of refugees coming across many countries, the importance of being able to access the emergency services at any point is vital.\nWhat it does\nThe site is a very light weight (<90KB) response in any language with the emergency service numbers for the area.\nHow I built it\nThe site runs a simple node.js backend for fetching the numbers and translating the strings, and it fetches all of the numbers from JSON.\nChallenges I ran into\nKeeping the load size low whilst ensuring it is clear what everything on the site does.\nAccomplishments that I'm proud of\nKeeping the total page size <100KB while still being useful\nWhat I learned\nWorking with AWS is more complicated than I original foresaw.\nWhat's next for Emergen-c\nRemoving the font-awesome dependency to half the further decrease the delivery size (~25KB after removal)", 
    "project_name": "Emergen-c", 
    "project_tags": [
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/emergen-c"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nIn our opinion, 9GAG transformed from a website which has really funny images, to a website which is full of disgusting or sad things. We decided to improve this, focus more on the quality of a meme website.\nWhat it does\nThe application can get images from these kind of websites, for now in the prototype it has just predefined images, and it can monitor the users reaction to images whenever they open one, by taking a picture of them with the webcam, and using the Cognitive Service API, we detect their happiness level. In the end, pictures get ordered according to the average happiness level registered from users reactions.\nHow I built it\nWe built it using just Java, and different libraries of it (eg. JavaFX).\nChallenges I ran into\nThe biggest challenge was to figure out what the binary image data actually means on the Microsoft API webpage, since no clear example was given.\nAccomplishments that I'm proud of\nWe are proud that in the end we make it to work, and also had the chance to use artificial intelligence in our project.\nWhat I learned\nWe learned a lot about Java, Java FX and different libraries.\nWhat's next for Emotion Fileter\nThe next step for Emotion filter is to be deployed in websites and work together with the database of images, to be able to sort them according to happiness.", 
    "project_name": "Emotion Filter", 
    "project_tags": [
      "java", 
      "excel", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/emotion-fileter"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nWe all use Note taking apps like Evernote or Google Keep (some of us use them pretty heavily), but AI/Machine Learning could make the experience more richer and user friendly.\nWhat it does\n\nUse NLP to understand queries to search through user's notes (DONE)\nUse AI to correct mistakes in notes (TODO)\nUse AI to automatically generate tags for notes for easy searching (TODO)\nUse AI to offer rich suggestions to improve the note (TODO)\nUse AI to extract useful information from the notes to offer summaries (TODO)\n\nHow I built it\nAndroid Studio and Project Oxford APIs\nChallenges I ran into\nMicrosoft's website isn't showing the subscription page where you can access subscription keys for other APIs, so not able to use the other API's at the moment\nWhat I learned\nMany things about AI, ML and NLP\nWhat's next for AINotes\nComplete this app, polish it and launch it for public next year!", 
    "project_name": "AINotes", 
    "project_tags": [
      "android", 
      "java", 
      "microsoft-project-oxford"
    ], 
    "project_url": "https://devpost.com/software/ainotes"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nOccasionally, we find ourselves tapping the wrong button on the relatively small software keyboard on our smartphones. Thus was born the idea of a new input for phones - a way of typing that would get rid of the typing aspect entirely by streamlining the process.\nWhat it does\nFineType allows the user to input text characters purely through the use of hand motions and without the use of an on-screen keyboard.\nHow we built it\nWe used Java and the Android Studio IDE to build FineType.\nChallenges we ran into\nWe found that the process of switching between groups of characters and between the characters inside each group a tedious process that kept bugging out for us. Eventually, the fix was found as a time delay for switching.\nAccomplishments that we're proud of\nWe're proud of the way we graphically represented to the user when they switched between the blocks of characters and which block they were on.\nWhat we learned\nWe learned how to access accelerometer readings from an Android phone, along with negating gravity in accelerometer equations. We also learned how to create a GUI interface in Android Studio, an IDE with which we had no experience at all for creating apps - in fact, we created our first ever mobile app here at OxfordHack.\nWhat's next for FineType\nFineType's next steps would be to smooth the user experience by reducing the amount of errors that come from unexpected diagonal movement, smoothing the amount of noise experienced by the app from random movement, and adding features like capitalization, spacing, and repeating characters in a row.", 
    "project_name": "FineType", 
    "project_tags": [
      "java", 
      "android-studio"
    ], 
    "project_url": "https://devpost.com/software/finetype"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nWe wanted to explore what can be achieved in terms of thought-based computer control using the Muse Headband.\nWhat it does\nOne can use the headband's accelerometer to control the cursor, but the thought pattern classification subsystem does not work very well, as it is very hard to collect clean training data without a pure lab environment (e.g. no distractions, etc.).\nWe also built a simple prototype of an interface which would allow a user to track how focused they are during their work. If someone were to, perhaps, spend a long time working without being productive, this app could provide insights into why this was the case: it would highlight cases when a user would have trouble focusing.\nHow we built it\nWe used Python and Ruby, as well as the Muse research tools. For the data analysis, we used Jupyter and scikit-learn. For the perfect UX and design, we leveraged Comic Sans MS\u2122 and a patented marquee implementation.\nChallenges we ran into\nIt's very difficult to analyze and classify traces of EEG activity in such a limited timeframe. Moreover, collecting clean data with no distractions is nearly impossible in hackathon conditions.\nAccomplishments that we're proud of\nWe collected quite a lot of data of people performing various activities while wearing the Muse headband. The accelerometer-based computer control interface also works quite well!\nWhat we learned\nEEG-powered human-computer interaction is possible, i.e., the signal does exist in the data. With appropriate training data collection and analysis, one could definitely build a real-time computer control system using EEG.\nWhat's next for We Use Muse\nWe would like to improve our data collection conditions, and build a more robust pipeline for the data cleaning.", 
    "project_name": "We Use Muse", 
    "project_tags": [
      "ruby", 
      "python", 
      "scikit-learn", 
      "muse"
    ], 
    "project_url": "https://devpost.com/software/we-use-muse"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nWe wanted to get a better understanding of the features of AWS and learn about how incoming traffic can be managed and routed across multiple machines\nWhat it does\nIt takes your remote assets and caches them on our high speed SSD backed AWS infrastructure\nHow I built it\nIt uses express to accept incoming traffic and caches the content it finds to disk.\nAccomplishments that I'm proud of\nIt auto scales and uses some really cool advanced AWS features\nWhat's next for Project Cambridge\nTidy up the code base and probably privatise it for my own use because it would be super expensive to run publically", 
    "project_name": "Project Cambridge", 
    "project_tags": [
      "express.js", 
      "node.js", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/project-cambridge"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "If your life was a movie, which would be the soundtrack of it? Tune my life is a platform which collects your Instagram photos and, after running computer vision on the photos, generates the perfect Spotify \nplaylist that matches with your photos' story.\nInspiration\nWe wanted to develop something using sentiment analysis. \nWhat it does\nTune my life collects your Instagram photos and, after running computer vision on the photos, generates the perfect Spotify playlist that matches with your photos' story.\nHow we built it\nWe built the platform with Python and used Flask for the server. The photos are obtained using the Instagram API and then processed with Microsoft cognitive services in order to apply the sentiment analysis and retrieve the data. Finally, the playlist is generated using the Spotify API according to parameters such as acousticness, danceability, loudness, tempo, balance, etc.\nChallenges we ran into\nAPI's restrictions (Pending approval of instagram to give public access), how to determine the music attributes from the parameters obtained when running cognitive analysis over the images, deploying to the server\nAccomplishments that we're proud of\ntl;dr -> It works!\nWe have used some technologies that we hadn't use before and the results are pretty accurate.\nWhat we learned\nHow to use Spotify's API, Instagram's and Microsoft cognitive services. Also we did some research related to the topic we discovered relations between feelings and music attributes.\nWhat's next for Tune my life\n\nGet instagram's approval and be able to make it public.\nUse the images captions to obtain more information about the emotions related to the picture.", 
    "project_name": "Tune my life", 
    "project_tags": [
      "python", 
      "flask", 
      "html5", 
      "javascript", 
      "css3", 
      "jquery", 
      "spotify"
    ], 
    "project_url": "https://devpost.com/software/tune-my-life"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "This is a game with a magic theme to fit the theme of the hackathon. In this game the character has to follow game hints that lead to the player answering the phone to a friend who sends information about the location of a portal to a magical world. The way 3d graphics engines work greatly interests me so for fun, instead of using a program like unity that does the 3d for you, for this project I aimed to create a 3d game using just JavaScript, jQuery, HTML, paint images and screenshots I would take of 3d objects.\n I created 3D objects using SkectchUp then screenshotted these scenery models from lots of different angles and used JavaScript and jQuery to control when these images were displayed to create a 3d game experience for the user. I also used Photoshop to make the images backgrounds transparent where appropriate. The game includes some third person scenes in which the players width and height is multiplied by scalar values based on its y-coordinate to create perspective and show when the player is close or far away. This scene also includes some quick first person moments which occur when an object of great importance to the games story appears and the user is able to view this item in first person. This was done to make sure the user sees this object up close and notices it. As the player opens the portal the world distorts a bit to empathise the magical powers of the portal. Magic dust also appears above the flashing portal. Once the portal is opened the magical world is all in first person. The player is transported to a magical castle which they can freely walk up and down one corridor of. The corridor appears clear at first but as soon as the player starts to walk an enchanted floating hat appears. \nWhen making the game I came across many challenges. One of these was that the number of screenshots needed to make a smooth running 3D game was too large. I had to compromise and limit the number of images used to a reasonable number. I also struggled with problems caused by code written for different stages of the game affecting thing in a part of the game they were not intended for. The solution to this was to give each stage of the game a boolean variable that tracks if it should have started running yet or not. This helped me keep track of which stage of the game the user was in and what code should and shouldn\u2019t run for this stage of the game. \nThe main thing I leant was how to make the 3d for the first person scene in the game (in the castle scene). In the future, to expand on the game I could make the game longer so that you can explore more of the castle.", 
    "project_name": "Portal to a Magical Castle Game", 
    "project_tags": [
      "javascript", 
      "jquery", 
      "html"
    ], 
    "project_url": "https://devpost.com/software/portal-to-a-magical-castle-game"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nGarrelt is an ambitious hitchhiker! \nWhen going from London to Oxford it costs him a lot of money!\nThat's why Garrelt hitchhikers!\nGarrelt misses security, comfort and fun when traveling to his admired destination.\nWe build Hitchhacking to make hitchhiking great again!\nWhat it does\nHitchhacking connects millions of drivers with matching Hitchhikers.\nWe match the direction of the drivers route, with the admired direction of the Hitchhiker.\nBy using advanced similiarity matching, we prioritze a matching of people, who share the same interests.\nSpeech messages with each request help to keep an authentic environment.\nHow I built it\nWe build the app as an Android App in Java. The Backend is running on an Apache maschine only throug php scripts. The communication is realized over json. The database is a mysql database.\nChallenges I ran into\nWe had to advance the app's usability to make it comfortable for both participants use the app throughout a longer route. Additionally the driver shouldn't be distracted while driving. Keeping the app simple was a main aspect of the development. Moreover, the algorithm to find the correct direction of drivers without them having to type in a destination was a challenge and has still some room for improvement.\nAccomplishments that I'm proud of\nWe're proud of the simplicity of our API and the fact of using speech massages as a function to make both participant into contact.\nWhat I learned\nWe learned a lot about the work with gps targeted development and the small challenges when working in Android Studio.\nWhat's next for Hitchhacking\nWe will need to advance our algorithm for finding people with matching directions, to make it more functional in urban areas.\nWe would like to implement speech recoginition for having less interaction with the app through the driver.\nOur matching algorithm for common interest has some more room for improvement and should be implemented as a self learning one.", 
    "project_name": "Hitchhacking", 
    "project_tags": [
      "java", 
      "android-studio", 
      "php", 
      "mysql", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/hitchhacking"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nPeople don't always live where they work, but also don't want to spend too long on the train or in the car to get there. This is a problem we are now facing after graduation and finding jobs in new places. If you know two locations it is easy enough to query directly, but with hundreds of places within a reasonable distance, it is very difficult to work out the best options. Commute allows you to input your workplace, an amount of time you are willing to commute for and a method of transport. \nWhat it does\nGiven your work destination, choose how you would like to commute and the maximum amount of time you are willing to travel. Commute will show a map of potential places to live, with options to visualise layers of geographic data from ArcGIS OpenData in .geojson format.\nHow we built it\nWe aggregated data from a number of sources on UK locations in order to build a database of locations, names, population sizes and distances. This allowed us to filter the number of queries beign passed to the Google Maps Distance Matrix to improve loading times (and save requests to our API key!) After getting the travel time with Google, we then plotted the map on the front end with the Esri API and used their layers and OpenData to add contextual information.\nChallenges we faced\nFinding reliable data on place names in usable formats was difficult. We used a .csv file from GeoNames and an excel spreadsheet from a Government FOI request. Parsing this data and storing it in the database in an efficient way was one of the biggest challenges.\nAccomplishments we're proud of\nProducing a list of reasonable results in a reasonable time, for a genuine problem we have recently experienced. It was fun to see locations along the main train lines highlighted - also highlights the limitations of public transport in rural areas!\nWhat we learned\nNeither of us had much prior experience in javascript, so using the Esri API was a challenge but a rewarding one.\nWhat's next\nWe want to add a number of features - house price data particularly would make the tool much more useful to a wider audience. We would also like to find more data sources and allow the user to filter the results based on these. Finally, we'd like to add a second destination option, for couples who want to find somewhere central to live.", 
    "project_name": "Commute", 
    "project_tags": [
      "python", 
      "html", 
      "css", 
      "javascript", 
      "esri", 
      "google-maps", 
      "django"
    ], 
    "project_url": "https://devpost.com/software/commute"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nSkyScanner API inspired us to do something useful with it. Although there exist projects that use SkyScanner API to optimize travel path by the price or the distance, we wanted to optimize it by another variable that might be more meaningful to a person. That's why we came up with interest-based traveling salesman problem enabling end-users to find their optimal journey based on their interests, for example, museums, pubs or theaters. \nWhat it does\nThe webpage takes the user's list of interest and their location as a starting destination, along the dates and the preferred radius of travel. The output is a journey planned on the map based on their interests at the same time minimizing the prize with the SkyScanner.\nHow I built it\nThe website takes the user interests as an input along with a current location as a starting point for TSP problem. It uses Google Maps API to find the closest major cities within the specified radius and computes interest-related best cities to visit based on the average rating of the places on Google Maps. The cities are then passed onto SkyScanner API to search for the cheapest flights and routes. All combinations of these routes are passed onto the Traveling Salesmen Problem which computes the best path. The path and coordinates are then passed back to Esri API and displayed as a route on the map.\nChallenges I ran into\nWe had all the components working separately but with the limit of time we found it difficult to join them together smoothly. Because of this, a lot of details we wanted to include had to be omitted (for example displaying details of the route which is a very easy and logical next step), so that we could present the full product. Also, we used a lot of separate components, which was a challenge with respect to time.\nAccomplishments that I'm proud of\nWe all value the technologies that we learned, and above all the sense of achievement that came from fully working product that we achieved through teamwork\nWhat I learned\nthe use of various APIs, Django, how to interface between front-end and back-end\nWhat's next for HobbyHack - plan your journey based on your hobbies\nWe want to include more information about the journeys and most of all, add more variables to optimize for example weather information.", 
    "project_name": "HobbyHack", 
    "project_tags": [
      "python", 
      "javascript", 
      "google-maps", 
      "esri", 
      "skyscanner", 
      "json", 
      "django", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/hobbyhack-plan-your-journey-based-on-your-hobbies"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nBeing busy. And lazy.\nWhat it does\nWe used the Tesco API to search and suggest relevant items to people using sorting algorithms. This allows users to sort their items by price and nutritional content such as Calories, Protein, Fat or Sugar.\nChallenges we ran into\nSince we are dependent on Tesco's website, we faced problems when we realised we couldn't log into an account programmatically. We also encountered problems when trying to connect the front and back-ends.\nAccomplishments that we're proud of\nOur continued belief in the project even though everything was telling us to switch tactics.\nWhat we learned\n[Hichame] Using the networking feature of a browser to see the types of requests and content being sent.\n[Hichame] [Tolu ] Using the Tesco API.\n[All of us] Working on a tech project with complete strangers.\n[Chining] How to make a website from scratch\n[Eleni] My first hackathon was a great experience. My team help me to understand deeper the algorithmic thinking since I am beginner with programming. Also, I get familiar with languages that I have never worked with before.\nWhat's next for LazyShopper\nTracking the user over period of time in order to predict their future shopping habits. (The initial plan was to) Automate grocery shopping by allowing the user to select their favourite/common items (such as milk or chocolate). Create a spotify type page where users can just click a button and have recipe or mood based meals such such as \"Comfort Food\" or \"Mexican Night\".", 
    "project_name": "LazyShopper", 
    "project_tags": [
      "python", 
      "html", 
      "css", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/lazyshopper-2i7quy"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nI remember the first time Shu looked at me. He couldn t contain himself. 2 words popped out of his mouth. Those words will remain forever as our team name: Sparky Lashes. Jokes aside, our inspiration came from the fact that google trip was supposed to be a big hit, but it failed. Miserably. We tried to better it. We succeeded. Then we failed. Stay tuned for our story...\nWhat it does\nEverything, but what s supposed to actually do. Getting attractive locations? CHECKED. Getting distances? CHECKED. Routing? Double checked. Improving travel time? Well...we are all about sightseeing. We take our time. \nHow we built it\nSleepless hours, spilled blood and dead bugs are no far from the truth. Coming from a background involving hardcore C#-ing, C++ and Django, we thought about using none of those! 24 hours, of which 23 trying to understand what we were actually typing and one to write this epic story... Our salvation came in the form of API-s and open source. We will never forget our stranger friends. Not only we made the web, but it actually runs. \nChallenges we ran into\nCrazy words, blue screen due to 100+ tabs and sleep deprivation. Not to speak about each and single new line of code. At one point, Facebook refused our conversations. We thought about using git. But it was not hardcore enough. While we were trying to figure out javascript...we got into jquery.. We tried to run away from it, but we weren't fast enough. During morning hours, we had a moment of weakness in which we just collapsed. We woke up 15 minutes later, with no memory of our code. Of course, this did not stop us! We had to keep fighting! We had to prevail! Cheap version of red bull after cheap version of redbull and we were closer and closer to deploying our project. One thing we forgot. We forgot to learn Chinese (Microsoft Cognitive Services).. little did we know..\nAccomplishments that we're proud of\nWe can type jquery in 3 different ways. We added 3 more languages, including a bit of Chinese. We mumbled-jumbled our way thought this hack. We proved ourselves brave and limitless. We attended countless challenges, being involved in machine learning and competitive programming as well as in actually finishing our hack. We even won some points for our houses.\nWhat we learned\nExcept for the languages, to trust each other. I mean, I found it hard at first to let another pair of hands mess with my code. \nWhat's next for Accio Nimbus\nFixing the totally not existing bugs. Solving the NP-complete part of it. Some glory along the way. Voice integration for ease of access and semi-AI just to take a part of the challenge of deciding what to visit next. We consider ourselves community inclined, therefore we will provide a way of gathering parties for sightseeing. The users would be able to rate guides and propose trips. And, of course, our services will always have a free version.\nCarry on and accio Nimbus!", 
    "project_name": "Accio Nimbus", 
    "project_tags": [
      "html", 
      "javascript", 
      "jquery", 
      "gps", 
      "json", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/accio-nimbus"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nSmall and medium-sized remote enterprises may struggle to find the best locale to set up a meeting with employees based in various different countries.\nWhat it does\nIt provides the optimum location for people to congregate at minimum expense, which is of special importance for SME companies, for whom profit margins may be tight and who have no or small headquarters in few and disparate cities.\nHow we built it\nWe made use of genetic search and optimization algorithms.\nChallenges we ran into\nDefining the problem in a formal way using mathematic notation, in order to convert to a appropriate representation for the genetic algorithms.\nAccomplishments that we're proud of\nOur solution was designed to be easily scalable, such that meetings involving larger groups would be handled with minimum additional effort.\nWhat we learned\nApplication of genetic algorithms. The power of API as regards the quality of data available, is an influential element to the whole solution.\nWhat's next for Flock\nEnhancing it by introducing more parameters to the search function to increase to specificity and the power of the model and provide more detailed search results. Introducing hotel costs could give more accurate estimate of the true expense. The Skyscanner API has not the ability to show indirect routes between chosen airports, which limits the effectiveness of our model. Therefore the inclusion of this feature to the API could improve our solution.", 
    "project_name": "Flock", 
    "project_tags": [
      "python", 
      "skyscanner"
    ], 
    "project_url": "https://devpost.com/software/flock-2ca08q"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Our web service is integrated with the Google Calendar API and occasionally checks whether the user has some free time in the following month, and if they do, it tries to plan a trip for them using SkyScanner.", 
    "project_name": "Trippin", 
    "project_tags": [
      "node.js", 
      "google-calendar", 
      "skyscanner"
    ], 
    "project_url": "https://devpost.com/software/trippin-h2cwit"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nThe original plan was to integrate both the Skyscanner API with the Esri API to come up with a hack that would allow people to identify peak travel periods to different popular destinations around the world. This would be useful to those who are avoiding the crowd, and who are looking for the cheaper destinations.\nWhat it does\nIt generates a heatmap on the WebGL API, which identifies the destinations with lots of flights, using a self-written Gaussian function. It draws data from the Skyscanner API to do so.\nHow we built it\nThe original idea was to use the Esri API; however, there were technical issues with parsing the data into a geolocation database object that can be rendered by the layer, so we migrated to the WebGL API, feeding it with the JSON data drawn from the Skyscanner API.\nChallenges we ran into\nThe Esri API did not offer some of the functionalities that we needed, i.e. we could not process the data to be passed into the Layer, without having access to their server (which is a paid service). There were issues with making calls to the Skyscanner API, which was only resolved in the night. We had to manually write the gaussian blur for the heat map, before mapping it to the globe. After mapping it to the globe, we had to re-plot the points on the globe, without the data stacking.\nAccomplishments that we're proud of\nDespite the setbacks, we finally managed to complete the project, even though we had to start from scratch during the night.\nWhat we learned\nHow difficult it is to hack into APIs without proper documentation and few features, as well as the difficulty in deploying to AWS.\nWhat's next for jetblazinit\nMapping the data to history would allow people to plan their holidays in advance, so that they can make the best choices. We would also like to be able to write an algorithm that would identify the next best (nearest and cheapest) destination that people can look for as an alternative.", 
    "project_name": "jetblazinit", 
    "project_tags": [
      "skyscanner", 
      "three.js", 
      "javascript", 
      "webgl-earth"
    ], 
    "project_url": "https://devpost.com/software/jetblazinit"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nWe wanted to use the Microsoft Cognitive Services to build something.\nWhat it does\nIt allows you to create websites with your voice.\nYou say things like 'Set title, Oxford Hack' to add a title.\n'Add image of cookie', adds an image of a cookie.\nHow we built it\nWe used Django to build the server and parse the user's input.\nThe Bing search API provides us with the images to add to the \nChallenges we ran into\nWe needed to develop simple voice commands which reduce errors in detection while also being able to parse things on the backend.\nAccomplishments that we're proud of\nThe detection is very accurate and pretty fast as well. The webpages look very good and are take seconds to set up.\nWhat we learned\nDetecting and parsing voice commands.\nWhat's next for Voicer\nAdding different templates for the webpages so that the user has more customisation options.", 
    "project_name": "Voicer", 
    "project_tags": [
      "django", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/voicer"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nRemove all political posts from your social media", 
    "project_name": "Censor", 
    "project_tags": [
      "android"
    ], 
    "project_url": "https://devpost.com/software/censor"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nThe millions of suffering Americans stuck under Trump.\nWhat it does\nIt allows customers to insure themselves against the rule of a tyrannical political leader. If a customer insures themselves against the rule of a particular election candidate, then in the event that that candidate wins the upcoming election, TyrannyEscape auto books them a flight out of the country, using the SkyScanner API, within 12 hours.\nHow I built it\nBuilt by Mack - using python with the Skysanner API.\nChallenges I ran into\nFinding a way to scrape the internet for betting odds on upcoming election candidates.\nAccomplishments that I'm proud of\nIntegrating the SkyScanner API.\nWhat I learned\nThere aren't that many left wing world leaders right now...\nWhat's next for TyrannyEscape\nGoing global! And finding betting odds for election candidates further afield than Europe, so that TyrannyEscape can insure those with even more at stake in their leadership elections than us here in the West.", 
    "project_name": "TyrannyEscape", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/tyrannyescape"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nThe idea originally was to build an app for family and friends to fix up a vacation based on various factors. Didn't work, had to pivot a few hours before submission.\nWhat it does\nGoofs around\nHow we built it\nUsed Node for the server side logic, microsoft bot framework, Facebook messenger platform, \nChallenges we ran into\nDon't want to remember\nAccomplishments that we're proud of\nBuilt something that we won't be ashamed to submit\nWhat we learned\nSome vague idea about server side processing\nWhat's next for OxBot\ngit rm -r", 
    "project_name": "OxBot", 
    "project_tags": [
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/oxbot"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "", 
    "project_name": "Hacking is Magic", 
    "project_tags": [
      "arduino"
    ], 
    "project_url": "https://devpost.com/software/hacking-is-magic"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\n First ever hack, learning using code academy as I went along. Wanted to produce a website that allowed anybody to do a magic trick with very little practice. Work as a professional magician, and want to change my answer after I perform from, 'sorry, I can't tell you how I did that' to 'here's something that you can learn'.\nWhat it does\n It's an online magic trick. Read the instructions page first if you are using it. A person thinks of a card, or three people (one picks the colour, one picks the suit, one picks the value), they can change their mind as much as they want and you do not influence their decision. Whatever they say, when you click on the link a picture of their chosen card comes up. \nHow I built it\n I used the code academy tutorial to learn how to initially write the basic code structure in html and css. Then I learnt how to put in the appropriate images and links onto the page, and on each letter. Didn't know what software to put the code that I had written into, so I just coded into the text file on my wordpress website on a new page. Started by coming up with a set of words that could be split into 4 instructions, to represent the four suits, with 13 characters in each instruction (minus spaces) to represent the 13 potential card values in each suit. Then coded each individual letter to correspond to each playing card (this took the bulk of the time as I had to attach an image link to every letter). I then reformatted all the information so that it was in one line as a sentence and added a title. Created a new instructions page and added a link to that. Then coded in the pictures and links, as well as centre lining the text and making it look nice. Finally I added a link from the instructions to my website (not coded during the hackathon), because... why not right? \nChallenges I ran into\n The biggest challenge I faced was convincing myself to start learning to code, then it was ensuring that all of the code was formatted and the website looked nice. Coming up with the word combination was difficult, as was ensuring that the link looked as much like one single hyperlink as possible. \nAccomplishments that I'm proud of\n Finally got around to learning to code, and am now looking forward to working on many more exciting projects. Also proud to have come up with the idea and then gone on to execute it. Proud that it was all written in actual code rather than just editing the words on wordpress as I usually do with my website.\nWhat I learned\n How to use html/css. How to create headings, change font sizes, import images, add hyperlinks, add image hyperlinks, reformat code to become one sentence, work continuously for a few hours without procrastinating. \nWhat's next for Online Magic Trick - Amaze Your Friends\n Definitely going to design some more magic tricks that people can do for their friends using the platform. Hope to make them even better and far more difficult to figure out. Maybe also mix coding with some real life magic tricks. Also hope to do a psychology page where people can take part in experiments (eg. implicit association tests) to see if they have implicit biases and how they compare to the rest of the population.", 
    "project_name": "Online Magic Trick - Amaze Your Friends", 
    "project_tags": [
      "html", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/online-magic-trick-amaze-your-friends"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nWith increasing numbers of refugees coming across many countries, the importance of being able to access the emergency services at any point is vital.\nWhat it does\nThe site is a very light weight (<90KB) response in any language with the emergency service numbers for the area.\nHow I built it\nThe site runs a simple node.js backend for fetching the numbers and translating the strings, and it fetches all of the numbers from JSON.\nChallenges I ran into\nKeeping the load size low whilst ensuring it is clear what everything on the site does.\nAccomplishments that I'm proud of\nKeeping the total page size <100KB while still being useful\nWhat I learned\nWorking with AWS is more complicated than I original foresaw.\nWhat's next for Emergen-c\nRemoving the font-awesome dependency to half the further decrease the delivery size (~25KB after removal)", 
    "project_name": "Emergen-c", 
    "project_tags": [
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/emergen-c"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nIn our opinion, 9GAG transformed from a website which has really funny images, to a website which is full of disgusting or sad things. We decided to improve this, focus more on the quality of a meme website.\nWhat it does\nThe application can get images from these kind of websites, for now in the prototype it has just predefined images, and it can monitor the users reaction to images whenever they open one, by taking a picture of them with the webcam, and using the Cognitive Service API, we detect their happiness level. In the end, pictures get ordered according to the average happiness level registered from users reactions.\nHow I built it\nWe built it using just Java, and different libraries of it (eg. JavaFX).\nChallenges I ran into\nThe biggest challenge was to figure out what the binary image data actually means on the Microsoft API webpage, since no clear example was given.\nAccomplishments that I'm proud of\nWe are proud that in the end we make it to work, and also had the chance to use artificial intelligence in our project.\nWhat I learned\nWe learned a lot about Java, Java FX and different libraries.\nWhat's next for Emotion Fileter\nThe next step for Emotion filter is to be deployed in websites and work together with the database of images, to be able to sort them according to happiness.", 
    "project_name": "Emotion Filter", 
    "project_tags": [
      "java", 
      "excel", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/emotion-fileter"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nWe all use Note taking apps like Evernote or Google Keep (some of us use them pretty heavily), but AI/Machine Learning could make the experience more richer and user friendly.\nWhat it does\n\nUse NLP to understand queries to search through user's notes (DONE)\nUse AI to correct mistakes in notes (TODO)\nUse AI to automatically generate tags for notes for easy searching (TODO)\nUse AI to offer rich suggestions to improve the note (TODO)\nUse AI to extract useful information from the notes to offer summaries (TODO)\n\nHow I built it\nAndroid Studio and Project Oxford APIs\nChallenges I ran into\nMicrosoft's website isn't showing the subscription page where you can access subscription keys for other APIs, so not able to use the other API's at the moment\nWhat I learned\nMany things about AI, ML and NLP\nWhat's next for AINotes\nComplete this app, polish it and launch it for public next year!", 
    "project_name": "AINotes", 
    "project_tags": [
      "android", 
      "java", 
      "microsoft-project-oxford"
    ], 
    "project_url": "https://devpost.com/software/ainotes"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nOccasionally, we find ourselves tapping the wrong button on the relatively small software keyboard on our smartphones. Thus was born the idea of a new input for phones - a way of typing that would get rid of the typing aspect entirely by streamlining the process.\nWhat it does\nFineType allows the user to input text characters purely through the use of hand motions and without the use of an on-screen keyboard.\nHow we built it\nWe used Java and the Android Studio IDE to build FineType.\nChallenges we ran into\nWe found that the process of switching between groups of characters and between the characters inside each group a tedious process that kept bugging out for us. Eventually, the fix was found as a time delay for switching.\nAccomplishments that we're proud of\nWe're proud of the way we graphically represented to the user when they switched between the blocks of characters and which block they were on.\nWhat we learned\nWe learned how to access accelerometer readings from an Android phone, along with negating gravity in accelerometer equations. We also learned how to create a GUI interface in Android Studio, an IDE with which we had no experience at all for creating apps - in fact, we created our first ever mobile app here at OxfordHack.\nWhat's next for FineType\nFineType's next steps would be to smooth the user experience by reducing the amount of errors that come from unexpected diagonal movement, smoothing the amount of noise experienced by the app from random movement, and adding features like capitalization, spacing, and repeating characters in a row.", 
    "project_name": "FineType", 
    "project_tags": [
      "java", 
      "android-studio"
    ], 
    "project_url": "https://devpost.com/software/finetype"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nWe wanted to explore what can be achieved in terms of thought-based computer control using the Muse Headband.\nWhat it does\nOne can use the headband's accelerometer to control the cursor, but the thought pattern classification subsystem does not work very well, as it is very hard to collect clean training data without a pure lab environment (e.g. no distractions, etc.).\nWe also built a simple prototype of an interface which would allow a user to track how focused they are during their work. If someone were to, perhaps, spend a long time working without being productive, this app could provide insights into why this was the case: it would highlight cases when a user would have trouble focusing.\nHow we built it\nWe used Python and Ruby, as well as the Muse research tools. For the data analysis, we used Jupyter and scikit-learn. For the perfect UX and design, we leveraged Comic Sans MS\u2122 and a patented marquee implementation.\nChallenges we ran into\nIt's very difficult to analyze and classify traces of EEG activity in such a limited timeframe. Moreover, collecting clean data with no distractions is nearly impossible in hackathon conditions.\nAccomplishments that we're proud of\nWe collected quite a lot of data of people performing various activities while wearing the Muse headband. The accelerometer-based computer control interface also works quite well!\nWhat we learned\nEEG-powered human-computer interaction is possible, i.e., the signal does exist in the data. With appropriate training data collection and analysis, one could definitely build a real-time computer control system using EEG.\nWhat's next for We Use Muse\nWe would like to improve our data collection conditions, and build a more robust pipeline for the data cleaning.", 
    "project_name": "We Use Muse", 
    "project_tags": [
      "ruby", 
      "python", 
      "scikit-learn", 
      "muse"
    ], 
    "project_url": "https://devpost.com/software/we-use-muse"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "Inspiration\nWe wanted to get a better understanding of the features of AWS and learn about how incoming traffic can be managed and routed across multiple machines\nWhat it does\nIt takes your remote assets and caches them on our high speed SSD backed AWS infrastructure\nHow I built it\nIt uses express to accept incoming traffic and caches the content it finds to disk.\nAccomplishments that I'm proud of\nIt auto scales and uses some really cool advanced AWS features\nWhat's next for Project Cambridge\nTidy up the code base and probably privatise it for my own use because it would be super expensive to run publically", 
    "project_name": "Project Cambridge", 
    "project_tags": [
      "express.js", 
      "node.js", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/project-cambridge"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "If your life was a movie, which would be the soundtrack of it? Tune my life is a platform which collects your Instagram photos and, after running computer vision on the photos, generates the perfect Spotify \nplaylist that matches with your photos' story.\nInspiration\nWe wanted to develop something using sentiment analysis. \nWhat it does\nTune my life collects your Instagram photos and, after running computer vision on the photos, generates the perfect Spotify playlist that matches with your photos' story.\nHow we built it\nWe built the platform with Python and used Flask for the server. The photos are obtained using the Instagram API and then processed with Microsoft cognitive services in order to apply the sentiment analysis and retrieve the data. Finally, the playlist is generated using the Spotify API according to parameters such as acousticness, danceability, loudness, tempo, balance, etc.\nChallenges we ran into\nAPI's restrictions (Pending approval of instagram to give public access), how to determine the music attributes from the parameters obtained when running cognitive analysis over the images, deploying to the server\nAccomplishments that we're proud of\ntl;dr -> It works!\nWe have used some technologies that we hadn't use before and the results are pretty accurate.\nWhat we learned\nHow to use Spotify's API, Instagram's and Microsoft cognitive services. Also we did some research related to the topic we discovered relations between feelings and music attributes.\nWhat's next for Tune my life\n\nGet instagram's approval and be able to make it public.\nUse the images captions to obtain more information about the emotions related to the picture.", 
    "project_name": "Tune my life", 
    "project_tags": [
      "python", 
      "flask", 
      "html5", 
      "javascript", 
      "css3", 
      "jquery", 
      "spotify"
    ], 
    "project_url": "https://devpost.com/software/tune-my-life"
  }, 
  {
    "hackathon_name": "OxfordHack", 
    "project_description": "This is a game with a magic theme to fit the theme of the hackathon. In this game the character has to follow game hints that lead to the player answering the phone to a friend who sends information about the location of a portal to a magical world. The way 3d graphics engines work greatly interests me so for fun, instead of using a program like unity that does the 3d for you, for this project I aimed to create a 3d game using just JavaScript, jQuery, HTML, paint images and screenshots I would take of 3d objects.\n I created 3D objects using SkectchUp then screenshotted these scenery models from lots of different angles and used JavaScript and jQuery to control when these images were displayed to create a 3d game experience for the user. I also used Photoshop to make the images backgrounds transparent where appropriate. The game includes some third person scenes in which the players width and height is multiplied by scalar values based on its y-coordinate to create perspective and show when the player is close or far away. This scene also includes some quick first person moments which occur when an object of great importance to the games story appears and the user is able to view this item in first person. This was done to make sure the user sees this object up close and notices it. As the player opens the portal the world distorts a bit to empathise the magical powers of the portal. Magic dust also appears above the flashing portal. Once the portal is opened the magical world is all in first person. The player is transported to a magical castle which they can freely walk up and down one corridor of. The corridor appears clear at first but as soon as the player starts to walk an enchanted floating hat appears. \nWhen making the game I came across many challenges. One of these was that the number of screenshots needed to make a smooth running 3D game was too large. I had to compromise and limit the number of images used to a reasonable number. I also struggled with problems caused by code written for different stages of the game affecting thing in a part of the game they were not intended for. The solution to this was to give each stage of the game a boolean variable that tracks if it should have started running yet or not. This helped me keep track of which stage of the game the user was in and what code should and shouldn\u2019t run for this stage of the game. \nThe main thing I leant was how to make the 3d for the first person scene in the game (in the castle scene). In the future, to expand on the game I could make the game longer so that you can explore more of the castle.", 
    "project_name": "Portal to a Magical Castle Game", 
    "project_tags": [
      "javascript", 
      "jquery", 
      "html"
    ], 
    "project_url": "https://devpost.com/software/portal-to-a-magical-castle-game"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\n\nLoneliness is widespread - recent research (M. Barker, D. Clarke and T. Cox) shows that loneliness is a chronic problem for 17% of students in Higher Education: i.e. in a university of 10,000 students, 1700 of them may well be suffering long-lasting feelings of loneliness. \nhttp://www.lboro.ac.uk/services/cds/counselling/common-problems/loneliness/\n\nWhat it does\nUser can either join or create new social meetup with others to do activities together like eating, studying or sports.\nAfter meeting up the app lets users exchange all contact information using NFC, so all it takes is just putting both phones close to each other. \nHow we built it\nUsing geolocalization and Estimote Beacons we built an Android app, that tries to tackle the problem of loneliness among students. We have used Amazon AWS to host our Node.js server (because node.js is the best dev language out there #jokesFromThePast #MLHSpring2015). We utilized Google Maps API for Android to show the user's current location and the events. \nWhat's next for StudentMag.net\nTap Tap Technology startup.", 
    "project_name": "StudentMag.net || TapTap Technology", 
    "project_tags": [
      "java", 
      "android", 
      "javascript", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/studentmag-net"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nThe idea arose at the Great Uni Hackathon 2016. The challenge announced by Noma was to create a solution to the following problem:\n\nHow do we help a potential occupier understand size and available space options in a building without physically \ntaking them there?\n\nWe began with the end user in mind. Who would actually be using this product?\nThe operator is going to be the agencies trying to let the spaces in the buildings. The user would be anyone interested in occupying the building. We do not make assumptions about the technical abilities of either of these users. Hence we needed to devise something which was intuitive to use, but not too difficult to set up. Virtual reality is one option, as it allows the potential occupier to 'walk' around the office, and get a real feel for the size.\nWe couldn't use an Oculus Rift. Here's why:\n\nIt requires a computer with exceptional graphics ability\nIt requires someone with technical knowledge to set up\nIt is relatively expensive\nThe wires can be very cumbersome\n\nWe decided to go instead with the Google Cardboard:\n\nIt uses a phone. Most people in business have a phone capable of creating VR scenes.\nThe setup is minimal. You launch an app and the experience is setup\nGoogle Cardboard costs \u00a35 -- A more comfortable Homido costs \u00a350.\n\nWhat it does\nThere are two parts to the system, the website, and the mobile application.\nThe Website\nThe Website is for use by the operator - the building space retailer. It provides a very simple interface which allows the user to draw out the scene, and then see a very basic visualisation of how the scene might look in three dimensions. It provides options for visualising the scene, clearing any mistakes, and sending the data over to the mobile application.\nThe Application\nThe mobile application was built for Android, and allowed the display to be configured for Virtual Reality. With simplicity in mind, the user only needs to launch the app, request the data from the website with a simple click, then put the phone in the headset to have a look around.\nHow we built it\nThe Website\nThe website was developed with the standard suite of web languages: HTML, CSS and JavaScript. For the CSS, we used Bootstrap to ensure that there was a consistent style guide, and to make the webpage pseudo-responsive. For the 3D modelling and display, we used three.js to provide a JavaScript wrapper for OpenGL. We also used jQuery to send AJAX requests to build the API.\nWe took the following approach to building the website:\n\nDesign and create the layout\nHave the 3D visualisation work for a fake input matrix\nCreate a grid matrix to feed into the visualisation\nCreate the API which can then be read by the mobile application\n\nThe Application\nThe application was build with Unity, which provides tools to create Virtual Reality scenes. The application connected to the API and downloaded a matrix representing the geometry of the space. It then goes through the matrix and procedurally generates the space. The user is then able to move around the scene by using the phone's gyrometer, and by performing different actions.\nChallenges we ran into\n\nDeserialising JSON in Unity\nSetting up the Unity development environment\nDemoing what would be seen by the person using VR. Manchester Metropolitan university blocked port 8888 meaning that screen mirroring from phone to laptop was made impossible.\n\nAccomplishments that we're proud of\n\nFor two of the four team members, this was their first Hackathon\nNobody in the team knew how to work with unity or Virtual Reality before the project started\nWe managed to create everything that we had planned for\n\nWhat we learned\n\nUnity and developing for virtual reality\nGit and Collaborative Programming (including Pair Programming)\nHow to create an API between a website and an application\n\nWhat's next for VSpace\nWho knows? :)", 
    "project_name": "VSpace", 
    "project_tags": [
      "unity", 
      "html5", 
      "css3", 
      "javascript", 
      "jquery", 
      "php5", 
      "apache", 
      "three.js"
    ], 
    "project_url": "https://devpost.com/software/vspace"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "", 
    "project_name": "Wimphony", 
    "project_tags": [
      "android", 
      "flask", 
      "amazon-web-services", 
      "postgresql", 
      "unity", 
      "google-cardboard", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/wimphony"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nDaily insights of a troubled student's life\nWhat it does\nStudent Black Market connects students from all across the country in order to help them trade objects or services they are interested in. Think large: you have a deadline the next day and have no idea whatsoever how to solve it or no one to ask for help. With Student Black Market you can get help in no time from peers from every corner of the United Kingdom. Need a new desk or books your teacher asked for? You can trade with anyone on this easy-to-use and accessible platform.\nHow I built it\nUsing Django for the back-end and HTML/CSS for front-end\nChallenges I ran into\nA lot of debugging due to using Python and connecting the front-end to the back-end took quite some time. Also, uploading photos to a database proved quite difficult to do\nAccomplishments that I'm proud of\nWe finished the whole app as we fully planned it\nWhat I learned\nWe learned a few tricks and workarounds in Django\nWhat's next for StudentBlackMarket\nWe'll implement a chat and buy system for the app in order to help connect the students", 
    "project_name": "StudentBlackMarket", 
    "project_tags": [
      "css", 
      "html", 
      "javascript", 
      "python", 
      "django"
    ], 
    "project_url": "https://devpost.com/software/studentblackmarket-6l18e5"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nThis was directed at the Barclays Challenge \"Hack to half your worries\", which aims to help students at university in some way. Inspiration came from Sam out of personal need.\nWhat it does/is supposed to do\nSo far the app imports your Google Calendar timetable. We intended it to also ask for your preferences when it comes to study time (hours per week, subjects per day, etc.). The email addresses of your lecturers for each subject would also be saved and your location mapped whenever a scheduled lecture begins. The app will send an email to your lecturer on your behalf if you're not where you're supposed to be at that time with a random message, saying how silly you are, which is hopefully an incentive to come.\nHow we built it\nAfter getting Android Studio to work, we tried to figure out the Google Calendar API and Android programming in general. This was difficult unfortunately, given our rusty knowledge of Java. We used a virtual machine to test the app.\nChallenges we ran into\nNone of us had ever programmed for Android before, and it took a while to download the API. The app right now is still more of a proof of concept.\nWhat we learned\nWe learned that developing for Android isn't as simple as you think. We're more eager than ever to learn new technologies and technical skills in our own time. Being our first Hackathon, we burned out pretty quickly and found it hard to work past the early morning hours. Even though things didn't quite go to plan, our team spirit has never been stronger.\nWhat's next for Studuler - Stu[dent] Sche[duler]\nOnce we get a better grasp of Android app development, we expand the app to its full potential.", 
    "project_name": "Studuler - Stu[dent] [Sche]duler", 
    "project_tags": [
      "android-studio", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/studuler-stu-dent-sche-duler"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nMaking this tool to avoid people getting bad social experiences. We believe that online conversations can cause a person to prove the same feelings of a real one.\nWhat it does\nProves out our concept\nHow we built it\nSweat and energy drinks\nChallenges we ran into\nLearning everything, come to term with our lack of skill\nAccomplishments that we're proud of\nWe did not give up until the bitter end\nWhat we learned\nDeveloping's hard\nWhat's next for Harassment Blocker\nMake it great again", 
    "project_name": "Harassment Blocker", 
    "project_tags": [
      "javascript", 
      "css3", 
      "html", 
      "json", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/harassment-blocker"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nme \nWhat it does\nme\nHow I built it\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for Make GreatUniHack Great Again", 
    "project_name": "Make GreatUniHack Great Again", 
    "project_tags": [
      "java", 
      "scala", 
      "ruby"
    ], 
    "project_url": "https://devpost.com/software/make-greatunihack-great-again"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nWireless amp systems are really cool and convenient, but they're also crazy expensive. I thought I'd really like one but there was no way I could afford a professional one, so what other option did I have but to make my own?! After recently seeing a talk about the Web Audio API at a conference, I really wanted to try it out, so I thought I would!\nWhat it does\nUsing an iRig (or some other device/cable) you plug your guitar into your phone and open up the 'play' page of amp in a browser. Then open the 'listen' page on another device and you'll be able to hear the amplified guitar playing - no wires between the two!\nHow I built it\nIt uses the Web Audio API to get the input from the guitar, which effectively acts like a microphone when plugged into the phone. It then uses Socket.io-p2p to stream the audio via WebRTC to the 'listen' page. The Node.js server is there only to serve the static pages and to facilitate the handshaking of the p2p WebRTC connection between the 'play' and 'listen' pages.\nChallenges I ran into\nThe Web Audio API is still under active development (read: everybody is still arguing about how it should work), and so is WebRTC. Having previously used Socket.io many times, I thought it would be a good idea to use their p2p module to stream the audio. In the end it worked out okay, but the documentation was a bit rubbish.\nAnother major issue is the latency. When running the 'play' and 'listen' clients on the same machine, the latency is manageable, but over the network it's too much to be able to play guitar. This does somewhat invalidate this entire hack, but please ignore that fact.\nAccomplishments that I'm proud of\nI managed to get Socket.io-p2p working, something that as far as I can work out, not that many people have done. It ended up being a great wrapper for WebRTC, but the documentation really needs work. I've started on making an example of how to do media streaming over it, which I plan to submit a pull request for as this is something totally undocumented as of right now.\nWhat I learned\nWebRTC is pretty cool, and definitely something to look out for in the future. Same goes for the Web Audio API. Good documentation is also crazy important (but definitely already knew this).\nWhat's next for amp\nI'd really like to look into adding some traditional-style guitar effects (distortion, etc). Reducing the latency is probably top of the list for now though. Not entirely sure how I can do that!", 
    "project_name": "amp", 
    "project_tags": [
      "node.js", 
      "javascript", 
      "webrtc"
    ], 
    "project_url": "https://devpost.com/software/amp"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nAston Hack had their animal themed hack last week and we decided to carry on the theme with bees\nWhat it does\nIt's a game where you play as a bee\nHow I built it\nwe used Unity to build the game \nChallenges I ran into\nwe didn't have anyone who could do 3D modelling so had to make assets without experience and had to learn a lot of Unity syntax to be able to achieve our aims\nAccomplishments that I'm proud of\n10/10 flower modelling, working game in 3D \nWhat I learned\nUnity3D, some 3D modelling \nWhat's next for tobeeornottobee\nonline multiplayer", 
    "project_name": "tobeeornottobee", 
    "project_tags": [
      "c#", 
      "unity"
    ], 
    "project_url": "https://devpost.com/software/tobeeornottobee"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nWe got our inspiration for building a room from the visualising techniques used in virtual reality games.\nWhat it does\nIt creates a walkable 3D room based on the dimensions provided by the user and allows him to place different objects in it for size reference.\nHow we built it\nWe used the Unity-SDK.\nChallenges we ran into\nCreating the room based on the custom inputs of the user.\nAccomplishments that we're proud of\nWriting our first 3D-Application.\nWhat we learned\nUsing Unity to create simple 3D-Applications.\nWhat's next for RoomSimulator2016\nIt would be fun to add a wider range of objects and apply physics to them.", 
    "project_name": "RoomSimulator2016", 
    "project_tags": [
      "unity"
    ], 
    "project_url": "https://devpost.com/software/roomsimulator2016-t9v4xu"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nKatie run's the Computing Society at Salford University. Every week we have the same problem, a panic on Sunday as we realise we have nothing for next week. Every year we have to change hands, new people come in as old ones go and the newbies are left not knowing what needs to be done and what has already been done.\nWhat it does\nOur hack, CSSocUK allows not only previous committees to help the newbies but all societies in the UK. It allows societies to message each other, share talks, share opinions on guest lectures and trips. Allowing societies to ask for help from other societies, get lecture materials such as intro to git, short courses and more.\nHow we built it\nWe built out hack in PHP using Laravel, and MetroUI for the front end\nChallenges we ran into\n1 member of our team had never done an all nighter and did not know Laravel. We had 2 people who were somewhat familiar, but one was used to Laravel 5 and another hadn't used it in months. In addition to this we did not have a designer meaning our design and database took far longer than expected.\nAccomplishments that we're proud of\nIt works.\nWhat we learned\nWe all picked up some new web dev skills, but mostly we learned where we still need to improve\nWhat's next for CSSocUK\nWe'd like to continue it in an open source way allowing our societies and others to contribute to modules that they think they would find interesting. In works are modules for a ticketing system, offering advice for common problems.", 
    "project_name": "CSSocUK", 
    "project_tags": [
      "php", 
      "laravel", 
      "css", 
      "html", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/cssocuk"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nwe had an engduino\nWhat it does\ndetects movement during sleep\nHow we built it\nwe used Arduino IDE to get the motion from the sensors and then using processing we generated a webpage with the registered data\nChallenges we ran into\nsending the collected data to the webpage\nAccomplishments that we're proud of\nwe manged to make the engduino make the difference between basic movement and ac\nWhat we learned\nusing an engduino and generating a web page using Processing\nWhat's next for RandomSleepingMovement\nMake it wireless!", 
    "project_name": "RandomSleepingMovement", 
    "project_tags": [
      "c", 
      "java", 
      "processing", 
      "arduino"
    ], 
    "project_url": "https://devpost.com/software/randomsleepingmovement"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nAfter observing a company with a lot of data from within, we noticed that data is REEEAAAALLLY valuable. Then we also remembered that having money is pretty neat and that we as students would probably like some more of it.\nWhat it does\nHow we built it\nChallenges we ran into\nAccomplishments that we're proud of\nWhat we learned\nWhat's next for Total Sellout", 
    "project_name": "Total Sellout", 
    "project_tags": [
      "node.js", 
      "html5", 
      "javascript", 
      "css", 
      "mongodb", 
      "ocr-web-service", 
      "twilio"
    ], 
    "project_url": "https://devpost.com/software/total-sellout"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nI spend more money than i should\nWhat it does\nIt estimates the rough amount of money you'll spend at the end of the month based on different questions and habits that you embrace. Whenever the cap is reached , it makes suggestions to cut down the most unsignificant expenses.\nHow I built it\nUsing android-studio\nChallenges we ran into\nBuilding the whole app\nAccomplishments that we're proud of\nLearned how to use the basic commands in android-studio along with managing your own time whenever an error pops-up , see how to intent activities and different use various rules and tags.\nWhat we learned\nCreating buttons, progress bars, radio buttons.\nWhat's next for Expenses Manager\nMaybe the app will be more accurate and try to make suggestions based on some certain products' prices and discounts, linked with supermarkets' databases", 
    "project_name": "Expenses Manager", 
    "project_tags": [
      "android-studio"
    ], 
    "project_url": "https://devpost.com/software/expenses-manager"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nThe need of small businesses and start-ups to showcase themselves\nWhat it does\nIt offers start-ups ups the chance to make their products known to possible investors and shows the interested investors a predicted profit rate.\nHow I built it\nIt uses a complex combination of JavaScript, HTML and CSS\nChallenges I ran into\nImplementing the machine learning algorithm in JavaScript.\nWhat I learned\nImplementing\nWhat's next for Mind the StartUP\nExpanding and improving our platform.", 
    "project_name": "Mind the StartUP", 
    "project_tags": [
      "html", 
      "javascript", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/startup-and-go"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nI wanted to create a mini game and this was my first idea\nWhat it does\na player can chose one of the three chooises \"rock paper or scissors\" and the bot will choose one randomly.\nHow I built it\nI built with simple if statements and I used and graphical user interface extanssion.\nChallenges I ran into\nGUI for the game.\nAccomplishments that I'm proud of\ntrying new codes and trying to solve problems - in my case a simple problem- but still i have learned something.\nWhat I learned\nhow import command works.\nand how to create a simple 2D GUI.\nWhat's next for rockPaperScissors mini game\na scoreboard and maybe a save game to save the score.", 
    "project_name": "RockPaperScissors MiniGame", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/rockpaperscissors-mini-game"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nWhat it does\nOur app is an API endpoint which allows other developers to hook into our harassment algorithm. We also built a chrome extension to show the algorithms performance and intelligence.\nHow we built it\nWe built an API in python flask which connected to a Postgresql database. We decided to use an object relational mapper to integrate with our database. We used python's natural language toolkit in conjunction with Google's bad words to train our model.\nChallenges we ran into\nThe biggest challenge was our skill gap, we were passionate about learning something new and wanted to come into the project with an open mind. All of the team learned something new.\nAccomplishments that we're proud of\nUsing NLP was a huge challenge for our project, but we are really proud of our algorithm and chrome app. We learned a lot of new skills that we wouldn't have through of learning outside the algorithm.\nWhat we learned\nWe didn't know anything about natural language processing before we started this project. We found a research paper that detailed methods with which to recognise online harassment.\nOne of our teammates had never used python before so he was able to learn in trial by fire.\nWhat's next for HarassBlock\nWe can index more of the web and gather more data in order to provide services that may be useful to advertising companies who wish to avoid being affiliated with negative websites. We could also see our API and algorithm being used on online forums and comment sections to minimize potential harassment and hate speech.", 
    "project_name": "HarassBlock", 
    "project_tags": [
      "python", 
      "flask", 
      "postgresql", 
      "javascript", 
      "nltk", 
      "chrome"
    ], 
    "project_url": "https://devpost.com/software/harassblock"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nTrine style coop game\nWhat it does\n2.5D  Platform game with 2 characters with different skillsets\nHow we built it\nChallenges we ran into\nAccomplishments that we're proud of\nWhat we learned\nWhat's next for Nana's herbs", 
    "project_name": "Nana's herbs", 
    "project_tags": [
      "unity", 
      "c#"
    ], 
    "project_url": "https://devpost.com/software/nana-s-herbs"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "", 
    "project_name": "Jump Leads", 
    "project_tags": [
      "express.js", 
      "mongoose", 
      "heroku", 
      "ionic"
    ], 
    "project_url": "https://devpost.com/software/jump-leads"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nThe need of gathering potentially successful businesses or start-ups in an environment that facilitates the visualisation of all the traits these projects have.\nWhat it does\nThis site creates a database for start-ups, small businesses and investors to ease their connection\nHow we built it\nThe interface is created with HTML and CSS, the platform having in its content PHP syntaxes and use of MySQL.\nChallenges we ran into\nThe main challenge was deciding upon the design of the webpage, along with creating the database and hosting it online\nAccomplishments that we're proud of\nWe managed to solve the Goldman Sachs challenge and we're proud of building out first online website\nWhat we learned\nCreating databases, hosting them online and creating a user-friendly interface for the website\nWhat's next for StartInvest\nMaking it more user-friendly and providing analysis for the future of the start-ups", 
    "project_name": "StartInvest", 
    "project_tags": [
      "html", 
      "php", 
      "mysql", 
      "domain", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/startinvest"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nWe wanted to build something cool with Machine Learning and D3.js. Using a Kaggle Dataset for this purpose seemed the best way to go.\nWhat it does\nWe try to tell how movies have evolved over the past 100 years. We also implemented a Machine Learning module that predicts movie revenues based on Director, Plot, Actor and Budget.\nHow we built it\nThe backend was written in Python, interfaced using Flask with the JS front end. We cleaned our dataset using Pandas. Built the JS visualisations with d3.js.\nChallenges we ran into\nIt was a task identifying the correct model to use. Moreover, understanding Pandas and its neat tricks was another task. Additionally, d3.js had a complicated chaining syntax.\nAccomplishments that we're proud of\nSetting up Flask. Learning Javascript and D3.js. Data Analytics. Implementing machine learning models. \nWhat we learned\nDon't give up. Team work. One Hot Encoding and Dimensionality Curse. Flask, Numpy, Pandas. \nWhat's next for AIMLDB\nUsing more sophisticated techniques and feature selection to predict better revenues. \nWe also got ourselves a domain - aimldb.com, but domain.com let us down. This is a wordplay on using AI/ML techniques to predict revenue from the iMDB database.", 
    "project_name": "AIMLDB", 
    "project_tags": [
      "python", 
      "javascript", 
      "d3.js", 
      "pandas", 
      "numpy", 
      "flask", 
      "html5", 
      "css3", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/aimldb"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nA game called Presentation Karaoke\nWhat it does\nIt autogenerates a presentation based on the desired title and colour.\nHow we built it\nThe python program opens the C# file, waiting for the input to be written in a text file, then it generates the presentation.\nChallenges we ran into\nNot enough information about Python library for powerpoint\nLink C# with Python\nAccomplishments that we're proud of\nIt works almost all the time\nWhat we learned\nI/O stream from files in C# and Python\nWhat's next for PresGen\nPerfect it, asking for more input from the user to generate the presentation based on it.", 
    "project_name": "PresGen", 
    "project_tags": [
      "python", 
      "c#"
    ], 
    "project_url": "https://devpost.com/software/presgen"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nHow creativity works? For centuries people were worshipping artists who could make original pieces of art. We are here interested in what it takes to learn to compose music, especially as good as great composers as such as Mozart, Schuman or Beethoven.\nWhat it does\nIt takes as an input part of the music piece in MIDI format and continues the melody, outputting MIDI file\nHow we built it\nWe used python and Keras.io neural network library to build recurrent neural networks and learn how to compose music on some given samples.\nChallenges we ran into\nAWS challenge, main, team netsol, Barclays (no need for composers = easier life for movie and TV producers, game developers, etc.)\nAccomplishments that we're proud of\n\nRecurrent neural network architecture\nComputers producing music \n\nWhat we learned\n\nRNN architectures\nKeras.io\nAWS GPU processing\n\nWhat's next for SchumaNN\n\nrefactoring\ntraining on bigger dataset with more epoches", 
    "project_name": "SchumaNN", 
    "project_tags": [
      "python", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/schumann"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "I was inspired to do a program which reduces development time and distaction level for those who use text editors in any way. There were already virtual desktops on the market, but the only thing they do is project the desktop in virtual space. \nAt its' current state it can edit a text file specified in unity source code.\nI've built it using Unity and C#, as Unity has VR integration.\nThe hardest part for me was the complexity of building a text editor.\nThe VR text editing environment can be extended to use multiple window for Virtual workspace control.", 
    "project_name": "3D Text editing environment", 
    "project_tags": [
      "unity", 
      "c#"
    ], 
    "project_url": "https://devpost.com/software/3d-text-editing-environment"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "", 
    "project_name": "MarioNet", 
    "project_tags": [
      "python", 
      "javascript", 
      "html5", 
      "opencv", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/marionet"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nWe gathered the inspiration for the NOMA challenge as we found the most interesting and challenging out of the few that were up for grabs. Our team thought that the task of working with virtual reality, modelling and innovation  was the most suitable so we built upon it.\nWhat it does\nThe hack itself is basically set to innovate the way people buy real estate: instead of going to every single location by foot or car, the customer would have the ability to meet with an agent or just view the estate from home with any VR headset. But our project does not just stop there - the main goal is to not only be able to view the rooms, but to actually customize them yourself! You could add any furniture you desire just to have a better feel on how a specific property tailors to your needs! In addition to that, the engine would work in such a way that you only need to implement the type of housing you need (office, flat, etc.), the amount of occupants and the system will automatically generate a room with certain types of furniture in it in a specific formation. The last thing to be implemented would be a machine learning algorithm that actually learns from customers needs and makes better assumptions as to what type of house to offer!\nHow we built it\nThe project was build by using a simple piece of hardware and a few pieces of software, that being the the famous Samsung VR gear, 3D modeling software BLENDER and last but certainly not least, the Unreal Engine for the actual mapping of items and surroundings. We decided to use the Unreal engine as it has a really friendly user interface called \"blueprint\" that actually helps minimize the amount of low level code and move building blocks of the program into a more high level environment.\nChallenges we ran into\nDuring our development path we have encountered quite a few hurdles: the largest of them being the massive struggle with the Oculus rift. The main issue with the rift was that we spent an actual 9 hours trying to get it to work on our laptops. We went to the extent of trying a campus computer to no avail. This automatically led to a loss of precious time, but we managed to get back from it and come back with a bang! The setback did not terminate our drive and we came out with a finished alpha version of the app that we are very proud to present!\nAccomplishments that we're proud of\nWe manage to deal with the setback from the OCULUS, dealt with numerous errors from Unreal engine, and finally came out with a working product!\nWhat we learned\nWe have learned a great lesson in teamwork as well as actual software and hardware skills that helped us implement our project!\nWhat's next for VReal Estate\nWho knows, the app might one day reach an actual beta version!", 
    "project_name": "VReal Estate", 
    "project_tags": [
      "unreal-engine", 
      "blender", 
      "c++"
    ], 
    "project_url": "https://devpost.com/software/vreal-estate"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "", 
    "project_name": "Game Master", 
    "project_tags": [
      "html", 
      "css", 
      "php", 
      "javascript", 
      "jquery", 
      "amazon-alexa", 
      "amazon-web-services", 
      "amazon-dynamodb"
    ], 
    "project_url": "https://devpost.com/software/game-master"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "great-uni-hack-2016\nMaking events great again.\nMaking Android great again.\nMaking Xiaomi great again.\nShort description\nA web and mobile application that helps people at events put all their pictures together. \nMotivation\nPeople take lots of photos at events, and then forget to share them. People attend events and would like to see all the pictures that were taken in there in one place. Would there be any way to automate this process and centralize it?\nArchitecture\nAndroid app in Java, looks out for new pictures taken and uploads them as soon as they are taken (has a toggle to pause auto-upload). PHP server that get the serialized picture and displays it. Web interface to create new events and set the password for users who are in the event location get notified to upload their picture.", 
    "project_name": "PhotoMerge", 
    "project_tags": [
      "php", 
      "java", 
      "html", 
      "android-studio"
    ], 
    "project_url": "https://devpost.com/software/great-uni-hack-2016"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nWe were inspired to help solve one of the greatest problems for students, which is budgeting.\nWhat it does\nIt processes a photo of a receipt with the help of an Android app which sends data to a database, which is linked to an  website that breaks the receipt down into products with their prices, gives a daily report of the expenses and shows the most expensive product bought.\nHow I built it\nWe used Android Studio to create the mobile application and for the website we utilised  PHP, CSS and HTML5 and the database uses MySql.\nChallenges I ran into\nWe tried to use Amazon Web Services, but only managed to connect the database, and not the website, thus were not able to put our application online and can only be used locally. \nAccomplishments that I'm proud of\nDeveloping our very first complex application which includes a mobile app and a database. We are also proud of coming up with an interesting idea and being able to implement it in the given time.\nWhat I learned\nHow to use numerous languages and programmes, fix lots of difficulties that came up and work as a team. \nWhat's next for Budget It\nImplement an API that based on the previous entries can give an estimate of the future expenditures, most likely products to be bought frequently. Also, based on the favourite product, the API will be able to search online for the lowest prices and give recommendation on where to shop in order to achieve the lowest prices. We would like to develop an Android/IOS version of the website, with the same functionality.", 
    "project_name": "Budget It", 
    "project_tags": [
      "php", 
      "html5", 
      "css", 
      "android-studio", 
      "mysql"
    ], 
    "project_url": "https://devpost.com/software/budget-it"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nWe wanted to create a simple iOS application which allows small businesses and startups to be funded with a swipe on the screen\nWhat it does\nIt presents startups and businesses to investors and helps them invest their money for the best idea by just swiping on the screen.\nHow we built it\nWe used swift 3 and xcode to develop the application. Git hub for the version control\nof the app and Parser for back-end of the software.  \nChallenges we ran into\nTeam management was a big drawback when came to implementing the project. The facebook login did not work at all and we lost couple of our team members. The setting up of the systems delayed us(Damn you xcode and no compatibility with Linux!) \nAccomplishments that we're proud of\nSwift was a new language for all of us. It was fun to have a go with it and try to impact on something with our recently gained knowledge.\nCreating a shell for the application was a good accomplishment.  \nWhat we learned\nTime management is very important factor in short duration challenges. Spending more than an hour stuck on the same thing is devastating for your project development. \nWhat's next for Investr\nInvestr has a promising future if we spend time updating and upgrading our initial product. It is missing features like PayPal linking and transfer but given more time it could be implemented. After all, this is an idea developed for only 24 hours!", 
    "project_name": "Investr", 
    "project_tags": [
      "swift", 
      "xcode", 
      "parse"
    ], 
    "project_url": "https://devpost.com/software/investr"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "", 
    "project_name": "MarioNet", 
    "project_tags": [
      "python", 
      "javascript", 
      "html5", 
      "opencv", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/marionet"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nWe gathered the inspiration for the NOMA challenge as we found the most interesting and challenging out of the few that were up for grabs. Our team thought that the task of working with virtual reality, modelling and innovation  was the most suitable so we built upon it.\nWhat it does\nThe hack itself is basically set to innovate the way people buy real estate: instead of going to every single location by foot or car, the customer would have the ability to meet with an agent or just view the estate from home with any VR headset. But our project does not just stop there - the main goal is to not only be able to view the rooms, but to actually customize them yourself! You could add any furniture you desire just to have a better feel on how a specific property tailors to your needs! In addition to that, the engine would work in such a way that you only need to implement the type of housing you need (office, flat, etc.), the amount of occupants and the system will automatically generate a room with certain types of furniture in it in a specific formation. The last thing to be implemented would be a machine learning algorithm that actually learns from customers needs and makes better assumptions as to what type of house to offer!\nHow we built it\nThe project was build by using a simple piece of hardware and a few pieces of software, that being the the famous Samsung VR gear, 3D modeling software BLENDER and last but certainly not least, the Unreal Engine for the actual mapping of items and surroundings. We decided to use the Unreal engine as it has a really friendly user interface called \"blueprint\" that actually helps minimize the amount of low level code and move building blocks of the program into a more high level environment.\nChallenges we ran into\nDuring our development path we have encountered quite a few hurdles: the largest of them being the massive struggle with the Oculus rift. The main issue with the rift was that we spent an actual 9 hours trying to get it to work on our laptops. We went to the extent of trying a campus computer to no avail. This automatically led to a loss of precious time, but we managed to get back from it and come back with a bang! The setback did not terminate our drive and we came out with a finished alpha version of the app that we are very proud to present!\nAccomplishments that we're proud of\nWe manage to deal with the setback from the OCULUS, dealt with numerous errors from Unreal engine, and finally came out with a working product!\nWhat we learned\nWe have learned a great lesson in teamwork as well as actual software and hardware skills that helped us implement our project!\nWhat's next for VReal Estate\nWho knows, the app might one day reach an actual beta version!", 
    "project_name": "VReal Estate", 
    "project_tags": [
      "unreal-engine", 
      "blender", 
      "c++"
    ], 
    "project_url": "https://devpost.com/software/vreal-estate"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "", 
    "project_name": "Game Master", 
    "project_tags": [
      "html", 
      "css", 
      "php", 
      "javascript", 
      "jquery", 
      "amazon-alexa", 
      "amazon-web-services", 
      "amazon-dynamodb"
    ], 
    "project_url": "https://devpost.com/software/game-master"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "great-uni-hack-2016\nMaking events great again.\nMaking Android great again.\nMaking Xiaomi great again.\nShort description\nA web and mobile application that helps people at events put all their pictures together. \nMotivation\nPeople take lots of photos at events, and then forget to share them. People attend events and would like to see all the pictures that were taken in there in one place. Would there be any way to automate this process and centralize it?\nArchitecture\nAndroid app in Java, looks out for new pictures taken and uploads them as soon as they are taken (has a toggle to pause auto-upload). PHP server that get the serialized picture and displays it. Web interface to create new events and set the password for users who are in the event location get notified to upload their picture.", 
    "project_name": "PhotoMerge", 
    "project_tags": [
      "php", 
      "java", 
      "html", 
      "android-studio"
    ], 
    "project_url": "https://devpost.com/software/great-uni-hack-2016"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nWe were inspired to help solve one of the greatest problems for students, which is budgeting.\nWhat it does\nIt processes a photo of a receipt with the help of an Android app which sends data to a database, which is linked to an  website that breaks the receipt down into products with their prices, gives a daily report of the expenses and shows the most expensive product bought.\nHow I built it\nWe used Android Studio to create the mobile application and for the website we utilised  PHP, CSS and HTML5 and the database uses MySql.\nChallenges I ran into\nWe tried to use Amazon Web Services, but only managed to connect the database, and not the website, thus were not able to put our application online and can only be used locally. \nAccomplishments that I'm proud of\nDeveloping our very first complex application which includes a mobile app and a database. We are also proud of coming up with an interesting idea and being able to implement it in the given time.\nWhat I learned\nHow to use numerous languages and programmes, fix lots of difficulties that came up and work as a team. \nWhat's next for Budget It\nImplement an API that based on the previous entries can give an estimate of the future expenditures, most likely products to be bought frequently. Also, based on the favourite product, the API will be able to search online for the lowest prices and give recommendation on where to shop in order to achieve the lowest prices. We would like to develop an Android/IOS version of the website, with the same functionality.", 
    "project_name": "Budget It", 
    "project_tags": [
      "php", 
      "html5", 
      "css", 
      "android-studio", 
      "mysql"
    ], 
    "project_url": "https://devpost.com/software/budget-it"
  }, 
  {
    "hackathon_name": "GreatUniHack Fall 2016", 
    "project_description": "Inspiration\nWe wanted to create a simple iOS application which allows small businesses and startups to be funded with a swipe on the screen\nWhat it does\nIt presents startups and businesses to investors and helps them invest their money for the best idea by just swiping on the screen.\nHow we built it\nWe used swift 3 and xcode to develop the application. Git hub for the version control\nof the app and Parser for back-end of the software.  \nChallenges we ran into\nTeam management was a big drawback when came to implementing the project. The facebook login did not work at all and we lost couple of our team members. The setting up of the systems delayed us(Damn you xcode and no compatibility with Linux!) \nAccomplishments that we're proud of\nSwift was a new language for all of us. It was fun to have a go with it and try to impact on something with our recently gained knowledge.\nCreating a shell for the application was a good accomplishment.  \nWhat we learned\nTime management is very important factor in short duration challenges. Spending more than an hour stuck on the same thing is devastating for your project development. \nWhat's next for Investr\nInvestr has a promising future if we spend time updating and upgrading our initial product. It is missing features like PayPal linking and transfer but given more time it could be implemented. After all, this is an idea developed for only 24 hours!", 
    "project_name": "Investr", 
    "project_tags": [
      "swift", 
      "xcode", 
      "parse"
    ], 
    "project_url": "https://devpost.com/software/investr"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "Inspiration\nCurious about using government data sets, we discoverer an API allowing us to access live crime statistics. We wanted to be able to visually display to users how much crime occurs on their daily routes. \nWhat it does\nSafePassage provides the user with a visual representation of  crime density on their daily routes between two locations. This  is displayed on a map making the information easy to interpret. Ultimately, making their journey from A to B safer. \nHow we built it\nWe utilised appropriate APIs which provided us with data for routing and crime statistics, which we sourced from Google and the UK government respectively. \nChallenges we ran into\nExtremely long loading times \nMerging APIs\nAccomplishments that we're proud of\nGreatly expanded our knowledge of Google maps APIs\nHaving a working prototype\nLearning new languages (PHP)\nWhat we learned\nHow to access Google and UK government APIs\nA deeper of Javascript and PHP\nWhat's next for SafePassage\nUsing Crate.io to cache crime statistics for quick access in future.\nNote\nDesigned on a 720p screen, please view at this resolution if possible!", 
    "project_name": "SafePassage", 
    "project_tags": [
      "javascript", 
      "php", 
      "google-maps", 
      "data.gov.uk"
    ], 
    "project_url": "https://devpost.com/software/safepassage"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "Inspiration\nI was attacked by goose and I decided to turn my traumatic experience into a ridiculous game that does not make any sense at all.\nWhat it does\nImagine you're a goose and you are casually walking around the campus, when suddenly all these people start walking towards and want to attack you. You're faced with 5 different kinds of idiots who don't want you to peacefully strut around the campus.  You have to scare them off by screaming at them (sound effects not included because they got very very annoying after a short amount of time) but if you collide with them, you're pride is hurt because you made contact with the commoners so you must start again.\nHow we built it\nWe used a program with a bunch of libraries and youtube video tutorials.\nChallenges we ran into\nWe couldn't find a youtube tutorial so we just had to fuck about with it.\nAccomplishments that we're proud of\nActually creating something that is functioning because that was the aim of coming to this hackathon.\nWhat we learned\nThat we are not completely useless.\nWhat's next for Hackathon_Goose_Game\nGetting someone to actually beat the levels because we don't know how to do that.", 
    "project_name": "Hackathon_Goose_Game", 
    "project_tags": [
      "gamemaker"
    ], 
    "project_url": "https://devpost.com/software/hackathon_goose_game"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "Inspiration\nAston University loves their geese ever so much, so a game about hunting them was the only option!\nWhat it does\nYou aim at gees and shoot using the oculus rift headset and remote. You gain score points for every goose hit.\nHow we built it\nWe built the game using Unity with programming in C#.\nChallenges we ran into\nWouldn't be able to list within this fields word limit. Public/Private variables, sensor accuracy and key binding to the Oculus remote to name a few.\nAccomplishments that we're proud of\nStarting of as two guys with little experience in C#, VR and Unity and then finishing having built a game using all three of these.\nWhat we learned\nC# basics, making use of Oculus SDK/Hardware, using unity.\nWhat's next for Geese Hunter VR\nExpand game functionality and remove some potential bugs.", 
    "project_name": "Geese Hunter VR", 
    "project_tags": [
      "oculus", 
      "c#", 
      "unity"
    ], 
    "project_url": "https://devpost.com/software/gees-hunter-vr"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "Inspiration\nno time\nWhat it does\nsorry\nHow I built it\nunity\nChallenges I ran into\nall of them\nAccomplishments that I'm proud of\n... encouragement \nWhat I learned\ngeese know everything\nWhat's next for Goose ball\nmore geese", 
    "project_name": "Goose ball", 
    "project_tags": [
      "unity", 
      "javascript", 
      "c#"
    ], 
    "project_url": "https://devpost.com/software/goose-ball"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "Inspiration\nSearch engine optimisation is a black box. No one knows how it works, its all up to maths to decide. \nWhat it does\nThe aim of this plugin is to alleviate the need for a user to keep coming up with ways to tag their content.\nNow all they need to do is write. The plugin will scrape the URLS they reference and the images they post. It then sends them off to Clarifai and Majestic to analyse them and give back what's in the image and the categories that the linked sites belong to respectively.\nHow I built it\nIt's all built in PHP and uses the standard wordpress APIs as supplied by the wordpress codex\nChallenges I ran into\nThis is my first time writing a PHP plugin for wordpress so I had to bring myself up to speed with PHP\nAccomplishments that I'm proud of\nIt works beautifully well and uses all the standard wordpress APIs, no horrible hacking required\nWhat's next for Ceremonious SEO\nI will be publishing this to the wordpress plugins index once I tidy up some loose ends and make it production ready", 
    "project_name": "Ceremonious SEO", 
    "project_tags": [
      "php", 
      "clarifai"
    ], 
    "project_url": "https://devpost.com/software/ceremonious-seo"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "Inspiration\nGeese\nWhat it does\nA wild hunt for a geese\nHow we built it\nAWS use\n-Multiple EC2 instances for puzzles.\n-Route 53 for DNS\n-Cloudfront & S3 for our single image\n-RDS for database\nWe pretended it wasn't put together in 5 minutes for 10 people to use", 
    "project_name": "WildGooseChase", 
    "project_tags": [
      "python", 
      "html5", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/wildgoosechase"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "Inspiration\nWanted to learn Unity\nWhat it does\nFly a geese\nHow I built it\nIn unity with c#\nChallenges I ran into\nEverything with unity!\nAccomplishments that I'm proud of\nLearning unity!\nWhat I learned\nUnity!\nWhat's next for Geese simulator 2016\nCollisions!", 
    "project_name": "Geese simulator 2016", 
    "project_tags": [
      "unity"
    ], 
    "project_url": "https://devpost.com/software/geese-simulator-2016"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "ASTON HACK 2016\nGeese themed hackathon!\n\n\nTravis CI Status\n\nDescription\nFragile/Swarming Geese Simulator, is a Python program that \"simulates\" the\nbehaviour of geese (a common theme around Birmingham). The main idea was to\ncreate the activity history of groups and individual geese and then plot their\nactions on a map (using Google Maps API). The history is stored using the crate.io\ndatabase.\nHow to run the program.\nsource/geesemanager.py\n\nThis will start a custom \"shell\" that allows you to call some of the main\nfunctions of the program. You can also use RAW Python if you wish.\nInside the \"shell\" you can run:\njimmy = createGoose()\n\nThis will start a \"wizzard\" to help you define\nJimmy, you can either use random data or custom\ndata.\njimmy = createGoose()\nUse random data? (y/n)\n---> y\n>_\n\nNow we have a random goose in 'jimmy'.\nprint jimmy\n89e129f6\n>_\n\nPrinting 'jimmy' like that will return the hashid.\nIf we were to choose custom data for 'jimmy', the\nsetup would look like this:\n>_ jimmy = createGoose()\nUse random data? (y/n)\n---> n\nname ---> Jimmy\nage (d) ---> 600\nspan (d) ---> 600\nhealth ---> 200\nhunger ---> 300\nX: 90\nY: 80\ngender ---> 2\nrange ---> 55\n>_\n\nCreating a clan.\n>_ someclan = createClan(50,0,2)\n# 50 is the number of geese.\n# 0 is the X coordinate.\n# 2 is the Y coordinate.\n\nSimulating a clan.\n>_ start(someclan)\n# After this you are prompted to give a date.\n# Then hell breaks loose!!!\n# Some geese die, some are born, overall they win!\n\nMore\nFor more information on what the program can do, look at the functions defined inside source/geesemanager.py\n\ncrate.io\nThe program tries to connect to a crate.io database, so make sure you have one running\ncrate/crate # Linux/Mac\n\nand when asked provide the ip and port:\n# Should work on most machines!\nip: localhost\nport: 4200\n\nAfter this, Python connects to the database and stores data about the geese! AMAZING!", 
    "project_name": "Fragile/Swarming Geese Simulator", 
    "project_tags": [
      "html", 
      "python", 
      "shell", 
      "javascript", 
      "php", 
      "google-maps"
    ], 
    "project_url": "https://devpost.com/software/astonhack-2016-qd78my"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "Inspiration\nInitially we started big: Majestic API, huge crate.io database on amazon server and so on... And well, we failed. But instead of just giving up, we decided to have some fun and create something we would enjoy working on. And that's pretty much the origin of Bomber Goose.\nWhat it does\nIt's pretty much a casual game of bomberman. But this time it bombers as geese, Galaxy Note 7 as the bomb, MLH symbol as power up and AstonHack hackingspace as area. For control, just enter the website address on your mobile phone and it will turn it into controller and add you as another player.\nHow we built it\nWe are running Amazon server for the main game, with .tech domain to connect to it. Entering bombergoose.tech/player.html on your mobile phone will add you to the game and display mobile controller. Works on both Android and iOS. The area of the game is made from pictures of AstonHack hacking space.\nChallenges we ran into\nSpending countless hours browsing geese pics on internet.\nAccomplishments that we're proud of\nWell, we didn't really build linux kernel from scratch. Or create facebook in machine code. But we had fun. We met cool people. We enjoyed every minute of AstonHack and that's what we are most proud of. \nWhat we learned\nThat hackathon isn't just an event to improve your skills, make projects that will shine on your CV or win challenges. It's mainly about just having fun with other people. It doesn't matter how advanced your project will be, it's about how much you enjoy doing it.\nWhat's next for Bomber Goose\nIt will forever stay in our minds. Keep on goosin'", 
    "project_name": "Bomber Goose", 
    "project_tags": [
      "javascript", 
      "amazon-web-services", 
      "css", 
      "html"
    ], 
    "project_url": "https://devpost.com/software/bomber-goose"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "Inspiration\nOur love for Canada goose\nWhat it does\nA central hub for everything geese related\nHow we built it\nUsing various softwares\nMajestic API to find the most related websites on our GeeseLogistics\nYoutube, Flickr, Giphy and Spotify APIs for individual objects\nUsing embed code to implement Google chart and Tweets\nAlso punny puns\nChallenges we ran into\nNew languages and APIs\nAccomplishments that we're proud of\nThe website and the Majestic API\nWhat we learned\nNew languages and APIs\nWhat's next for GeeseHub\nWaterfowl", 
    "project_name": "GeeseHub", 
    "project_tags": [
      "html", 
      "jquery", 
      "css", 
      "json", 
      "javascript", 
      "github", 
      "amazon-web-services", 
      "majestic-international-group", 
      "spotify", 
      "flickr", 
      "giphy", 
      "youtube", 
      "twitter"
    ], 
    "project_url": "https://devpost.com/software/geesehub-gh94w6"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "Inspiration\nFrom the amount of geese in the university. There are too much and one of them also tried to attack us. So for the security of the students we want to hunt them down like Ghostbusters .\nDomain name\nWe registered the domain name geesebusters.com for this project as we want to hunt geese\nIf the link does not work is because of the DNS. It can take up to a day to propagate the domain name.\nTechnologies\nHTML/CSS/JAVASCRIPT, Phaser.js Game library\nLEAP-MOTION", 
    "project_name": "GeeseBusters", 
    "project_tags": [
      "html", 
      "css", 
      "javascript", 
      "phaser.js", 
      "leap-motion"
    ], 
    "project_url": "https://devpost.com/software/geesebusters"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "Inspiration\nWe wanted to create a random goose facts bot in Twilio, that didn't work. We then switched to Slack, that didn't work. We are now using Telegraph as that works.\nWhat it does\nGets random words from the database, muddles them up and creates random goose facts.\n(disclaimer, they aren't real)\nHow we built it\nWe have a Crate.io database where we store the different words.\nWe then use Node.JS and the telegraph bot to add all of the words to a string\nChallenges we ran into\nHad trouble with setting up AWS, Twillio, SlackBot, Crate and many many more.\nTelegraph bot seems to \"just work\" which is awesome\nAccomplishments that we're proud of\nWe've finally got something working, which has been a massive challenge.\nNone of use knew any Node and only one of us knew any SQL.\nNow we are all much better in those languages which is the beauty of Hackathons.\nWhat we learned\nNode, Twilio (a bit), Slack (a bit), SQL, Crate and many project management stuff.\nWhat's next for RandomGooseFacts\nThis propaganda machine will eventually take over the world.", 
    "project_name": "RandomGooseFacts", 
    "project_tags": [
      "crate", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/randomgoosefacts"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "Inspiration\nBald eagles are the natural predictor of geese, so the geese attack back\nWhat it does\nThe game is incomplete but the geese the the bottom can shoot bullets at the bald eagles\nHow we built it\nthe game was built in Unity\nChallenges we ran into\nthe only challenge we had trouble with is the fact that the bullets wont detect collision with the bald eagles \nAccomplishments that we're proud of\nthe graphics, the code\nWhat we learned\nwe learnt a great deal about unity, which will come in handy for my group project\nWhat's next for Aston Awakening\nNext we will continue working on the hack and complete the game.", 
    "project_name": "Aston Awakening", 
    "project_tags": [
      "unity", 
      "c#", 
      "photoshop"
    ], 
    "project_url": "https://devpost.com/software/aston-awakening"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "Inspiration\nWe travel everyday of our lives, when coming across a awesome route, journey or a cool road. Wouldn't it be nice to share this route with other people so that they can experience the same journey? Our inspiration formed from sharing our cool journeys.\nWhat it does\nA android based app using google maps can be used to share journeys amongst people. When travelling on a certain route they can submit their journey through the app so that others can go on the same route. Maybe they saw an amazing wide stretch of road which leads to the end of the rainbow? Or maybe they saw a goose on the way?\nHow we built it\nUsing android android with google maps and google roads API. Connected via a MySQL database and PHP backend.\nChallenges we ran into\nFinding high-res geese images, sleep and geese.\nAccomplishments that we're proud of\nStaying up all night, implementing Google API's, doing everything under pressure and geese.\nWhat we learned\nHow to develop an app with google roads and maps API, MySQL, PHP and geese.\nWhat's next for Dank Roads\nFacebook integration, Birds, ducks and maybe owls?", 
    "project_name": "Dank Roads", 
    "project_tags": [
      "android-studio", 
      "android", 
      "google-maps", 
      "google", 
      "mysql", 
      "php"
    ], 
    "project_url": "https://devpost.com/software/dank-roads"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "Inspiration\nGeese\nWhat it does\nNot hurting geese, for sure\nHow we built it\nWe believed in ourselves\nChallenges we ran into\nGeese\nAccomplishments that we're proud of\n404\nWhat we learned\n404\nWhat's next for 404\n404.v2.0", 
    "project_name": "404", 
    "project_tags": [
      "c#", 
      "sql"
    ], 
    "project_url": "https://devpost.com/software/404"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "Geese Geese Geese, Spooky Scary\nYou are Goosey McGooseFace, and incredibly short human with a guardian goose. Your Guardian Goose (or GG for short) alerted you to the murder of a local upstanding family, and as an investigative journalist, you felt it was your duty to discover the truth behind this murder most fowl. You wake up, disorientated, in a pitch black room, with only your phone light on hand. The last thing you remember is getting in your car....\nUsing the unreal-engine which none of us had used before we created the world and the utilities to live within it.\nnever having used the software before.\nactually getting it to work\ngeese are spooky\nfinishing the project components we didn't get to finish.\n\"We teach you all this computer science, only for you to do this with it\" - Peter Lewis 2016", 
    "project_name": "GooseBumps", 
    "project_tags": [
      "unreal-engine", 
      "oculus", 
      "twilio"
    ], 
    "project_url": "https://devpost.com/software/goosebumps"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "We created a 3D Goose Platformer game.\nGoose theme was used because Aston has lots of Geese!\nBuilt with Unity\nIt works!\nIn this experience we learnt how to use Basic Unity.\nWhat's next for GooseGame?\nWe created a domain called \"MeGoosta.net\"\nIn the future we will link the website to the game", 
    "project_name": "GooseGame", 
    "project_tags": [
      "unity"
    ], 
    "project_url": "https://devpost.com/software/goosegame"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "Inspiration\nGitHub's visualizations of repositories are pretty cool. Since commits are laid out in time it made sense to use it to sequence sound.\nWhat it does\nIt takes a GitHub repository (username/reponame) and plays a drum track based on the commit history of the master branch. When the commits are more frequent it speeds up and vice-versa.\nHow I built it\nI grab data from GitHub's repository API, rescale the timing to make it somewhat drum-like and used the WebAudio API to sequence drum samples.\nChallenges I ran into\nOne major problem is that most repositories follow the pattern of big spikes of activity and loads of idle time. That makes the tracks very boring to listen to. I transformed the timings so that it never speeds up or slows down too much.\nAccomplishments that I'm proud of\nWrangling the timing in WebAudio is something completely new to me, so I'm happy to have learned more about it. Finding the right parameters for solution to the above problem was also pretty great!\nWhat I learned\nDealing with browser-based audio and the awesome GitHub API.\nWhat's next for DrumHub\nI'm taking it on tour.", 
    "project_name": "DrumHub", 
    "project_tags": [
      "github", 
      "jquery", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/drumhub"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "We tried to make something serious I swear...", 
    "project_name": "Internet Simulator Oh Gosh Why", 
    "project_tags": [
      "node.js", 
      "unity", 
      "c#", 
      "php", 
      "crate", 
      "let's-crate", 
      "majestic-seo-enterprise"
    ], 
    "project_url": "https://devpost.com/software/internet-simulator-oh-gosh-why"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "Inspiration\nThe American Election has become a stale and dull battle of words instead of a legitimate close race to the finish. We aim to put the fun back into the election.\nWhat it does\nThis application compares potential presidential candidates from anyone stored in the database.\nHow I built it\nWe used an access database with a python script pulling information from it based off of a HTTP GET request from the main webpage containing search bars. The database is quieried by the python and then the response is sent back up to the database to be used by the graphs and statistics tables by which you can compare the 2 potential candidates.\nChallenges I ran into\nThe database and the formatting of the JSON strings that were fetched with the HTTP GET were a pain. The compatability with python and the database was also difficult.\nAccomplishments that I'm proud of\nIt almost worked! The data was fetched from the database being queried by the search terms from the web page, then sent back up to the webpage. However the query was not formatted correctly and took too much debugging to fix fully.\nWhat I learned\nCompatability is key. Use whatever is most compatible and you'll have a much easier time.\nWhat's next for El Presidente", 
    "project_name": "El Presidente", 
    "project_tags": [
      "javascript", 
      "python", 
      "html5", 
      "css3"
    ], 
    "project_url": "https://devpost.com/software/el-presidente"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "What it does\nIt find gesse using the phone camera and Clarifai api\nHow I built it\nI used android studio to make the app\nChallenges I ran into\nGetting the camera to work in the app", 
    "project_name": "Goose Finder", 
    "project_tags": [
      "clarifai", 
      "android-studio"
    ], 
    "project_url": "https://devpost.com/software/goose-finder"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "Inspiration\nWe where inspired by Cat Facts and the Aston University Goose.\nWhat it does\nBother Goose is a web application that you can use to annoy your friends. All you need to do is enter your email and their number, and they will very quickly begin receiving Goose related facts every hour for the rest of the day! Every Goose fact has a guaranteed AWFUL Goose pun. \nHow we built it\nWe set up an EC2 web app on AWS which allows a user to connect and sign up their friend for Goose facts. We built the site using HTML5 and developed the web app in Python using Flask and Twilio. We also set up a database of numbers, emails and Goose-facts using SQLite. We then send a text using Twilio to all the numbers in the database containing a single Goose fact and pun.\nChallenges we ran into\nSetting up the webserver was hard.\nWe had trouble adding the numbers and emails to the SQLite database using Python.\nSending all the texts out with Twilio to everyone on the database caused a data passing issue.\nWe bought a domain to stick it on but domain transfers are VERY slow.\nAccomplishments that we're proud of\nWe can actually sign up to it and it will send you a confirmation text!\nWe somehow managed to get Python to add al the sign up to the databse.\nWhat we learned\nHow to make a database using SQLite.\nHow to develop and host a web app on AWS.\nWhat's next for Bother Goose\nMore annoying Goose related facts!\nGet the domain to actually work.\nText signup option (maybe).\nWebsite sign-in using email to view your targets replies.", 
    "project_name": "Bother Goose", 
    "project_tags": [
      "python", 
      "flask", 
      "twilio", 
      "sqlite", 
      "html5", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/bother-goose"
  }, 
  {
    "hackathon_name": "AstonHack 2016", 
    "project_description": "Inspiration\nGeese are very misunderstood creatures, and we needed something to break down the language barriers. The solution was obvious.\nWhat it does\nYou can enter text in any language, and it will identify the language, tag the parts of speech, and translate it fluently into Goose. It can be displayed as text or read out loud.\nHow I built it\nThe main API I used was called the Words API, where you could send it a word and it would respond with the part of speech for that word (noun, verb, etc.). The front-end was build with HTML and CSS, and the translating was done with PHP.\nChallenges I ran into\nI ran into many challenges, mostly due to lack of experience and severe lack of time. I was only able to attempt to implement a small amount of the features I wanted, and most of the things I did implement ended up not working. With more time I could absolutely get this working, but trying to work with so many new APIs and technologies in a 24h time period was beyond my skill level.\nAccomplishments that I'm proud of\nI'm proud of both coming up with the idea and getting a decent way along to getting these APIs working, as I've never properly worked with APIs before.\nWhat I learned\nI learnt a lot about working with APIs and AWS.\nWhat's next for Gaggle Translate\nI'd really like to actually finish this project. Without the time constraints I can work on getting all the parts working properly. It may seem silly to spend lots of time on a project that literally translates things to squawks, but It would be really nice to have a finished project using APIs that actually works (and hopefully looks good).", 
    "project_name": "Gaggle Translate", 
    "project_tags": [
      "html", 
      "css", 
      "php", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/gaggle-translate"
  }, 
  {
    "hackathon_name": "CUES Hackathon 2016 Powered by ARM", 
    "project_description": "Inspiration\nDo you want to find out who your true friends are? Who likes you in secret? Who really hates you? You're in luck, and with just a simple game of Thrisbee\u2122 you can now find out!\nWhat it does\nPass it round, and see the stats on the cool display and enjoy your metrics!\nIt'll show you plenty of useful information such as who's passing the Thrisbee\u2122 to whom, who's the most popular, the least, how fair the game is and how much fun you're having!\nHow we built it\nThe main micro:bit is mounted on the underside of the Thrisbee\u2122. Each person playing the game then has a micro:bit on their person broadcasting who they are over Bluetooth, and the Thrisbee\u2122 uses the RSSI values of the player's bits broadcasts to determine who's holding it.\nThe Thrisbee\u2122 then relays the player information and its accelerometer values to a gateway bit connected to a laptop, which gets the data over serial, into matlab which plots graphs and key performance indicators in real time.\nChallenges we ran into\nThe Bluetooth link had some issues of reliability when sending more data over the link, and not all data was received and recovered properly. \nWe also worked on some mechanics calculations to calculate throw speed, impact, rotations speed and distance thrown, getting promising results but needing more time to implement them fully.\nAccomplishments that we're proud of\nWe made the Thrisbee\u2122 communicate both with the player's bits and with the gateway bit simultaneously, enabling it to relay which player is holding or throwing it to the computer.\nIt's also great fun and illuminating in terms of your social standing..\nWhat we learned\nWe learned a lot about using Bluetooth to communicate between these devices, as well as getting familiar with the mbed platform and microcontroller to microcontroller communication.\nWe also learned about the limitations of accelerometers and magnetometers, such as limited sampling rates and the importance of signal processing.\nWhat's next for Internet of Thrisbee\u2122\nThe next steps are using people's smartphones instead of micro:bits for the detection of who's holding it, and making an app that gets the data over Bluetooth from the Thrisbee\u2122, processes it and shows all the graphs and metrics.\nAdd a rechargeable battery, embed the microcontroller in an injection molded custom Thrisbee\u2122, pair it with an induction charger and a smartphone app, and sell it to ultimate frisbee teams and anyone who likes fun!", 
    "project_name": "Internet of Thrisbee\u2122", 
    "project_tags": [
      "c++", 
      "matlab"
    ], 
    "project_url": "https://devpost.com/software/internet-of-thrisbee"
  }, 
  {
    "hackathon_name": "CUES Hackathon 2016 Powered by ARM", 
    "project_description": "Our Inspiration\nOne of our team members, Kian, is a diver. He realised that novice divers often struggle conveying problems they may be having in the water to their instructor and then they panic.\nWhat it does\nThis device reads the student's heart rate, breathing rate and their temperature.\nThis data is sent to the instructor wirelessly. The data is then analysed and if any of the variables fall outside of a critical range a buzzer is sounded to alert the instructor of the potential danger the student is in.\nHow we built it\nWe set out to work out how all of the various components worked with the micro bit. Then we joined them all together on the micro bit and analysed the various inputs to get coherent outputs, which were then further analysed to see if they fell outside of a certain range\nChallenges we ran into\nWe first tried to use a peripheral temperature sensor for it's increased accuracy but it was determined that the clock speed of the micro bit made it incompatible\nWe also were going to interface the system with an android device but were unable to connect the two devices. So we opted for the micro bit -> micro bit interface\nAccomplishments that I'm proud of\nI have never worked with electronics before and so making a working, and potentially useful, device in general was a great achievement\nWhat I learned\nWhat's next for Dive Bit\nWe could fully integrate the system into diving gear, and make it built into the suit and so it would be as easy as wear and go!", 
    "project_name": "Dive Bit", 
    "project_tags": [
      "c++", 
      "love"
    ], 
    "project_url": "https://devpost.com/software/dive-bit"
  }, 
  {
    "hackathon_name": "CUES Hackathon 2016 Powered by ARM", 
    "project_description": "What it does\nHow we built it\nChallenges we ran into\nAccomplishments that we're proud of\nWhat we learned\nWhat's next for The Right Way", 
    "project_name": "The Right Way", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/the-right-way-agcyp6"
  }, 
  {
    "hackathon_name": "CUES Hackathon 2016 Powered by ARM", 
    "project_description": "Inspiration\nWe had a lot of domino's boxes and redbull cans lying around and needed to clear some space.\nWhat it does\nAllows the user to make sweet sweet music simply by moving his discarded dominos box from the night before up and down.\nHow we built it\nAn Ultrasound sensor measures the height of a dominos box which is then converted into the corresponding frequency using a magic formula coded into the Micro:Bit, then the sound is finally outputted through a speaker using PWM.\nChallenges we ran into\nToo many to fit into this text box. Here are just a couple of them:\n-Ultrasonic sensor only working with C++, micro:bit music library only available in microPython\n-solved by transmitting frequency from a micro:bit running C++ to another micro:bit running micropython which then outputs the sound\n-radio transmission to slow (sound lags too heavily), hence  we are now using one micro:bit utilising manual PWM programming in C++\nWhat we learned\n-Be creative with the limited resources available\n-24 hours isn't as long as you think\n-Not every day is Wednesday (my dudes)", 
    "project_name": "Micro:bit meets Domino's and RedBull", 
    "project_tags": [
      "c++"
    ], 
    "project_url": "https://devpost.com/software/microbit-meets-domino-s-and-redbull"
  }, 
  {
    "hackathon_name": "CUES Hackathon 2016 Powered by ARM", 
    "project_description": "Inspiration\nAs engineering students who love coding, we realised that sitting at a laptop all day has huge consequences on our health, in particular, on our backs and necks. We often overlook this issue, and by the time we realise it, we have already got fat and unhealthy. Following the recent success of PokemonGo as people stormed out to streets to catch Pokemons, it has inspired us to create a game to encourage programmers to work out more.\nWhat it does\nWe have created connection between the BBC:Microbit and a laptop. By attaching a Microbit to yourself, you can play the games on your laptop by moving your body, and hence exercising your body.\nHow we built it\nWe used the Python API and radio features of the Microbit to receive gestures on the laptop, and then the data is transferred onto Unity Game Engine (C#).\nChallenges we ran into\nTo achieve robust gesture control we had to explore different ways to interact with the Microbit. Also passing strings between Microbits and transferring data via TCP was hard for Python-C#.\nAccomplishments that we're proud of and what we learned\nWe have learnt new ways of utilising Microbit data; and discovered how to connect from Microbit to high level applications such as Unity wirelessly.\nWhat's next for CoderDodge\nWe would like extend the range of exercises that can be done on this platform, such as trainer programs. We would also like to extend into Virtual Reality.", 
    "project_name": "CoderDodge", 
    "project_tags": [
      "python", 
      "c#", 
      "tcp", 
      "unity"
    ], 
    "project_url": "https://devpost.com/software/coderdodge"
  }, 
  {
    "hackathon_name": "CUES Hackathon 2016 Powered by ARM", 
    "project_description": "Inspiration\nmake a game that teaches people to dance\nWhat it does\nlets you play a dance game anywhere\nHow I built it\nsticky tape \nChallenges I ran into\npython\nAccomplishments that I'm proud of\npython\nWhat I learned\npython\nWhat's next for Dancekicks\npresentation in LT0", 
    "project_name": "Dancekicks", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/dancekicks"
  }, 
  {
    "hackathon_name": "CUES Hackathon 2016 Powered by ARM", 
    "project_description": "Inspiration\nLearn how to effectively throw a ball. \nWhat it does\nThe Kine-Fanatic allows us to monitor the accelerations of different critical points on the body in movements like throwing, punching, or shooting a basketball. After analyzing multiple actions, we could classify newly recorded actions based on the data we collected.\nHow we built it\nWe accomplished data collection and transmission with BBC Micro:bit programmed in C++. Three sensor micro:bits sent acceleration data to the main hub micro:bit which had a serial link to a computer. We then imported the data into Matlab for analysis and classification.\nChallenges we ran into\n\nEliminating gravity from the accelerometer readings.\nTransmitting data to the central hub from three active micro:bits.\nFinding the same critical points in different recordings.\n\nAccomplishments that we're proud of\n\nCollecting consistent data that was usable for classification.\nCollecting all data with a single serial link.\nClassifying new recordings as one of three actions.\n\nWhat we learned\n\nHow to filter data based on imperfect sensors.\nHow to utilize low energy Bluetooth connectivity to interconnect our sensors.\nHow to use Matlab classification of data.\n\nWhat's next for Kine-Fanatic\nUsing this same method on a much larger sample size would have interesting results. Additionally, attempting to classify a movement as \"good\" and \"bad\" could lead us to give the user feedback on their action.", 
    "project_name": "Kine-Fanatic", 
    "project_tags": [
      "c++", 
      "matlab"
    ], 
    "project_url": "https://devpost.com/software/kine-fanatic"
  }, 
  {
    "hackathon_name": "CUES Hackathon 2016 Powered by ARM", 
    "project_description": "Inspiration\nImagine you're cycling down the road, behind another cyclist, but then he/she suddenly stops. You don't realise and pummel into the back of them. That's not ideal! We're here to combine bike lights with simple safety features including easy indicator lights, brake lights and of course, simple installation. \nThat's what we do. We find solutions for problems.", 
    "project_name": "Bikio Lightio", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/bikio-lightio-80scq9"
  }, 
  {
    "hackathon_name": "CUES Hackathon 2016 Powered by ARM", 
    "project_description": "Inspiration\nWhen cycling to the ARM 2016 hackathon, we experienced some of the commons problem of cycling in a group. Issuing directions is not always easy, and keeping up with the leader can be even harder - if someone falls behind, it becomes difficult to attract the group's attention to get them to wait.\nWhat if there were devices that you could connect together to solve this problem?\nWhat it does\nThe device links up to other devices nearby: you select a channel, and specify whether you want to be a leader or a follower. Leaders can press buttons to propagate directions to their followers (left, right, stop), and followers can ask the rest of the group to stop and wait for them if there is a problem.\nHow I built it\nWe've been using the BBC microbit as the foundation for this project - we wrote code in python to handle all of the logic, and we soldered switches and a battery pack to the board, as well as a transistor to operate a buzzer.\nChallenges I ran into\nThe buzzer could not be connected directly to the output pins of the microbit due to lack of current - therefore, we used a transistor to provide enough current for the buzzer to sound, using one of the output pins to control it.\nAccomplishments that I'm proud of\nAs the hackathon progressed, we added more and more functionality. For example, if someone tries to designate themselves as leader on a channel that already has one, they simply become a guest - we decided to implement this in order to reduce confusion. The buzzer was an addition that we are very proud of - we managed to overcome the problem with our knowledge of electronics in order to still be able to implement this functionality.\nWhat I learned\nWe all trained our problem-solving skills and got better at coding and digital electronics.", 
    "project_name": "Bike Net", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/bike-group"
  }, 
  {
    "hackathon_name": "CUES Hackathon 2016 Powered by ARM", 
    "project_description": "Inspiration\nWith an ageing population in many countries, there is a need for care for elderly, especially those who live alone.\nWhat it does\nOur project has a heart monitor, which sends a message to the watch if the heartrate drops . In the future Watch will be onnected to an Android App. Second module connected to the Watch is the Kitchen Module. It sends info to the watch, when the water is boiling and let's user remotely turn off the kithcen equipment. Watch, Kitchen Module and Heartrate sensor are in one network. \nSecond part of the project is an Emergency Button. After pressing it it will send an emergency message to the officials using an app on our Android Device. \nHow we built it\nChallenges we ran into\nLimited programming experience, lack of RAM in Microbits. Impossible Bluetooth programming\nAccomplishments that we're proud of\nWe got a working prototype with basic functions. We managed to make an app to contact the emergency services\nWhat we learned\nAndroid studio, teamwork, leadership. How to translate Python to C++\nWhat's next for Integrated Support Project for the Ageing\nIntegrating the Heart Sensor and Watch into the emergency button and the app so our system is fully integrated", 
    "project_name": "Integrated Support Project for the Ageing", 
    "project_tags": [
      "javascript", 
      "python", 
      "c++", 
      "android-studio"
    ], 
    "project_url": "https://devpost.com/software/integrated-support-project-for-the-ageing"
  }, 
  {
    "hackathon_name": "CUES Hackathon 2016 Powered by ARM", 
    "project_description": "We saw a live plot of the Microbit accelerometer data on an app and were intrigued by the way the sensor readings reacted to our movement. An idea for a game started to appear......\nMicro-2048 is a gesture driven 2048 game. The player swipes a Microbit across the air to move the tiles on the screen. It uses radio connection, which means that the player can play it without sitting in front of a computer.\nWe used two Microbits, one is connected to the computer via serial. This then talks to a Node.js server, which relays the sensor information to a browser based javascript game. The other Microbit acts as a game controller, it publishes the gestures it detects through the radio. Together they make a user gesture driven game.\nWe initially had another idea that involved a lot of electronics. Unfortunately, we lacked the components and the experience needed to execute that idea, so we had to switch ideas with only 12 hours left to spare. However, we did manage to successfully pivot and reuse most of our code for a completely different application\nA few of our teammates no little experience with python, but they managed to learn rapidly during the course of the Hackathon and gained a fundamental knowledge by the end of it. \nWe have learnt is that it is much more efficient to start with something with basic functionality and then iterate to make it better, rather than aiming too high from the beginning. Also, it's very important to be flexible and make directional changes when necessary. The most important of all is that we should enjoy the process, and not chase the destination.\nThis project act as a proof of concept that Microbits can bring a completely new experience to gaming. In the future, more games may be powered by the Microbit with more complex gesture drove interfaces.", 
    "project_name": "micro 2048", 
    "project_tags": [
      "javascript", 
      "node.js", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/micro-2048"
  }, 
  {
    "hackathon_name": "CUES Hackathon 2016 Powered by ARM", 
    "project_description": "Inspiration\nFor elderly, ill or disabled family and friends, the risk of falling is a serious concern. \nIn fact, research carried out by the Department of Surgery at the University of Rochester medical centre found that the elderly over the age 70 are three times more likely to be fatally injured. In many cases, for elderly adults who are frail and have pre-existing medical conditions, what seems like a minor fall can lead to a broken hip or bones. In the scenario that these individuals are alone or cannot easily gain access to someone - this can lead to far reaching and very serious consequences. \nWhat it does\nWhen a user falls, trips or sustains any significant impact, an emergency call is established with a list of guardians informing them of the user's emergency. \nHow we built it\nThe necklace consists of a BBC Microbit, which uses its accelerometer to measure significant impact. When the acceleration exceeds a threshold, the Microbit sends an emergency message via Bluetooth LE to a Raspberry-Pi. The Raspberry-Pi makes an HTTP GET request to our Node.js server, which in turn establishes a call with the guardian of the user using the Twilio Call API. \nChallenges we ran into\n\nthe Twilio API was not straight forward \nthe microbit is designed for children, and has thus a built-in authentication process, which you're required to do before sending any data. \nbluetooth Low Energy disconnects regularly and at a lower range than expected. \n\nAccomplishments that we're proud of\n\nwe built an end-to-end system, which is precisely what we wanted to do from the offset. \nour project encompasses many different technologies, from hardware programming with C++ and Python to setting up a server in Node.js and using an external API service. \n\nWhat we learned\n\nwe've learnt to program the microbit in C++, and the Raspberry-Pi in Python and Bluetooth Programming in general. \n\nWhat's next for AlertLink\n\nbi-directional calls \nlive notifications and data-logging\nmachine learning for better classification of falls\nmaking it waterproof", 
    "project_name": "AlertLink", 
    "project_tags": [
      "node.js", 
      "twilio", 
      "raspberry-pi", 
      "c++", 
      "python", 
      "bluetooth"
    ], 
    "project_url": "https://devpost.com/software/alertlink"
  }, 
  {
    "hackathon_name": "CUES Hackathon 2016 Powered by ARM", 
    "project_description": "survival\nProject for ARM Cambridge Hackathon 2016\nby Anh Nguyen, Bence Kasza, Khanh Nguyen and Adien Liusie", 
    "project_name": "Don't Die", 
    "project_tags": [
      "c++", 
      "makefile"
    ], 
    "project_url": "https://devpost.com/software/survival-gh5lnr"
  }, 
  {
    "hackathon_name": "CUES Hackathon 2016 Powered by ARM", 
    "project_description": "Inspiration\nResearch suggests two thirds of students are bored in classrooms. We want to reinvent what hasn't been changed for centuries, and do it in a big way. The UK government plans to provide over a million micro:bits to high school students, and we decided that this is a great opportunity to help both students and teachers by creating a fun and interactive classroom.\nWhat it does\nEdukit:bit is an app built to work with students' micro:bits by providing a platform for peers to compete in mini-games set by teachers. It's a fun environment which should get students involved and help them have a better learning experience.\nHow I built it\nThe micro:bit was built using the C++ compiler on the mbed, and the Android app was, of course, built on the Android Studio app. \nChallenges I ran into\nBluetooth was a massive issue, and we had to give up on the connectivity, and ended up using the micro:bit as a virtual keyboard.\nAccomplishments that I'm proud of\nGanesh: Conducted my first solder\nMihai: Developed leadership skills\nMaria: Learning how to solder / image processing\nMrinank: Pulling an all-nighter\nWhat's next for Edukit::Bit\nExpanding the platform to include more quizzes and mini-games, and revolutionising the classroom environment", 
    "project_name": "Edukit::Bit", 
    "project_tags": [
      "c++", 
      "java", 
      "android-studio"
    ], 
    "project_url": "https://devpost.com/software/edukit-bit"
  }, 
  {
    "hackathon_name": "CUES Hackathon 2016 Powered by ARM", 
    "project_description": "Inspiration\nSaving the World from its laziness \nWhat it does\nHow we built it\nChallenges we ran into\nAccomplishments that we're proud of\nWhat we learned\nWhat's next for Eco - Sleep", 
    "project_name": "Eco - Sleep", 
    "project_tags": [
      "python", 
      "c++"
    ], 
    "project_url": "https://devpost.com/software/eco-sleep"
  }, 
  {
    "hackathon_name": "CUES Hackathon 2016 Powered by ARM", 
    "project_description": "", 
    "project_name": "Gravitational keyboard with Python interactive shell", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/py3_idle_in_microbit"
  }, 
  {
    "hackathon_name": "CUES Hackathon 2016 Powered by ARM", 
    "project_description": "Inspiration\n\nTouchscreens and touchpads\nHand drawn touch sensors\n\nWhat it does\n\nSensor consists of a grid of graphite (pencil drawn) squares.\nTouching a square increases its capacitance; this is detected by measuring (with an Arduino nano) the time taken to charge the capacitor.\nFinger location is used to control tempo and pitch of tune being played by a micro bit\nMicro bit LEDs visualise the tune being played, and can display the detected location of a finger on the touch pad.", 
    "project_name": "MusCaT", 
    "project_tags": [
      "arduino", 
      "python", 
      "c++"
    ], 
    "project_url": "https://devpost.com/software/muscat"
  }, 
  {
    "hackathon_name": "CUES Hackathon 2016 Powered by ARM", 
    "project_description": ".-- .- .. - / ..-. --- .-. / - .... . / .--. .-. . ... . -. - .- - .. --- -.", 
    "project_name": "Wacky Messenger", 
    "project_tags": [
      "python", 
      "love", 
      "caffeine"
    ], 
    "project_url": "https://devpost.com/software/morse-messenger"
  }, 
  {
    "hackathon_name": "CUES Hackathon 2016 Powered by ARM", 
    "project_description": "Inspiration\nYou've seen the Theremin? We are the next that.\nWhat it does\nBy tilting and turning a microbit, a harmonised melody is created on 3 other microbits.\nHow we built it\nWith 1 microbit acting as the network master and 3 other as its slaves, we broadcast the direction and tilt to the slave microbits. The slaves calculate the octave and specific note of the scale from this data and produces an appropriate pitch on a Grove Buzzer. We have modified the code on each of the microbits so that it harmonises the notes produced.\nChallenges we ran into\nLimited electronics/ coding experience with some team members. Lack of components to test project efficiently. Making the product easy to use but broad in terms of sounds it could create.\nAccomplishments that we're proud of\nSplitting work up evenly between the group - we all had specific tasks that worked in tandem. Encorporating and developing all our ideas into the final product. It actually worked!!\nWhat we learned\nSleep isn't necessary. How to use I/O on computers to create real devices that respond to users.\nWhat's next for Microrchestra\nReplace buzzers with speakers so that we can play with the tones and timbres of the music.", 
    "project_name": "Microrchestra", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/microrchestra"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nWe were looking for inspiration and someone said \"do something a CEO can use\". We decided to create a fintech app, using CapitalOne and BlackRock APIs to generate the best three options to invest, looking at different ratios and returns (peRatio, pbRatio, returnonEquity, returns from year 1 and year 5). Furthermore, we wanted to make it more useful, so, we had the idea to implement this project for projects with disabilities. \nWhat it does\nUsing American Sign Language, you can ask Alexa to do different tasks for you: get your account balance, make payments for you, generate the first three best investment options and interact with Alexa during executing those tasks. \nHow we built it\n\nLeap-Motion: we created a machine learning program, which \"reads\" the signs and generate a string, which is sent to Alexa\nCapitalOne: we used their API to access a set of accounts, in order to make a payments and to generate the balance for the user's account \nAlladin: we used their API to access different investment portfolio and through an econometrics model, it returns your best three options for investment \nAlexa: we integrate everything as an Alexa's skill \n\nChallenges we ran into\nWe had some problems Amazon Web Services and we had to get use with their platform, in order to learn how to program Alexa. Furthermore, AWS Lambda did not work. \nAccomplishments that we're proud of\nWe learnt node.js! Furthermore, one of our team member was at his first Hackathon and another one is with a non-programming background, so, we are proud of the whole program! \nWhat's next for Hack the Accessibility\nDevelop the program, add more financial features and signs.", 
    "project_name": "Hack the Accessibility", 
    "project_tags": [
      "javascript", 
      "node.js", 
      "leap-motion", 
      "alexa"
    ], 
    "project_url": "https://devpost.com/software/hack-the-accessibility-pgfc9a"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nWe live in the world where one has always stay in touch. Our ability to quickly read emails or just access internet is often essential in our work. And yet still, over 60% of world population doesn't have access to internet. Even we often find ourselves in a position where we either run out of mobile data, don't have any credits on our account or there is no internet connection in our area. We decided to fix this problem with Networkless.\nWhat it does\nNetworkless is basically an offline web browser, that allows you to view websites even if you don't have access to internet. All you need is ability to send SMS from your phone and in return you can view any website you want in text version.\nHow we built it\nWe built an Android app, which looks similar to a traditional web browser. When you type the desired website into address bar, our app will send it as SMS to Twilio service. Our Amazon based server will then collect the HTML code of typed website, compress it and send the code back to user's phone (again, via SMS). \nChallenges we ran into\nIt turned out that the HTML code of websites is usually far too big to fit in text messages. Typical Wikipedia pages contains hundreds of thousands of characters, while typical SMS can contain up to 160 characters. We dealt with it by heavily compressing the HTML file and removing unnecessary parts from it.\nWhat's next for Networkless\nImproving the compression of html file is our highest priority. It would decrease number of SMS sent for website to load, and therefore, improve app performance significantly. Other features we wish to implement:\n-saving websites offline\n-Google/Wikipedia search\n-Wolphram Alpha replies\n-facebook/gmail notifications\n-turn on SMS notifications automatically after phone loses internet connection", 
    "project_name": "Networkless", 
    "project_tags": [
      "java", 
      "javascript", 
      "android", 
      "node.js", 
      "css", 
      "html", 
      "amazon-web-services", 
      "twilio"
    ], 
    "project_url": "https://devpost.com/software/networkless-offline-sms-web-browser"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nThe past is full of memorable moments captured in only black and white. From pictures of Einstein and US presidents, to the first kiss on camera, photography was fundamentally different without colour. That's why we decided to add colour to the past.\nWhat it does\nTurns grayscale images into coloured ones.\nHow we built it\nWe built the project using a neural network for colouring the pictures and a python server for uploading them.\nChallenges we ran into\nChoosing the right parameters and configuration for the neural network\nDeciding what features to use for training\nProcessing power limitations -> Tensorflow can't use GPU on Windows\nLots of preprocesing for the data\nLarge training times\nNormalizing the data to bring it into the RGB space\nAccomplishments that we're proud of\nIt works ok for a couple of images\nYou can see the original shape of the object\nPython server works (yay)\nWhat we learned\nWorking with TensorFlow\nA lot of Machine Learning\nBuilding a server in Python\nWhat's next for DeepColour\nWe will add the possibility of uploading larger images.", 
    "project_name": "DeepColour", 
    "project_tags": [
      "python", 
      "html5", 
      "css3", 
      "javascript", 
      "numpy", 
      "scikit-learn"
    ], 
    "project_url": "https://devpost.com/software/deepcolour"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Internet connected doorbell\nConfigure using alexa\nSettings page\nTell you with twillio\nEmail\nPusher", 
    "project_name": "Ding", 
    "project_tags": [
      "python", 
      "c", 
      "javascript", 
      "html", 
      "css", 
      "alexa", 
      "twilio", 
      "pusher"
    ], 
    "project_url": "https://devpost.com/software/dingly-dong"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nSaw the pusher demo and heard it beep. So I thought it should be able to play mp3 sounds, and multiple people should be able to amplify a song \nWhat it does\nIt generates a 'room' after a host uploads a mp3 file.\nusers type in the rooms url e.g. amplifyr.org/room/41345 (which is randomly generated) \nhost pushes music after the mp3 files done buffering and everyone listens to the same tunes simultaneously making an array of stereo speakers \nHow I built it\nAWS & nodejs for backend.\nHTML & CSS, Javascript & jquery for front-end\nPusher API\nChallenges I ran into\nLearning Javascript and other things without prior knowledge. Get (or attempt to) Pusher working properly. Working with CSS when it doesn't want to align things properly.  \nAccomplishments that I'm proud of\nGetting music playing on the web, Getting the music player to work and colored blue (REALLY it was in base64 svg and was a mess to convert). Using bash for backend.  \nWhat I learned\nHTML & CSS, Javascript, Jquery, NodeJS. Things break either fix it or break it more\nWhat's next for Amplifyr.org\nV2.0 :D", 
    "project_name": "Amplifyr.org", 
    "project_tags": [
      "javascript", 
      "pusher", 
      "domain", 
      "amazon-web-services", 
      "css3", 
      "html5", 
      "bash"
    ], 
    "project_url": "https://devpost.com/software/amplifyr-org"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "About\nMonzo is a bank based entirely on a smartphone app. However, we noticed that if your went abroad you may not be able to view notifications for transactions or your balance if you did not have data roaming which can be quite expensive. Luckily SMS is cheap and so this project allows a user to request that transaction information is sent to them via SMS using the Twilio API and Monzo API. We found that this is actually a requested feature on the Monzo forum.: community.monzo.com/t/abroad-sms-notifications/4854\nThe AWS server runs the code to authenticate users with Monzo's OAuth as well as handling webhooks from Monzo and Twilio. At this time it is not possible to authenticate other users due to Monzo limitations. Users will get transaction reports near instantly pushed to them and they can send messages to our bot to ask questions about their account such as their balance and daily spend. \nWe aim to integrate IBM Watson further into the project to allow natural conversations with the system.", 
    "project_name": "MonzoSMS", 
    "project_tags": [
      "php", 
      "ibm-watson", 
      "twilio"
    ], 
    "project_url": "https://devpost.com/software/monzosms"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nInterest in the game's aesthetic, and an opportunity to use cutting edge technology usually outside our range of acquisition.\nWhat it does\nVirtual Reality 80s style skateboarding game.\nHow we built it\nBuilt from the ground up using Unity, with development kits from Leap Motion and Oculus Rift, alongside gyroscopic user input through a custom made rigged skateboard. Also a live web accompaniment.\nChallenges we ran into\nMost of the team's unfamiliarity with Unity. No sleep. \nAccomplishments that we're proud of\nCreating a game that's fun, which not only entertains us, but incites excitement and interest in those around us. \nWhat we learned\nWider unity skills. The complexities of peripheral interfaces. Problem solving can be undertaken during extreme tiredness.\nWhat's next for Skater Wave\nSleep?", 
    "project_name": "Skater Wave", 
    "project_tags": [
      "c#", 
      "unity", 
      "arduino", 
      "c", 
      "php", 
      "mysql", 
      "sass", 
      "css", 
      "javascript", 
      "pusher", 
      "amazon-web-services", 
      "oculus-gear-vr", 
      "leap-motion"
    ], 
    "project_url": "https://devpost.com/software/skater-wave"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nShareLive was inspired by an article published in the \"Frontiers in Psychology\" journal by researchers at the University of Oxford about how sharing the experience of listening to music can increase social bonding.\nWhat it does\nShareLive allows users to share music live (there's up to 5 seconds of latency) with friends over the internet.\nHow I built it\nMost of the code is written in JavaScript. There's a very simple (18 lines of code) back end written in PHP. The front end is stylised using bootstrap.\nChallenges I ran into\nYouTube doesn't allow all videos to be embedded, due to the various different licensing arrangements they have - so I had to make sure my web app took this into account and didn't offer users videos which were unplayable. I designed a bespoke events protocol using pusher to synchronise clients \"peer to peer\" - all the back end does is authorise connections (all connections are automatically authorised, however pusher requires connections to be authorised using a back end before they can broadcast data).\nUnfortunately my web app doesn't yet work on mobile due to issues with automatically playing / pausing videos (see the YouTube documentation for more information). I hope that this issue can be overcome in the near future.\nAccomplishments that I'm proud of\nIt all works fairly smoothly. The user interface is quite friendly, and is looks reasonably nice. This was my first \"major\" (4+ hours of coding time) project using JavaScript - it's a good way to write cross-platform applications.\nWhat I learned\nI learned how to write a substantial application using JavaScript, and how to use Pusher without having a central backend to keep track of state. I think this is really useful - by using client-side programming and peer-to-peer communication costs are kept to a minimum and applications are generally scalable by nature.\nWhat's next for ShareLive\nThere are a few items on the to do list. I'd really like to integrate with Spotify instead of YouTube, as Spotify offers greater music choice and higher sound quality. Access to their APIs is by application / invitation only, so hopefully this proof-of-concept can show that this is a good idea.", 
    "project_name": "ShareLive", 
    "project_tags": [
      "javascript", 
      "php", 
      "html5", 
      "css3", 
      "pusher", 
      "bootstrap"
    ], 
    "project_url": "https://devpost.com/software/sharelive"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "BrumHack5\nBrumHack 5.0 - Brainy Bird\nContent\nThe overall plan for the project is as follows:\n\nUse the Muse headband to detect eye-brow movement.\nThe eye-brow movement will be used to play our own edition of Flappy Bird!\nAn Amazon Webserver will be available to submit scores to and will maintain a leader board.\nYou can text the web service a name (a friend\u2019s name) and it'll reply with their score, position in the ranks and the difference between you and them.\n\nAuthors\nTomBClarke (Tom Clarke), thekyle28 (Kyle Allen-Taylor), rrama () and VladToncu (Vladi Boy).", 
    "project_name": "BrainyBird", 
    "project_tags": [
      "java", 
      "php", 
      "amazon-web-services", 
      "twilio", 
      "mysql", 
      "android", 
      "muse"
    ], 
    "project_url": "https://devpost.com/software/brumhack5"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nI came to the hack with very little sleep, on the way here I joked with my friends about making a bedtime story generator. This then became the inspiration for my hack.\nWhat it does\nAsk Alexa for a bedtime story and it will generate one and read it to you.\nI also made a website version in p5.js\nHow I built it\nI used AWS to host the backend node.js server, alexa skills to deal with that stuff and tracery, a javascript library to generate the stories \nChallenges I ran into\nGetting alexa to do anything is a pain\nAccomplishments that I'm proud of\nmaking something cool that works\nWhat I learned\nhow AWS works, what node.js is. \nWhat's next for Random Bedtime Stories\nmore story options\nVideo of it in action ; https://twitter.com/uveavanto/status/792752556778938368", 
    "project_name": "Random Bedtime Stories", 
    "project_tags": [
      "alexa", 
      "amazon-web-services", 
      "javascript", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/random-bedtime-stories"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Alexa's Dungeon\nIn this game you explore a dungeon from a top down perspective, you move your Amazon Echo Dot around the screen using voice commands with the objective of searching out evil rubber ducks to smite! The enemies will try to attack you and if you take too much damage or walk into them enough, you will die and lose the game.\nSimple Tech Breakdown\nThis is a game where you use Amazon Alexa with and AWS Lambda  to communicate with an AWS server which controllers a character on the front end via Pusher.", 
    "project_name": "Alexa's Dungeon", 
    "project_tags": [
      "javascript", 
      "amazon-web-services", 
      "pusher", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/alexa-s-dungeon"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Task Master\nA creation of a business aimed task and project management system.\nWeb Access URL: bcuhacks.alexanderdavis.tech\nConcept\nBusiness focused task management program on Windows\nUtilizes web application concept)\nUse of a Login system\nPossibility of a file upload area (use of next cloud if implemented?)\nUse of a Database system (MySQL)\nPossible features\nLive tracking and analytics into tasks\nIntegration with Alexa\nAlexa voice notifications", 
    "project_name": "Task Master", 
    "project_tags": [
      "php", 
      "html", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/bcu-hacks"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nInspired by something I saw on reddit over summer, I wanted to faff around with opengl shaders but in a way that didn't involve writing opengl shaders.\nWhat it does\nA language that compiles (hopefully safely) to opengl shaders, and a live editing application that renders graphics as you edit scripts.\nWhat I learned\nDon't do macos programming in rust\nWhat's next for shady\nMore language niceness, loading of pictures to use with images, more?", 
    "project_name": "shady", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/shady"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nDeep learning is pretty cool, the fact we can take images and identify objects in them could be incredibly useful to the visually impaired.\nHow I built it\nMicroservices\nThere are several core microservices behind see.\nLanguage\nLanguage is the microservice for taking in sentences, tokenizing them and offering several different services.\n\nSimilarity - This is the similarity of two words based on their shared synonyms\nNouns - This returns all of the nouns in a given sentence\nTag - This tags words with their correct word classes.\n\nLanguage is hosted using Amazon AWS EC2.\nTagging\nTagging is a microservice that is always connected to the client. Using Socket.IO and base64 encoded image streams I am able to have a realtime tagging service using the Clarifai API.\nTagging is also hosted using Amazon AWS EC2, it also statically serves it's images using Caddy TLS at images.aran.site (which are named using UUID generation). This also using HTTPS.\nChallenges I ran into\nI had originally spent a lot of time using the Microsoft cognitive service computer vision API. However, I found a flaw in the API regarding it's Image URL parameter.\nAccomplishments that I'm proud of\nThe basic functionality is all there, you can ask if something is in the room, or get a description of the top 5 tags relating to the room. In the future I would love to explore the natural language processing aspect further, potentially generating full sentences describing the room and being able to infer the meaning of more advanced inputs.", 
    "project_name": "See", 
    "project_tags": [
      "jquery", 
      "javascript", 
      "python", 
      "flask", 
      "node.js", 
      "express.js", 
      "socket.io", 
      "amazon-web-services", 
      "clarifai", 
      "amazon-ec2"
    ], 
    "project_url": "https://devpost.com/software/see-81a6u7"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nGames and apps that require you to be active and social have been extremely popular recently. Our app capitalizes on this trend by incentivizing students to go around campus finding beacons, completing their challenges and earning points towards the leaderboard. \nWhat it does\nWhen you get into the range of the beacon, you get a notification that there is one nearby. By finding it and interacting with it, you get a quest assigned, that might be a question, a task to go somewhere or do something, etc. By completing the quest properly or giving the right answer, you complete the quest and you receive points for this. You can only get one quest a day from every particular beacon.\nHow I built it\nThe back-end was constructed using the django framework for Python. It is hosted on c9.io, which provides an excellent platform for your locally-built server.\nThe native android app was built in Java 8.\nChallenges I ran into\nConstructing the database properly was the biggest struggle during the weekend. After managing to link up everything properly and getting it to work in django, in the end the problem of hosting the server in Heroku popped up. The SQLite database that we had created was unable to run on Heroku, which automatically converted it to PostgreSQL. With limited time and options, c9.io proved to be a great tool for easily hosting your server on the net.\nAccomplishments that I'm proud of\nSuccessfully hosting the server in an online environment with properly working End-Points for the client to use\nWhat I learned\nThe database is the bread and butter of the back-end, but even if you have the perfect server, it all depends on the front-end in the end.\nWhat's next for Beacon Quest\nFinishing up the prototype; implementing the leaderboards; creating more and various challenges; working with students and staff on campus in order to provide the best user experience and content for the beacons.\nBeaconQuest 2 in 2018", 
    "project_name": "Beacon Quest", 
    "project_tags": [
      "django", 
      "python", 
      "java", 
      "android"
    ], 
    "project_url": "https://devpost.com/software/beacon-quest"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "TFL-Disrupt\nSMS text messaging service for live updates on London Underground/TFL disruptions.", 
    "project_name": "TFL Disrupt", 
    "project_tags": [
      "python", 
      "twilio", 
      "api.ai", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/tfl-disrupt-1"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nGoogle Assistant and being able to use commands and access information without the internet. \nWhat it does\nSend commands to a number and get information\nHow we built it\nPython, Flask, Twilio and a bunch of APIs that are used to obtain information\nChallenges we ran into\nTrying to integrate multiple APIs with the web calls in flask and filter valid information for end-users\nAccomplishments that we're proud of\nBeing able to get an Alpha build that can complete basic functions and the application is modular which means it's easily extendable\nWhat we learned\nUsing Twilio, Flask and python in conjunction with eachother \nWhat's next for SMSTerminal\nImprove functionality and more commands, possible integration of AI, ML and Databases\nCode\nhttps://github.com/Jasien-Elimy/BrumHack5", 
    "project_name": "SMSTerminal", 
    "project_tags": [
      "python", 
      "google-maps", 
      "twilio", 
      "wolfram-technologies", 
      "forecast.io", 
      "flask", 
      "json", 
      "google"
    ], 
    "project_url": "https://devpost.com/software/smsterminal"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Laravel PHP Framework\n\n\n\n\n\nLaravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable, creative experience to be truly fulfilling. Laravel attempts to take the pain out of development by easing common tasks used in the majority of web projects, such as authentication, routing, sessions, queueing, and caching.\nLaravel is accessible, yet powerful, providing powerful tools needed for large, robust applications. A superb inversion of control container, expressive migration system, and tightly integrated unit testing support give you the tools you need to build any application with which you are tasked.\nOfficial Documentation\nDocumentation for the framework can be found on the Laravel website.\nContributing\nThank you for considering contributing to the Laravel framework! The contribution guide can be found in the Laravel documentation.\nSecurity Vulnerabilities\nIf you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell at taylor@laravel.com. All security vulnerabilities will be promptly addressed.\nLicense\nThe Laravel framework is open-sourced software licensed under the MIT license", 
    "project_name": "Dots", 
    "project_tags": [
      "php", 
      "html", 
      "javascript", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/dots-api"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Often developers run into hardware issues, and usually we overcome them.\nIn some cases though, there's simply no time, nor patience.\nThat's why I made Alexa Simulator UK.\nEnjoy.", 
    "project_name": "Alexa Simulator UK", 
    "project_tags": [
      "html", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/alexa-simulator-uk"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nWhat it does\n\nSet up the game on a large screen. \nPeople can text the column of where the disc should be dropped for the connect 4.\nThe column with the highest vote will have the new disc added.\n\n- We used Twilio to receive texts in the backend\n\nParse the texts\nFire pusher events to add the vote to our graph\nWait for the timer to go to 0, send a GET request to the backend server\nRaise another pusher event to update the game board with the colour and column of disc\n\nHow we built it\n\nWe used a windows 2016 server as our backend which hosts the twilio end point\nIt is also the backend server for firing the Pusher events via the PHP SDK\nThe rest is front end which.\nWe wrote our own custom game in Javascript and HTML and CSS\nIntegrate it all together (nightmarish)\n\nChallenges we ran into\n\nLatency issues with SMS when working on a real time game\nIntegrating Pusher with is perfectly real time with twilio which has some latency \n\nAccomplishments that we're proud of\n\nWrite our own, custom connect 4 game in Javascript\nIntegrate several backend APIs ( Pusher, TwilioAWS, AWS and Google cloud) together.\n^ Get the above to work SEAMLESSLY\n\nWhat we learned\n\nWe learnt about using Twilio and Pusher APIs. \nLearnt about real time software. \nFront and backend development and how much of a pain it is to integrate several backend components.\n\nWhat's next for ChesSMS\nImprove the user interaction capabilities by adding the ability to make a movie by voice. We are thinking of using Alexa to set up the game and make the move.", 
    "project_name": "ChesSMS", 
    "project_tags": [
      "pusher", 
      "twilio", 
      "amazon-web-services", 
      "google-compute-engine"
    ], 
    "project_url": "https://devpost.com/software/chessms"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nWanting to experiment with twilio, java and python, we tried to think of a useful combination of these techonologies. So we came up with the idea of a parking finder! \nWhat it does\nThe Android app sends an sms through Twilio to a live website, which, in turn, starts crawling information off the internet with Python.\nHow we built it\nSome of us knew some Java, some of us knew a bit of Python and wanted to experiment with it, and some of us knew almost nothing!\nChallenges we ran into\nThe biggest challenge was setting up the Twilio functionality, because we were absolutely new to this technology. We almost quit because we couldn't find the latitude and longitude of an address. Also, the Python crawler wasn't able to gather the information that was generated dinamically, so we had to try several websites, think of multiple ideas... Because in the beginning we actually wanted to do some weird food tinder.\nAccomplishments that we're proud of\nThe fact that we actually have a final working project!!! But also, it is pretty useful and it's quick enough to be used in real life. So the project is live righ now and the world can actually enjoy the free credit we have from Twilio.\nWhat we learned\nSo we learned to use Android Studio, for instance how to connect Javascript to XML, of course, Twilio, how to actually run a Python script on a webpage and that stickers actually make a pretty neat decoration for a laptop.\nWhat's next for parKing\nTo extend it in other cities of the world and to create the possibility of sending a message with the number of the parking in order to receive directions.", 
    "project_name": "parKing", 
    "project_tags": [
      "android-studio", 
      "java", 
      "xml", 
      "twilio", 
      "python", 
      "flask"
    ], 
    "project_url": "https://devpost.com/software/parking"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nWe began by pondering what exactly happens at a hackathon? Do you really just hack? Do you socialise or even play a few games here and there?\nWhat it does\nOur goal was to make a somewhat RPG based around gaining points depending on how you spent your time. Unfortunately we didn't manage to implement that into the game... yet. Instead you can currently explore the world, on your own, around the University of Birmingham Learning Centre.\nHow we built it\nWe implemented the game through Java and we also used Gradle\nChallenges we ran into\nNot enough time!!!\nAccomplishments that we're proud of\nThis is our first attempt at a somewhat game.\nWhat we learned\nAt hacks, aim small, build up after.\nWhat's next for HackSim2017\nWe need stat points, objects which can block your path, NPC's to interact with, better graphics.\nWe also wanted to incorporate a way where you can insert an image into the game so that it would read the pixels and print out the different image objects.", 
    "project_name": "HackSim2017", 
    "project_tags": [
      "gradle"
    ], 
    "project_url": "https://devpost.com/software/hacksim2017"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "We were thinking about what to do and came up with this idea. It is a text based RPG using twilio's SMS communication. We built it using python. There were several problems through out however the solution is in a semi-working state. We've learned a lot about python and what not to do. If we were to continue with this, we'd implement more scenarios.", 
    "project_name": "Twilio Adventure", 
    "project_tags": [
      "python", 
      "twilio"
    ], 
    "project_url": "https://devpost.com/software/twilio-adventure"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nI love watching YouTube videos but when I get YouTube recommendations they are based on what I have watched in the past. I want to discover new content which is high quality and so it takes me a lot of time and energy to search for these videos. So why not create an app to do just that, with an easy-to-use UI and UX?\nWhat it does\nIt curates high quality educational content to improve your knowledge and keep you informed with the opinions of thought leaders.\nHow I built it\nIntegrated Google OAuth using GTLR Framework to authenticate POST requests to YouTube Data API for syncing videos with your personal watch later playlist. Used swift and Xcode to develop the UI and perform API requests. Used Koloda Cocoapod to provide a Tinder-style UI for swiping through videos.\nChallenges I ran into\nPoor documentation for using GTLR framework, migrating to Swift 3.\nAccomplishments that I'm proud of\nBuilt my first working iOS app solely by myself.\nWhat I learned\nHow to interact with API's, programmatically creating UI constraints, using Interface Builder, using AlamofireObjectMapper for efficient JSON mapping, StatefulViewController and Reachability.\nWhat's next for Discovr: Predictive YouTube discovery\nRelease onto the iOS App Store!", 
    "project_name": "Discovr: Predictive YouTube discovery", 
    "project_tags": [
      "uikit", 
      "ios", 
      "swift"
    ], 
    "project_url": "https://devpost.com/software/discovr-predictive-youtube-discovery"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nI wanted to make something really meaningful with Alexa and the Twilio API to help those with mental health disorders... But AWS to me is worse than PHP so I had to give up on my dreams and make this instead. Twilio is bae <3\nWhat it does\nText the twilio number to join the lobby, take turns to add text to the story \nHow I built it\nI still have no clue how to get anything useful out of AWS, but Freehostia just got up and running like that. snaps fingers. So I uses Twilio's TwiML to make calls to my PHP scripts to manage the running of the application.\nChallenges I ran into\nAWS... AWS.... AWS....\nAccomplishments that I'm proud of\nThis was done in about 2 hours... and learning to switch to a more viable project is a pretty important thing to do.\nWhat I learned\nSometimes products and services are overhyped, and simply trying to go for a sponsor prize can be detrimental to a hack's success.\nWhat's next for Try and keep it SFW plz <3\nWould probably need to remake on Node.js", 
    "project_name": "Try and keep it SFW plz <3", 
    "project_tags": [
      "twilio", 
      "php"
    ], 
    "project_url": "https://devpost.com/software/try-and-keep-it-sfw-plz-3"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nAfter the success of the original AchimQuest at HackTheMidlands, we were eager to expand the Achim universe. After brainstorming several ideas we eventually settled on a Bomberman-style game featuring our favourite maths lecturer.\nWhat it does\nMuch like Bomberman, in the game you control one of several Achims around an arena, dropping bombs (in the shape of Martin Escardo) to destroy enemies and walls. The game is controlled by the players' phones (by accessing a control pad on a server) while the game arena is displayed on the main screen.\nHow we built it\nThe main game is built using node.js, and the server-phone communication is handled using socket.io (unfortunately Pusher proved inadequate for our purpose).\nChallenges we ran into\nWe initially tried to use Pusher to handle our server-phone communication, however this proved impossible for real-time events that we were aiming for. Another main problem was communicating the location of walls from the server to the main map.\nAccomplishments\nWe are proud of the ability to use phones as controllers - this is kind of cool.\nWhat we learned\nThis was the first time George had used JavaScript, so this was a good opportunity to develop his skills.\nWhat's next\nIf we were to continue we could develop the multiplayer aspect further.", 
    "project_name": "AchimQuest 2.0", 
    "project_tags": [
      "node.js", 
      "express.js", 
      "socket.io", 
      "html5", 
      "css3", 
      "javascript", 
      "phaser.js"
    ], 
    "project_url": "https://devpost.com/software/achimquest-2-0"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Git-Pizza\n\nLookup pizzas from Pizza Hut and Dominos based on your postcode to find you the best prices\n\nThe python server scrapes the two websites to obtain data on the pizzas available from your local store, using Python's requests to keep track of the cookies from the websites. A JSON object is returned containing the pizzas, which can be filtered, sorted and searched from the website. \nIdeally, I would have included deals available too, but Domino's website required me to restart my server after every request to their deals details which made it more complex to do, and Pizza Hut used images to show details, which would have required computer vision to solve this, and after spending over 14 hours on the web scraping, I had little time to do this.", 
    "project_name": "git-pizza", 
    "project_tags": [
      "html", 
      "python", 
      "javascript", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/brumhack16"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nStanding in the food queue at BrumHack and remembering how all food at hackathons is just a mad dash for food, it seemed like there was a more civilised way to do it. What if instead you could send text messages to your hackers letting them know that their food was ready.\nWhat it does\nIt is a CLI tool that provides a series of commands for generating YAML about your hackathon and your attendees, send them information about meals and group them for sending personalised messages\nHow I built it\nUsing nodeJS\nChallenges I ran into\nNone, I'm awesome\nAccomplishments that I'm proud of\nIt's my first headless hack\nWhat I learned\nHow to be creative\nWhat's next for HackaServe\nHackathons aren't about trying to create the next startup, whatever is next is next and this what I hate about stupid devpost, it's moronic desire to generate a startup out of every idea. This idea is just a cool simple tool, isn't that enough for you parasites??", 
    "project_name": "HackaServe", 
    "project_tags": [
      "node.js", 
      "twilio"
    ], 
    "project_url": "https://devpost.com/software/hackaserve"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nYou shouldn't have to contantly check stock prices for interesting changes. You should be actively notified when they do!\nWhat it does\nChoose stocks to follow and a threshold. You will be notified when they fall under it.\nChallenges I ran into\nLoads of the financial APIs sucked (this would probably be different if we payed big money to bloomberg et al.)", 
    "project_name": "Phocks", 
    "project_tags": [
      "python", 
      "django", 
      "javascript", 
      "bootstrap", 
      "ajax", 
      "celery"
    ], 
    "project_url": "https://devpost.com/software/phocks"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nMemes\nWhat it does\nEach player chooses a meme and then they commence battle attempting to knock each others trebuchet down.\nHow we built it\nWe built it using Unity 3D and C#\nChallenges we ran into\nAnimations, UI, life\nAccomplishments that we're proud of\nEverything\nWhat we learned\nOscar really hates cheese\nWhat's next for Memebuchet\nMore memes!", 
    "project_name": "Memebuchet", 
    "project_tags": [
      "unity", 
      "c#"
    ], 
    "project_url": "https://devpost.com/software/memebuchet"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "As two members of our team are Europeans, we suffer a lot to find a close ATM with a convenient exchange range.\nSo we thought - why not use google maps, twilio and a simple Android app? The user enters a location, we calculate the most convenient ATMs and twilio sends you a SMS with th locations.\nWe used exchange rates based on a website listing the most common UK banks and their exchange rates. With the google-places API we search for ATMs. \nAndroid apps are very complex. We tried to keep it as simple as possible since we only need an insert box and a output tab. How to get data from the app to the node.js program and back?!\nAndroid-Studio, Node.js is painful\nWe want to link all the components together and include more banks (right now 9).", 
    "project_name": "Cash - At The Moment", 
    "project_tags": [
      "android-studio", 
      "node.js", 
      "xml", 
      "java", 
      "google-places", 
      "twilio"
    ], 
    "project_url": "https://devpost.com/software/cash-at-the-moment"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nI wanted to make something really meaningful with Alexa and the Twilio API to help those with mental health disorders... But AWS to me is worse than PHP so I had to give up on my dreams and make this instead. Twilio is bae <3\nWhat it does\nText the twilio number to join the lobby, take turns to add text to the story \nHow I built it\nI still have no clue how to get anything useful out of AWS, but Freehostia just got up and running like that. snaps fingers. So I uses Twilio's TwiML to make calls to my PHP scripts to manage the running of the application.\nChallenges I ran into\nAWS... AWS.... AWS....\nAccomplishments that I'm proud of\nThis was done in about 2 hours... and learning to switch to a more viable project is a pretty important thing to do.\nWhat I learned\nSometimes products and services are overhyped, and simply trying to go for a sponsor prize can be detrimental to a hack's success.\nWhat's next for Try and keep it SFW plz <3\nWould probably need to remake on Node.js", 
    "project_name": "Try and keep it SFW plz <3", 
    "project_tags": [
      "twilio", 
      "php"
    ], 
    "project_url": "https://devpost.com/software/try-and-keep-it-sfw-plz-3"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nAfter the success of the original AchimQuest at HackTheMidlands, we were eager to expand the Achim universe. After brainstorming several ideas we eventually settled on a Bomberman-style game featuring our favourite maths lecturer.\nWhat it does\nMuch like Bomberman, in the game you control one of several Achims around an arena, dropping bombs (in the shape of Martin Escardo) to destroy enemies and walls. The game is controlled by the players' phones (by accessing a control pad on a server) while the game arena is displayed on the main screen.\nHow we built it\nThe main game is built using node.js, and the server-phone communication is handled using socket.io (unfortunately Pusher proved inadequate for our purpose).\nChallenges we ran into\nWe initially tried to use Pusher to handle our server-phone communication, however this proved impossible for real-time events that we were aiming for. Another main problem was communicating the location of walls from the server to the main map.\nAccomplishments\nWe are proud of the ability to use phones as controllers - this is kind of cool.\nWhat we learned\nThis was the first time George had used JavaScript, so this was a good opportunity to develop his skills.\nWhat's next\nIf we were to continue we could develop the multiplayer aspect further.", 
    "project_name": "AchimQuest 2.0", 
    "project_tags": [
      "node.js", 
      "express.js", 
      "socket.io", 
      "html5", 
      "css3", 
      "javascript", 
      "phaser.js"
    ], 
    "project_url": "https://devpost.com/software/achimquest-2-0"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Git-Pizza\n\nLookup pizzas from Pizza Hut and Dominos based on your postcode to find you the best prices\n\nThe python server scrapes the two websites to obtain data on the pizzas available from your local store, using Python's requests to keep track of the cookies from the websites. A JSON object is returned containing the pizzas, which can be filtered, sorted and searched from the website. \nIdeally, I would have included deals available too, but Domino's website required me to restart my server after every request to their deals details which made it more complex to do, and Pizza Hut used images to show details, which would have required computer vision to solve this, and after spending over 14 hours on the web scraping, I had little time to do this.", 
    "project_name": "git-pizza", 
    "project_tags": [
      "html", 
      "python", 
      "javascript", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/brumhack16"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nStanding in the food queue at BrumHack and remembering how all food at hackathons is just a mad dash for food, it seemed like there was a more civilised way to do it. What if instead you could send text messages to your hackers letting them know that their food was ready.\nWhat it does\nIt is a CLI tool that provides a series of commands for generating YAML about your hackathon and your attendees, send them information about meals and group them for sending personalised messages\nHow I built it\nUsing nodeJS\nChallenges I ran into\nNone, I'm awesome\nAccomplishments that I'm proud of\nIt's my first headless hack\nWhat I learned\nHow to be creative\nWhat's next for HackaServe\nHackathons aren't about trying to create the next startup, whatever is next is next and this what I hate about stupid devpost, it's moronic desire to generate a startup out of every idea. This idea is just a cool simple tool, isn't that enough for you parasites??", 
    "project_name": "HackaServe", 
    "project_tags": [
      "node.js", 
      "twilio"
    ], 
    "project_url": "https://devpost.com/software/hackaserve"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nYou shouldn't have to contantly check stock prices for interesting changes. You should be actively notified when they do!\nWhat it does\nChoose stocks to follow and a threshold. You will be notified when they fall under it.\nChallenges I ran into\nLoads of the financial APIs sucked (this would probably be different if we payed big money to bloomberg et al.)", 
    "project_name": "Phocks", 
    "project_tags": [
      "python", 
      "django", 
      "javascript", 
      "bootstrap", 
      "ajax", 
      "celery"
    ], 
    "project_url": "https://devpost.com/software/phocks"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "Inspiration\nMemes\nWhat it does\nEach player chooses a meme and then they commence battle attempting to knock each others trebuchet down.\nHow we built it\nWe built it using Unity 3D and C#\nChallenges we ran into\nAnimations, UI, life\nAccomplishments that we're proud of\nEverything\nWhat we learned\nOscar really hates cheese\nWhat's next for Memebuchet\nMore memes!", 
    "project_name": "Memebuchet", 
    "project_tags": [
      "unity", 
      "c#"
    ], 
    "project_url": "https://devpost.com/software/memebuchet"
  }, 
  {
    "hackathon_name": "BrumHack 5.0", 
    "project_description": "As two members of our team are Europeans, we suffer a lot to find a close ATM with a convenient exchange range.\nSo we thought - why not use google maps, twilio and a simple Android app? The user enters a location, we calculate the most convenient ATMs and twilio sends you a SMS with th locations.\nWe used exchange rates based on a website listing the most common UK banks and their exchange rates. With the google-places API we search for ATMs. \nAndroid apps are very complex. We tried to keep it as simple as possible since we only need an insert box and a output tab. How to get data from the app to the node.js program and back?!\nAndroid-Studio, Node.js is painful\nWe want to link all the components together and include more banks (right now 9).", 
    "project_name": "Cash - At The Moment", 
    "project_tags": [
      "android-studio", 
      "node.js", 
      "xml", 
      "java", 
      "google-places", 
      "twilio"
    ], 
    "project_url": "https://devpost.com/software/cash-at-the-moment"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nWe all like party games, don't we? We took the famous game Russian Roulette and adapted it to the modern era, making it work on Amazon Alexa. Take risks, bet and win!\nWhat it does\nThe application follows the rules of the famous Russian Roulette rules. Connecting every player to an Nessie account, we raised the bar with virtual betting, each player having an account which allows him to take risks and feel the excitement of the game.\nHow I built it\nThe application is built using JavaScript. We integrated the Nessie API within our app.\nChallenges I ran into\nHaving no previous experience with some of the technologies and languages we used, we had trouble making them work together. (e.g. using JavaScript requests for the Nessie API)\nAccomplishments that I'm proud of\nLearning from mistakes is always the biggest accomplishment at any Hackathon. We managed to correct the errors and fix the bugs. \nWhat I learned\nWhat's next for Russian Roulette\nWe are willing to continue the development of the Amazon Alexa skill and make the game more complex and user friendly.", 
    "project_name": "Russian Roulette", 
    "project_tags": [
      "javascript", 
      "json", 
      "capital-one", 
      "amazon-alexa"
    ], 
    "project_url": "https://devpost.com/software/russian-roulette"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "", 
    "project_name": "Lazy Web Dev", 
    "project_tags": [
      "amazon-alexa", 
      "node.js", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/lazy-web-dev-yrbxce"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nInnovative payments through facial recognition and internet-banking.\nWhat it does\nPayments using facial recognition. NO NEED FOR ANYTHING ELSE\nHow we built it\nWe wrote two projects, one working with the capital-one API for the banking objects and the other with kairos-api for facial recognition and then we combine them together\nChallenges we ran into\nCould not send requests to pusher from iPhone for no reason\nAccomplishments that we're proud of\nFacial recognition & created methods for everything in capital-one\nWhat we learned\nA lot. Debugging pusher put us in the position of writing 2 servers - one in php and the other in python using flask\nWhat's next for Rock the payments\nQuicker processing, better UI, easier UX, confirm payments based on the location of the two merchants", 
    "project_name": "Rock the payments", 
    "project_tags": [
      "php", 
      "python", 
      "pusher", 
      "xcode", 
      "ios"
    ], 
    "project_url": "https://devpost.com/software/rock-the-payments-m15qir"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "", 
    "project_name": "Docker Assistant", 
    "project_tags": [
      "alexa", 
      "amazon-web-services", 
      "node.js", 
      "docker", 
      "twitter", 
      "php", 
      "amazon-alexa", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/docker-assistant"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nAbility to use voice control in order to simplify tasks in business and life\nWhat it does\nGets the data from Nessie API, processes it and display on the dashboard. Modifications to data are being applied based on voice commands, which are captured by Amazon Alexa.\nHow we built it\nDivided project into 3 parts:\n1) Developed front-end which displays processed data using technologies like Js, AngularJs, d3,, html5, css3..\n2) Developed back-end which processes data and connects AWS lambda to front-end  using technologies like Spring, Java\n3) Developed AWS lambda code using Nodejs, which controls Amazon Alexa.\nChallenges we ran into\nMalformed data, voice recognition with flaws, connection issues to AWS\nAccomplishments that we're proud of\nConnects everything fine into 1 system and accepts simple data modification voice commands.\nWhat we learned\nGot more experience in toolsets we have used, got first experience in using voice control devie.\nWhat's next for Voice controlled dashboard\nTBD", 
    "project_name": "Voice controlled dashboard", 
    "project_tags": [
      "java", 
      "javascript", 
      "node.js", 
      "angular.js", 
      "amazon-web-services", 
      "alexa", 
      "capital-one", 
      "css3", 
      "html5", 
      "d3.js", 
      "spring"
    ], 
    "project_url": "https://devpost.com/software/voice-controlled-dashboard"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nPretty graphs, social media\nWhat it does\nTakes a realtime feed of a certain searchterm from twitter, puts it through the google cloud api to find the sentiment (happiness) and then displays it in a web app\nHow we built it\nIn Python, Tweepy collects the tweets, which are passed to Google Cloud to find the sentiment. These are sent over a socket to the Flask webserver, which sends them over a continuous event stream to the front end, where CanvasJS plots them. As such, everything is entirely real time\nChallenges we ran into\n\nForgetting/not knowing python\nGetting the twitter and server process to talk to each other - streams going all over the place\nAPI rate limits\n\nAccomplishments that we're proud of\n\nIT WORKS\nEverything being in real time\n\nWhat we learned\n\nPython\nJSON\nUsing APIs\nRealtime streams\nWho Panda is\n\nWhat's next for Sentwee\n\nBetter UI\nSelectable search term on website", 
    "project_name": "Sentwee", 
    "project_tags": [
      "python", 
      "google-cloud", 
      "flask"
    ], 
    "project_url": "https://devpost.com/software/sentwee"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nWe saw the capital one presentation before the start, and had an idea about what we could do that worked cross-platform, NFC.\nWhat it does\nThe app retrieves data from the Nessie API, made by CapitalOne. It allows users to view their accounts, and send and receive money by tapping their phones together.\nHow we built it\nAnthony built a Universal Windows application using Visual Studio, and Tanin used Android Studio to develop an Android/Amazon Fire Phone app on a Mac.\nChallenges we ran into\nThe NFC implementations were ever so slightly different across the two platforms, so the most of our time was spent getting the two platforms to interact in a meaningful way.\nAccomplishments that we're proud of\nA cross-platform payment app that works on both Android and Windows Phone, making sure even the users on the small platforms are included.\nWhat we learned\nWhile NFC is a standard, there is some leeway on how it can be implemented.", 
    "project_name": "TapOne", 
    "project_tags": [
      "c#", 
      "android", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/tapone"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Blockspot\nGitHub\nProductivity app that uses geofencing to set up interactive hubs to block all the distracting websites defined on your personal blacklist.", 
    "project_name": "BlockSpot", 
    "project_tags": [
      "swift", 
      "mapkit"
    ], 
    "project_url": "https://devpost.com/software/blockspot"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nWe wanted to make a skill for Amazon's Alexa. We thought that health-care was an interesting sector. One of our team members has a nut allergy. A common question is \"can I eat ...\". It would be useful if when in your home, Alexa could easily answer this question.\nWhat it does\nThis is an Alexa 'skill' that lets you ask if a food is ok for you to eat based on an allergy profile that you make.\nHow we built it\nFirst, we experimented with different food APIs to see which one would give us enough allergen information. We made a codepen to visualise these API's output.\nWe used AWS Lambda to host the Node.js backend that included the Alexa SDK and a custom wrapper for the food label SDK. We used Firebase DB by Google to store user allergen profiles.\nChallenges we ran into\nAWS Lambda is terrible at giving meaningful errors and also seems to have patchy support for new JavaScript ES6. \nAccomplishments that we're proud of\nWe were able to pass arbitrary length strings to Alexa and pass the data to an API. This proved quite difficult.\nWhat we learned\nSome members learned JavaScript for the first time. We got better at collaborating with Git and Github and learned how to use the Alexa SDK.\nWhat's next for Alexa Allergens\nWe'd like to provide more 'sample utterances' so we can interact with it in different and more human-like ways. Hopefully we'll be able to publish the skill.", 
    "project_name": "Alexa Allergies", 
    "project_tags": [
      "node.js", 
      "amazon-web-services", 
      "javascript", 
      "alexa"
    ], 
    "project_url": "https://devpost.com/software/alexa-allergens"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "", 
    "project_name": "Hackinator", 
    "project_tags": [
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/hackinator"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nCHRIS + Coffe + Orange juice + Funk Music = BOOM\nWhat it does\nIt makes you laugh\nHow we built it\nYou tell me\nChallenges we ran into\nThe world\nAccomplishments that we're proud of\nWe can finally go to sleep \nWhat we learned\nFree food is awesome\nWhat's next for Untriggered\nNothing", 
    "project_name": "Untriggered", 
    "project_tags": [
      "javascript", 
      "html5", 
      "css3"
    ], 
    "project_url": "https://devpost.com/software/untriggered"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "APPEARING SOON ON HACKYOUVERYMUCH.COM!!!!1!!!\nBuilt to host my other hack, WirePath, I designed this domain using Weebly. I did not know, during initial planning, that it would take 24-48 hours for servers to update after a domain is unparked. Clearly, we didn't have that time. In the above picture is a schematic of the website layout. Once my other hack is more... polished... it will appear where the beautiful green comic sans indicates, on the brick background. I am considering using this page as a portfolio for past and future projects, once it is available to the general public. I'd also like to add more information and detail, and perhaps more pages. If you wait it out a bit more, the magic internet fairy will wave her wand and this wonderful website will poof into being on the world wide web.", 
    "project_name": "HackYouVeryMuch.com", 
    "project_tags": [
      "weebly"
    ], 
    "project_url": "https://devpost.com/software/the-domain-that-will-work-soon"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nSeeing some reddit users joke about a meme stock exchange which could be made into reality.\nWhat it does\nLets you buy and sell memes with their value updating according to real trending data on Twitter.\nHow we built it\nWe made a HTML+CSS website and then introduced Bootstrap to provide a nav bar, whilst also creating a Ruby and database setup to run a server and merged in the Ruby to the HTML and then pulled the meme trending value from Twitter's API to go into our database.\nChallenges we ran into\nTwitter's API was not straight forward. Google Trends does not have an API and the embedded link from their own site was completely broken.\nAccomplishments that we're proud of\nBeing able to buy a meme and make profit off of it\nWhat we learned\nStrong team building skills - allocation of tasks and dealing with bottlenecks in plan.\nRuby does not work easily on Windows and Google trends does not have an API. Twitter's API is extremely confusing and had to be hacked to get to work. We learnt how to use some Ruby gems (rufus-scheduler,twitter) and to interface with a database through Ruby.\nWhat's next for MeMeStOcKeXcHaNgE\nRunning on a real web server, supporting logins and adding more memes or unrestricting the purchases to all memes. Hosting adverts on the site and creating a paid or ad based app.", 
    "project_name": "MeMeStOcKeXcHaNgE", 
    "project_tags": [
      "ruby", 
      "html5", 
      "css3", 
      "bootstrap", 
      "javascript", 
      "sql", 
      "sqlite", 
      "sinatra", 
      "notepad++"
    ], 
    "project_url": "https://devpost.com/software/memestockexchange-7o6pck"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nDuring our first board meeting we deliberated that there had never really been a good app that allowed you to find local events at any given time. Therefore our vision was to design an app that implemented the simplicity of apps such as SnapChat and Instagram while offering a core functionality that can be used by all.\nWhat it does\nHype allows users to share events that they are hosting or at already, allowing other users to find and see what's popular in real time. All users are kept totally anonymous so you won't have to worry about privacy concerns.\nHow we built it\nComplex algorithms written in Java and NodeJS are used to calculate the locations of events based on where users 'hype' an area. Dense areas with frequent hypes are ranked above other smaller events that users may not be interested in.\nChallenges we ran into\nNone of our team had experience with any of the tools we used before the event. We taught ourselves to use them from scratch and crafted something beautiful out of them.\nWhat's next for Hype\nWith continued development we intend to add many more features such as social interaction as well as sponsored events.", 
    "project_name": "Hype", 
    "project_tags": [
      "node.js", 
      "express.js", 
      "android", 
      "android-studio", 
      "google-play", 
      "javascript", 
      "inkscape"
    ], 
    "project_url": "https://devpost.com/software/hype"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nAs the aging population of the UK turns into an inverted period, Dementia becomes more and more of a pressing issue. The time consuming nature of Dementia Questionnaires in a time where General Practice Surgeries are constrained with time and resources, promotes need for more efficient way of screening.\nWhat it does\nRemoves the need for human interaction to do 20-30 minute questionnaire, saving time for the GP, translated to improved efficiency in services. Questionnaire will be done before GP appointment for annual medication review, Results will be available to be discussed during the GP appointment. It will demonstrate the likely hood/ risk of having dementia,  promoting GP to conduct detailed clinical examination to confirm diagnosis. \nHow we built it\nQuestionnaire written to AWS RDS. Lambda queries RDS and passes questionnaire to Amazon Alexa. Alexa speaks out question and listens to response. and writes response to RDS. Express app on EC2 queries RDS for response and presents result on web app.. (In theory)\nChallenges we ran into\nSetting up a skill (SDK) in Alexa, getting Alexa to Write responses, Java development script and displaying responses on the web page, connecting the different components together in a restricted time frame (everything:P), \nAccomplishments that we're proud of\nManaged to overcome some of the challenges faced in untreaded waters. \nFew members of the team were completely unaware of coding and learnt few of the basics of it through the help of the rest of team.\nMeeting new people from different disciplines! \nExploring the different AWS services including Alexa and Lambda\nWhat we learned\nSpecific skills - Developing Alexa skills, Using Lambda queries, Using EC 2 API\nImproving knowledge of coding \nThe possibility of self learning any programming language with the the help of google \nUnderstanding the concept of hackathons \nWhat's next for Couch Diagnosis\nComplete building on Minimal Viable Product to fulfill objectives and fit into context \nConcept is transferable to multiple contexts in medicine including other cognitive function questionnaires, Asthma risk assessment questionnaire etc.", 
    "project_name": "Couch Diagnosis", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/couch-diagnosis"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "", 
    "project_name": "Calculator Alpha", 
    "project_tags": [
      "amazon-alexa", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/calculating-alexa"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nAfter a few hours of thinking, it came down to one simple thing, *we like llamas*. So we ran with it and out came this.\n\nWhat it does\nSlanderllama is an (incredibly) basic game designed with the \n\ngame elements of Slenderman in mind. Whilst walking around in the world, at night, with a torch, you have to find the carrots that the Slenderllama dropped in order to progress to the next level. (coming soon...).\nHow we built it\nSlenderllama was built with Unity and Blender with one member focusing on the world, one focusing on the game mechanics and one on the 3D models.\n\nChallenges we ran into\nFirstly, not being able to make our first idea due to complexity, or our second for that matter. Our next problem was none of us had used any of the software before which meant a steep learning curve to get the product that we wanted. A major problem for us was dealing with random coding issues such as the Slenderllama randomly flying away from time to time among other things. The final problem was the resources we were using. As only one of us had a laptop, we were restricted to the Uni PCs which meant no installations of any additional software or anything that required administrator rights (this was partly solved by one of us who was running a remote desktop for the majority of the time) . \n\nAccomplishments that we're proud of\nWe are very proud of the fact that we made something first of all as we had no idea what we were doing half of the time. We are also really proud as we all now have a sound knowledge in each of the programs we were using (and considering we hadn't used them 24 hours ago, that's not bad).\n\nWhat we learned\nHow to use Blender and Unity and how to get around admin requirements.\n\nWhat's next for Slenderllama\nA working AI for the Slenderllama, more levels and a farming sequel called farm-a-llama.", 
    "project_name": "Slenderllama", 
    "project_tags": [
      "blender", 
      "unity", 
      "c#", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/slenderllama"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nFor HackSheffield 2.0, we designed a video game to fit within what we felt was realistic ambitions.  We drew artistic inspiration from games such as \"Gods Will Be Watching\" and \"The Secret of Monkey Island\" - and loosely based our primary game mechanic on... \"Papers, Please\" and... maybe \"Guess Who\"? With hindsight, the game turned out rather similar to Sheffield's Assassin's Guild society - and as two of our developers are indeed members, this is PROBABLY not coincidence. Call it subconscious game design, or whatever floats your boat.\n\"The Dossier\" was a game designed to combine the talents of our four developers. We decided on a video game, as this is where the majority of our cumulative experience lies - video game development. Rather than limiting us, this let us draw from a dauntingly vast pool of disciplines that making a decent game requires. Artwork, programming, web development, and creative writing - we split our team of four rather neatly into these four different categories.\n\nWhat it does\nThe Dossier features intrigue, espionage, and pirates. Put simply, there's a load of characters in a room - one of whom is your \"target\". Equipped with a rather vague \"briefing file\", along with each character's dialogue and appearances, you are tasked with identifying your target correctly.\nThe quicker you make a correct identification, the more points you score - and after five rounds of investigation, your score is uploaded to an online leaderboard. We've also got functionality to post your score to twitter, because social media.\n\nOh, and did we mention that we composed and arranged an entire soundtrack for The Dossier? (A 15 second chip-tune loop, don't get excited.)\nHow we built it\nThe game itself was developed in the Game Maker engine, using GML (Game Maker Language), whilst the assets were hand drawn in a image editor called \"Krita\". Tying everything together were various Google Drive folders and documents, which also found themselves spontaneously filled with tonnes and tonnes of god-awful character dialogue - as if from thin air...\n\nLast but by no means least, we used HTML, CSS, and PHP to get the online leaderboard up and running.\nChallenges we ran into\nCoding wise, matching up the sprite animations with the character movement, alongside varying the game with each play (random characters chosen from a pool of possibilities), proved to be something of a timesink.\nRegarding asset creation, the large workload for a project of this nature made it difficult to produce content fast enough. We were able to overcome this through re-using many of our assets - modifying the originals to make them unique.\nFinding a web hosting service proved tricky, to say the least. This, combined with a mid-hackathon fresh OS install, set the leaderboard development a little behind other aspects of the game.\n\nAccomplishments that we're proud of\nAll of us on the team, having never worked together before, were able to successfully meet the workload of the game we designed from the beginning. It was stressful at times, and plain tedious at others, but we unanimously pulled through and were to deliver a game that lived up to our expectations.\n\nWhat we learned\nThe most significant thing we learned was that: allocating roles is effective. The four of us worked on very different, equally important aspects of the project, but maintained communication throughout. In this way, we made progress on our individual tasks, whilst helping each other and making design decisions as a group.\n\nWhat's next for The Dossier\nWhilst we don't intend to continue developing The Dossier, we certainly learned a lot from its development, and find it likely that we'll collaborate again on a future project.", 
    "project_name": "The Dossier", 
    "project_tags": [
      "gamemaker", 
      "html5", 
      "css", 
      "google-drive"
    ], 
    "project_url": "https://devpost.com/software/the-dossier"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nAfter the tragic loss of half our group, we ended up on an entirely new platform (unity) using a hardware that we never had heard of before (leap motion), with a language that neither of us knew (c#). why did we choose this project  if there was virtually no way of it being finished in 24 hours ever? good question. We're not quite sure ourselves. Our initial idea was to build a world thanks to leap motion, shaping it like clay with our own hands. Instead we ended with a political satire. Why create a world when you can effortlessly destroy the walls built by a real-life evil?\nWhat it does\nIt's a wall. Which you destroy. With your hands.\nWow\nHow we built it\nWith a lot of pain and boring tutorial videos. We only spent about four hours on it, the rest was mainly learning.\nChallenges we ran into\nLiterally all of them. \"the software I've been using for the past three hours was the wrong one\" \"the actual software doesn't want to open properly\" \"there are no online resources for our situation\" \"my computer doesn't work\" \"wait did half of our group casually left five hours in?\" etc etc etc\nAccomplishments that we're proud of\nWe built a wall!\nWhat we learned\nThe... power of friendship? And also the basics of unity, which is a pretty neat program to know\nWhat's next for Stomp Trump's wall\nWe believe that our game is truly at the peak of originality and software engineering; There really is no need for further development. \n(No but really, this weekend was amazing we really enjoyed ourselves :D)", 
    "project_name": "Stomp Trump's wall", 
    "project_tags": [
      "unity", 
      "c#"
    ], 
    "project_url": "https://devpost.com/software/stomp-trump-s-wall"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nWe saw the tool on the GitHub samples\nWhat it does\nA voice based interactive adventure game. You can input commands for decisions through Alexa.\nHow we built it\nWe used an API from Github, and the Alexa skills developer kit.\nChallenges we ran into\nMaking the API work (it was not intended for windows 10). Making the save and upload function work (it had very specific rules for working). Uploading it as an Alexa skill, it was a bit confusing at first. We also couldn't create the graphical interface in time. We also couldn't get the audio to work, so right now its can only work by text based utterances to Alexa.\nAccomplishments that we're proud of\nWe made a game together, even if its not working fully\nWhat we learned.\nexpanded on programming knowledge, and how to use Alexa Skills developer. Learned how to deal with problems we come across more effectively.\nWhat's next for Interactive_adventure_game_through_Alexa - perhaps making the graphical interface and making the audio work.", 
    "project_name": "Interactive_adventure_game_through_Alexa_", 
    "project_tags": [
      "json", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/interactive_adventure_game_through_alexa_"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nWe wanted to to be able to ask Amazon's Alexa about the current financial information.\nWhat it does\nIt looks up financial information and lists the companies different risk so that someone can get the up-to-date information on the risk and rewards of the companies. \nHow we built it\nWe started by learning the different things we could do with Amazon's Alexa however after a few issues we stopped using it and decided to just do the financial information querying on its own. \nWhile learning how to use the Alexa's system we were developing a system that communicated with the BlackRock financial information api. This worked well from the start but we had a lot of companies to sort through ().\nOnce the decision of removing the Alexa Skill from our plan we started developing a web front end that allowed users to request the top x number of companies and list their financial risk.\nChallenges we ran into\nWe could not get the Alexa working with our code and we spent a lot of time trying to get things working on it. This reduced the amount of time we had significantly because we though we were close to getting everything working. We still managed to get a visual version of the data produced but it was not the original plan. \nWhat we learned\nWe have learned that researching as much as possible on new systems quickly and seeing if it is feasible would have helped us out a lot to:\n\u2022 Find how to get our Skill working\n\u2022 That learning multiple languages and getting them to work together on systems we didn't understand was a lot of work.\nWhat's next for FinRisk\nGetting the skill to work and expanding the overall options the user has for requesting the data.", 
    "project_name": "FinRisk", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/finrisk"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nThe game called Keep talking and nobody explodes.\nWhat it does\nThe game allows multiple players to join with their smartphones and displays a single part of a bomb for each player. A separate main screen displays a live bomb with a burning fuse and defusal instructions. The players have to defuse the bomb by performing correct actions on the correct bomb parts (and by extension - smartphones). They have to succeed before the bomb explodes. \nHow we built it\nWe used Node.js to build a server, which we are running on AWS, accessible with a Domain.com domain name: thebombhasbeendefused.com. Both the main display and the smartphones are displaying a web applicaton built mostly in JavaScript.\nChallenges we ran into\nThe fact that each smartphone displays another part of the bomb. It required from us to create a server that can manage all those mini-games, sending and responding to different, personalized clients.\nWhat we learned\nWorking in a two people group is more challening and time consuming than work in a group of four.\nWhat's next for TheBombHasBeenDefused.com\n\nAdapt the game for more players\nCreate more mini-games\nAdd more animations \nWork on the front-end\nCreate multi-puzzles displayed at the same time", 
    "project_name": "TheBombHasBeenDefused.com", 
    "project_tags": [
      "node.js", 
      "javascript", 
      "css", 
      "html", 
      "amazon-web-services", 
      "domain"
    ], 
    "project_url": "https://devpost.com/software/thebombhasbeendefused-com"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nI watch a lot of tv series. I wanted to find out how long it would take me to watch specific sets of movies or shows. I made it for that reason\nWhat it does\nLets people create playlists and it will calcuate how much time it will take to watch them all \nHow I built it\nbackend in php to communicate with the the omdb api to fetch info about different content online. this is saved in a mysql database and then outputted in html using bootstrap template\nChallenges I ran into\ntime\nAccomplishments that I'm proud of\nnot killing people with streess cause time is ana issue\nWhat I learned\nhow much i like sleep.\nWhat's next for How long to watch\nI want to integrate with alexa so i can ask it how long it will take me to watch doctor who. actually allow users to sign up and customise their own playlists which they can share with firends.", 
    "project_name": "How long to watch", 
    "project_tags": [
      "css", 
      "javascript", 
      "mysql", 
      "html5", 
      "jquery", 
      "linux", 
      "mac"
    ], 
    "project_url": "https://devpost.com/software/how-long-to-watch"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "HackSheffield project\nImplemented an on-line project which consists of a of an question-answering assistant. User types in a question, the assistant then thinks for a few seconds then answers the question. Questions all in natural language, so no need for formatted input.\nCredits to Webknox for the Q/A API, which I used from Mashape, and to Voice RSS \u00a9 for their Text-to-Speech API.", 
    "project_name": "Joana - Web Assistant", 
    "project_tags": [
      "css", 
      "php", 
      "html"
    ], 
    "project_url": "https://devpost.com/software/hacksheffield"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nWhat it does\nit find events nearby pulling information from API's. this would then tell you the information and email the ones that you like back to yourself to research into more depth when you are free or buy the ticket from the link\nHow I built it\nusing Amazon Lamda and the Echo Alexa. running on node.js \nChallenges I ran into\nsetting up an email returning information was very difficicult as it is not a lot of resources online. \nAccomplishments that I'm proud of\nhaving a bare minimum viable product. learning new skills in Amazon lamda\nWhat I learned\nlearning Amazon dev skills, and improve ability to read code better \nWhat's next for Eventor\nto install full functionality as there was not enough time or resources to complete it", 
    "project_name": "Eventor", 
    "project_tags": [
      "node.js", 
      "javascript", 
      "amazon-alexa", 
      "amazon-ses"
    ], 
    "project_url": "https://devpost.com/software/eventor-9whp0l"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nWe wanted to use natural language processing for our project and to make a good project we needed a wealth of data which we collect from Twitter. Once we'd gathered some interesting statistics we wanted to make something pretty!\nWhat it does\nA Twitter user name is given by the user and recent posts from that user are used to create a graph of how positive their messages are.\nHow we built it\nWhen the Twitter username is submitted a socket is opened.  We use the Twitter API to collect recent posts from that user which are then sent of to Google natural language processing API. The result from this is two metrics called polarity (how positive the message contents is) and magnitude (how strong the language used is) as well as a list of mentions of other Twitter users. This information is then sent via a socket connection back to the user where WebGL is used to graph the results using WebGL (via the ThreeJS library).\nChallenges we ran into\nThe nature of the Twitter and Google APIs made it very difficult to pass data between the two and then reunite the results with the original Tweets. Half of the team had never used JS before and none of us had any experience with Web/OpenGL which was made worse by the lack of documentation for some areas of ThreeJS.\nAccomplishments that we're proud of\nData makes it reliably from Twitter -> Google -> User and does so relatively quickly. Client side drawing of interactive graph looks great! Despite being build quickly the whole project is built in such a way that we could fairly quickly implement other features (see What's next...).\nWhat we learned\nWebGL, Javascript, lots about asynchronous connections and more ninja git shell skills!\nWhat's next for The Twitter Sphere\nIf the socket connections was held open after the initial data is sent then the user's graph could be updated with new posts in (near) real time. We could also allow for the graph to expand beyond one step away from the original user name entered. More animations for the graph using the huge amount of data available to drive pretty (but also insightful) animations.", 
    "project_name": "The Twitter Sphere", 
    "project_tags": [
      "node.js", 
      "three.js", 
      "socket.io", 
      "javascript", 
      "html5", 
      "webgl", 
      "twitter", 
      "express.js", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/the-twitter-sphere"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nEver wondered what to do on a boring weeknight? Well fear not, as Alexa is here to challenge you to an epic rhyme off!\nWhat it does\nThis project allows you to play a rhyming game with Alexa, going back and forth until someone gives in (hint: that's gonna be you). Just start the game and give Alexa a word to use, and she'll handle the rest. Just make sure you've brushed up on your rhymes! Who ever can't think of a rhyme fast enough, or repeats themselves first will be the loser.\nHow it was built\nWe build this whole project using node.js and the Amazon Alexa Skills SDK, while also making use of an online rhyming dictionary API.\nChallenges\nIt was a challenge to get Alexa setup and running, and it was even trickier to integrate the functions for the rhyming API into that.\nAccomplishments\nWe created our first skill for Alexa, which was a very rewarding challenge, and we also managed to have fun while doing it!\nWhat we learned\nPractice makes perfect--this event stimulates us to practice coding skills. Although, we are not experts in coding, we like coding and want to learn more in the future. The result does not matter, the process matters much more.\nWhat's next for Rhyming Game\nUpgrade it to another high-level game-Dragon and Dungeon with Alexa?", 
    "project_name": "Rhyming Game with Alexa", 
    "project_tags": [
      "javascript", 
      "alexa", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/rhyming-game"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "", 
    "project_name": "The Degree Finder", 
    "project_tags": [
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/the-degree-finder-iz6vdy"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "leap-maze\nA follow the wire challenge using  LEAP Motion\nPoints are assigned based on the color you are on, with the most points gained for being on the black, fewer for the orange, and points are lost in the red. Using your pointer finger as a controller through the LEAP Motion, the code is designed to detect the color the circle is on. This is barely alpha; in future versions I would like to fine tune the color detector, make the image larger and more complex, and add movement and time requirements.\nthis code was started with help from Joe MacMahon, but was completely planned and finished by yours truly.", 
    "project_name": "WirePath", 
    "project_tags": [
      "javascript", 
      "html", 
      "shell"
    ], 
    "project_url": "https://devpost.com/software/leap-maze"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nIdea on the fly at half 10 this morning.\nWhat it does\nThe camera scans a qr code and embeds an image of the related website over the top of the camera image.  \nHow we built it\nOpenCV, Awesomium and lots of coffee.\nChallenges we ran into\nWe wanted a live browser to be embedded over the top of the camera image. We also wanted the embedded page to have a three 3D effect moving with the user. These became unobtainable due to time constraints. \nWhat we learned\nLearnt how to install and begin to understand Linux, while another member has now been converted to Linux.\nWhat's next for Qr Ar Overlay\nWaiting for technology to catch up. Implementation of above ideas and hololens technology.", 
    "project_name": "Qr Ar Overlay", 
    "project_tags": [
      "c++"
    ], 
    "project_url": "https://devpost.com/software/qr-ar-overlay"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nThe Trainline app introduced a new feature a while ago where it asks you whether there are any free seats on the train that you're on. I thought it would be an interesting idea to do something similar for ticket barriers at stations.\nWhat it does\nIt's a Telegram (similar to WhatsApp) bot which checks whether ticket barriers are open at stations based on user data. Go and chat to it to find out the commands.\nHow I built it\nStarted out wanting it to be a Messenger bot, but ended up using Telegram instead. It's written in Node.js and stores all its data in Redis. I found the data for all the station codes online - somebody managed to get access to the National Rail API and just dumped all the data.\nChallenges I ran into\nMessenger bots are required to be approved. There's no way they'd approve this! So I switched to Telegram.\nAccomplishments that I'm proud of\nI keep learning new cool things about Redis! Most people only use it as a cache of some sort, but I'm loving it as my primary data store. I quite enjoy working around its limitations.\nWhat I learned\nMessenger platform, for all the hype surrounding it, is actually a bit rubbish.\nWhat's next for Gatesopen\nI'd really like to incorporate some kind of ML to learn which stations usually have their barriers open at a specific time of day. I think it would also be cool to work in some natural language processing so that conversations with the bot become a bit more human.", 
    "project_name": "Gatesopen", 
    "project_tags": [
      "node.js", 
      "redis", 
      "telegram"
    ], 
    "project_url": "https://devpost.com/software/gatesopen"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "", 
    "project_name": "moodbot", 
    "project_tags": [
      "node.js", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/moodbot"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nWhat it does\nit find events nearby pulling information from API's. this would then tell you the information and email the ones that you like back to yourself to research into more depth when you are free or buy the ticket from the link\nHow I built it\nusing Amazon Lamda and the Echo Alexa. running on node.js \nChallenges I ran into\nsetting up an email returning information was very difficicult as it is not a lot of resources online. \nAccomplishments that I'm proud of\nhaving a bare minimum viable product. learning new skills in Amazon lamda\nWhat I learned\nlearning Amazon dev skills, and improve ability to read code better \nWhat's next for Eventor\nto install full functionality as there was not enough time or resources to complete it", 
    "project_name": "Eventor", 
    "project_tags": [
      "node.js", 
      "javascript", 
      "amazon-alexa", 
      "amazon-ses"
    ], 
    "project_url": "https://devpost.com/software/eventor-9whp0l"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nWe wanted to use natural language processing for our project and to make a good project we needed a wealth of data which we collect from Twitter. Once we'd gathered some interesting statistics we wanted to make something pretty!\nWhat it does\nA Twitter user name is given by the user and recent posts from that user are used to create a graph of how positive their messages are.\nHow we built it\nWhen the Twitter username is submitted a socket is opened.  We use the Twitter API to collect recent posts from that user which are then sent of to Google natural language processing API. The result from this is two metrics called polarity (how positive the message contents is) and magnitude (how strong the language used is) as well as a list of mentions of other Twitter users. This information is then sent via a socket connection back to the user where WebGL is used to graph the results using WebGL (via the ThreeJS library).\nChallenges we ran into\nThe nature of the Twitter and Google APIs made it very difficult to pass data between the two and then reunite the results with the original Tweets. Half of the team had never used JS before and none of us had any experience with Web/OpenGL which was made worse by the lack of documentation for some areas of ThreeJS.\nAccomplishments that we're proud of\nData makes it reliably from Twitter -> Google -> User and does so relatively quickly. Client side drawing of interactive graph looks great! Despite being build quickly the whole project is built in such a way that we could fairly quickly implement other features (see What's next...).\nWhat we learned\nWebGL, Javascript, lots about asynchronous connections and more ninja git shell skills!\nWhat's next for The Twitter Sphere\nIf the socket connections was held open after the initial data is sent then the user's graph could be updated with new posts in (near) real time. We could also allow for the graph to expand beyond one step away from the original user name entered. More animations for the graph using the huge amount of data available to drive pretty (but also insightful) animations.", 
    "project_name": "The Twitter Sphere", 
    "project_tags": [
      "node.js", 
      "three.js", 
      "socket.io", 
      "javascript", 
      "html5", 
      "webgl", 
      "twitter", 
      "express.js", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/the-twitter-sphere"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nEver wondered what to do on a boring weeknight? Well fear not, as Alexa is here to challenge you to an epic rhyme off!\nWhat it does\nThis project allows you to play a rhyming game with Alexa, going back and forth until someone gives in (hint: that's gonna be you). Just start the game and give Alexa a word to use, and she'll handle the rest. Just make sure you've brushed up on your rhymes! Who ever can't think of a rhyme fast enough, or repeats themselves first will be the loser.\nHow it was built\nWe build this whole project using node.js and the Amazon Alexa Skills SDK, while also making use of an online rhyming dictionary API.\nChallenges\nIt was a challenge to get Alexa setup and running, and it was even trickier to integrate the functions for the rhyming API into that.\nAccomplishments\nWe created our first skill for Alexa, which was a very rewarding challenge, and we also managed to have fun while doing it!\nWhat we learned\nPractice makes perfect--this event stimulates us to practice coding skills. Although, we are not experts in coding, we like coding and want to learn more in the future. The result does not matter, the process matters much more.\nWhat's next for Rhyming Game\nUpgrade it to another high-level game-Dragon and Dungeon with Alexa?", 
    "project_name": "Rhyming Game with Alexa", 
    "project_tags": [
      "javascript", 
      "alexa", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/rhyming-game"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "", 
    "project_name": "The Degree Finder", 
    "project_tags": [
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/the-degree-finder-iz6vdy"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "leap-maze\nA follow the wire challenge using  LEAP Motion\nPoints are assigned based on the color you are on, with the most points gained for being on the black, fewer for the orange, and points are lost in the red. Using your pointer finger as a controller through the LEAP Motion, the code is designed to detect the color the circle is on. This is barely alpha; in future versions I would like to fine tune the color detector, make the image larger and more complex, and add movement and time requirements.\nthis code was started with help from Joe MacMahon, but was completely planned and finished by yours truly.", 
    "project_name": "WirePath", 
    "project_tags": [
      "javascript", 
      "html", 
      "shell"
    ], 
    "project_url": "https://devpost.com/software/leap-maze"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nIdea on the fly at half 10 this morning.\nWhat it does\nThe camera scans a qr code and embeds an image of the related website over the top of the camera image.  \nHow we built it\nOpenCV, Awesomium and lots of coffee.\nChallenges we ran into\nWe wanted a live browser to be embedded over the top of the camera image. We also wanted the embedded page to have a three 3D effect moving with the user. These became unobtainable due to time constraints. \nWhat we learned\nLearnt how to install and begin to understand Linux, while another member has now been converted to Linux.\nWhat's next for Qr Ar Overlay\nWaiting for technology to catch up. Implementation of above ideas and hololens technology.", 
    "project_name": "Qr Ar Overlay", 
    "project_tags": [
      "c++"
    ], 
    "project_url": "https://devpost.com/software/qr-ar-overlay"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "Inspiration\nThe Trainline app introduced a new feature a while ago where it asks you whether there are any free seats on the train that you're on. I thought it would be an interesting idea to do something similar for ticket barriers at stations.\nWhat it does\nIt's a Telegram (similar to WhatsApp) bot which checks whether ticket barriers are open at stations based on user data. Go and chat to it to find out the commands.\nHow I built it\nStarted out wanting it to be a Messenger bot, but ended up using Telegram instead. It's written in Node.js and stores all its data in Redis. I found the data for all the station codes online - somebody managed to get access to the National Rail API and just dumped all the data.\nChallenges I ran into\nMessenger bots are required to be approved. There's no way they'd approve this! So I switched to Telegram.\nAccomplishments that I'm proud of\nI keep learning new cool things about Redis! Most people only use it as a cache of some sort, but I'm loving it as my primary data store. I quite enjoy working around its limitations.\nWhat I learned\nMessenger platform, for all the hype surrounding it, is actually a bit rubbish.\nWhat's next for Gatesopen\nI'd really like to incorporate some kind of ML to learn which stations usually have their barriers open at a specific time of day. I think it would also be cool to work in some natural language processing so that conversations with the bot become a bit more human.", 
    "project_name": "Gatesopen", 
    "project_tags": [
      "node.js", 
      "redis", 
      "telegram"
    ], 
    "project_url": "https://devpost.com/software/gatesopen"
  }, 
  {
    "hackathon_name": "HackSheffield 2.0", 
    "project_description": "", 
    "project_name": "moodbot", 
    "project_tags": [
      "node.js", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/moodbot"
  }, 
  {
    "hackathon_name": "Hack The Bubble", 
    "project_description": "Search the web for all your favourite staff/STACS members! \nCollect them all!l", 
    "project_name": "Pokemon Surf", 
    "project_tags": [
      "chrome", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/pokemon-surf"
  }, 
  {
    "hackathon_name": "Hack The Bubble", 
    "project_description": "Inspiration\nSt Andrews and Hugh Grant related story\nWhat it does\nA Hugh Grant character has to run and avoid obstacles through the city of St Andrews. This game entertains the masses with near infinite replayability  and its whimsical nature.\nHow we built it\nWe used javascript, CSS, html and GIMP picture editing tool to create and host fully working video game project.\nChallenges we ran into\nMaking characters and animations to do the right tasks.\nAccomplishments that we're proud of\nOur program works as planned. The project is successful\nWhat we learned\nIf you collaborate with your teammates and work non-stop for couple of hours, projects will eventually reach their final state.\nWhat's next for Grant Pub Hunt\nAdd more levels, create a wider user interface and change places, characters (an option to play as a prince William).", 
    "project_name": "Grant Pub Hunt", 
    "project_tags": [
      "javascript", 
      "css", 
      "html5", 
      "jquery", 
      "gimp"
    ], 
    "project_url": "https://devpost.com/software/grant-pub-hunt"
  }, 
  {
    "hackathon_name": "Hack The Bubble", 
    "project_description": "Inspiration\nBased on \"I wanna be the guy\" and \"temple run\", but also St Andrews themed - red gown\nWhat it does\nJump over golf clubs and thrown non-harmful golf balls at tourists\nHow I built it\nPieced together bits as we went along in a really disorganised fashion\nChallenges I ran into\neverything\nAccomplishments that I'm proud of\nWe submitted a working game on time\nWhat I learned\n2d game programming, Java graphics/JFrame\nWhat's next for The Pier Run\nBackground music, background image, duck under birds, collect coins, leaderboards, menu system, multiplayer", 
    "project_name": "The Pier Run", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/the-pier-run"
  }, 
  {
    "hackathon_name": "Hack The Bubble", 
    "project_description": "HackTheBubble2016\nSpace", 
    "project_name": "Space DodgeBall", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/hackthebubble2016"
  }, 
  {
    "hackathon_name": "Hack The Bubble", 
    "project_description": "Inspiration\nWhat it does\ns\nHow I built it\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for Saintboard", 
    "project_name": "Saintboard", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/saintboard-9hnwir"
  }, 
  {
    "hackathon_name": "Hack The Bubble", 
    "project_description": "Inspiration\nThis Hackathon!\nWhat it does\nPlay a bunch of minigames about running the hackathon!\n(Read the readme on github for the full story!)\nHow I built it\nIn Python, using pygame\nChallenges I ran into\nGraphical bugs on the central game, moved to a text based style\nWhat I learned\nLots of game-specific python skills\nWhat's next for HackathonTycoon\nHackathon tycoon 2.0 - the metameta", 
    "project_name": "HackathonTycoon", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/hackathontycoon-oeux6v"
  }, 
  {
    "hackathon_name": "Hack The Bubble", 
    "project_description": "Inspiration\nBefore coming to St Andrews, we didn't have much information about what to expect - especially the different types of accommodation.\nWhat it does\nDisplays reviews for the university accommodation - written today by real first year students.\nAlso displays distances from the halls to different places in town\nHow we built it\nWe wrote it in Java, using the Google APIs for maps and calendar integration and Java Swing for GUI\nChallenges we ran into\nThe GUI turned out to be too complex to get working in the end so the program was left as a command line application\nAccomplishments that we're proud of\nGathering data using google forms\nImporting this data into the program\nIntegrating google maps", 
    "project_name": "The Unofficial Guide to St Andrews - Freshers Edition", 
    "project_tags": [
      "java", 
      "google-distance-matrix", 
      "google-calendar"
    ], 
    "project_url": "https://devpost.com/software/the-unofficial-guide-to-st-andrews-freshers-edition"
  }, 
  {
    "hackathon_name": "Hack The Bubble", 
    "project_description": "Blank", 
    "project_name": "Stave to Tab", 
    "project_tags": [
      "java", 
      "netbeans"
    ], 
    "project_url": "https://devpost.com/software/stave-to-tab"
  }, 
  {
    "hackathon_name": "Hack The Bubble", 
    "project_description": "Inspiration\nWhat it does\nHow I built it\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for HackTheBubble\nOn PP", 
    "project_name": "HackTheBubble", 
    "project_tags": [
      "java", 
      "html", 
      "css", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/hackthebubble"
  }, 
  {
    "hackathon_name": "Hack The Bubble", 
    "project_description": "Long story short, no time left, and noone cares anyway.", 
    "project_name": "Hack-The-Image", 
    "project_tags": [
      "c++", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/hack-the-image"
  }, 
  {
    "hackathon_name": "Hack The Bubble", 
    "project_description": "Inspiration\nTwitch plays Pokemon and FTL.\nWhat it does\nIt is a space shooter collaboratively controlled by Twitter mentions.\nHow we built it\n\nFront end: JavaScript, it draws the game state to a canvas,\nBack end: Python, it simulates the game, receiving tweets to a Twitter account, that control the player.\n\nChallenges we ran into\n\nTwitter performs rate limiting and does not allow duplicate tweets to be sent by users,\nScrolling the map on the front end relative to the player took some time.\n\nAccomplishments that we're proud of\nIt works-ish.\nWhat we learned\n\nUnlike Skynet, Python is not self-aware,\nDolphins are whales,\nFeatures are important.\n\nWhat's next for TweetX\nActual features. A whale.", 
    "project_name": "TweetX", 
    "project_tags": [
      "javascript", 
      "python", 
      "websockets", 
      "twitter"
    ], 
    "project_url": "https://devpost.com/software/tweetx"
  }, 
  {
    "hackathon_name": "Hack The Bubble", 
    "project_description": "We made a thing, it didn't work.", 
    "project_name": "Clipboard History", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/clipboard-history"
  }, 
  {
    "hackathon_name": "Hack The Bubble", 
    "project_description": "Inspiration\nMake CS Student's Life Easier!\nWhat it does\nAllows students to post questions related to coursework and answer others' questions. \nHow we built it\nUsing Django for back-end, Auth0 for authentification and HTML&CSS for front-end.\nChallenges we ran into\nManaging a database with different models (users, questions, answers). \nAccomplishments that we're proud of\nWe have a working prototype. \nWhat we learned\nHow to organize and manage the development of a real-world platform, which could turn out to be really useful.\nWhat's next for StacsOverflow\nExpanding it to the whole department online and many other universities after, such that CS students could get help each other. Also, our platform could employ a competition (e.g. user of the month), where the most active users would win points for giving out correct answers, motivating students to work harder.", 
    "project_name": "StacsOverflow", 
    "project_tags": [
      "javascript", 
      "jquery", 
      "django", 
      "html5", 
      "css", 
      "mysql", 
      "sqlite", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/stacsoverflow"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nGoogle Cardboard we picked up by chance the day of the hack.\nBananas.\nWhat it does\nImmerses the user in a world of spooks and doots, on a budget. Beware!\nHow we built it\nUnity, Google Cardboard SDK, Makey Makey & blood, sweat and tears.\nChallenges we ran into\nEverything imaginable. Unity crashing, bugging out, skeletons spooking us out, networking bugging out, sleep deprived commit messages.\nAccomplishments that we're proud of\nThe spooky experience we've created.\nWhat we learned\nUnity. And how annoying it is. And how awful it works with git.\nWhat's next for HackTheMidlands\nAsk Tom.", 
    "project_name": "BR - Banana Reality", 
    "project_tags": [
      "c#", 
      "unity", 
      "google-cardboard"
    ], 
    "project_url": "https://devpost.com/software/hackthemidlands"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Intro\nDanceAuth, you and me!\nLong since are the days of 'passwords' and '2 factor authentication', welcome to a new era, a better era of 'secure' authentication. (with 65% more running men).\nTech\nKinect, Zigfu -- an absolute nightmare. We stumbled across a (vaguely) usable library ~ 5 hours into the hack, saving us from embarking on a project with less dabbing.\nNodeJS, Express, SocketIO -- used for all of the super cool backend stuff, lots of #spookyspookylogic (according to the comments) for matching against a backlog of previously recorded dance moves.\nJS, JQuery, SweetAlert, Animate -- used for our #disco frontend.\nSponsors\nWe didn't target any sponsors, but I guess that's the same as targeting all of them?\nInspiration\nOur dance moves have been described as no less than 'absolute fire' and 'of questionable standards', this was inspiration enough to release them unto the world.\nWhat it does\nRecognises your moves and your style, no one can match Goodman's running man... no one.\nWhat it doesn't\nCan not improve your awful dancing.", 
    "project_name": "DanceAuth", 
    "project_tags": [
      "node.js", 
      "javascript", 
      "html5", 
      "css3", 
      "socket.io", 
      "kinect", 
      "express.js"
    ], 
    "project_url": "https://devpost.com/software/danceauth"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nnone other than the man himself, Adam James Woolen, lvl 99 wizard, chair of the Aston Computer Science Society, contributor of project [redacted] and mother of dragons.\nWhat it does\nadam will make an arduino controll led lights by the power of voice recognition. he will also listen to you and tell you what you said\nWARNING may crash phone and take about 3 mins to load\nHow we built it\nwe used blender to make the head which we put into three js to display on a webpage then used text to speech to make it say stuff, we originally animated it but it wouldn't work. we made a site which could read your voice and make a comand system to control the arduino through the internet.\nChallenges we ran into\nanimations on webgl is a nightmare, \nAccomplishments that we're proud of\nadam is finally at everyones fingertips\nWhat we learned\ncomputers are sentient and they hate us.\nWhat's next for Adam in my pocket\nyou cant improve on perfection.", 
    "project_name": "Adam in my pocket", 
    "project_tags": [
      "javascript", 
      "python", 
      "html5", 
      "php", 
      "three.js", 
      "arduino"
    ], 
    "project_url": "https://devpost.com/software/adam-in-my-pocket"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nWe all used to play Swords and Sandals when we were playing browser games. We remembered that yesterday morning and thought it would be a great idea to see a similar battle style but instead of gladiators, the fighters would be websites!\nWhat it does\nThe player chooses two websites and then puts them to the death. The website with better stats (provided by the Majestic Api) is going to win!\nHow we built it\nWe built the game in Unity3d and we used the statistics provided by the Majestic API as stats for the warrior websites in the game.\nChallenges we ran into\nUnity UI is very buggy sometimes so we had to redo everything related to that over 4 times.\nCompiling didn't work out every single time as a bug from the latest version of unity kept appearing.\nAccomplishments that we're proud of\nThe game works as intended.\nWe have really good music and sound effects.\nThe majestic api integration is flawless for what we needed.\nWhat we learned\nHow to use the Majestic api.\nHow to hardcore Unity Ui elements.\nGetting the favicon from the internet and applying them to the head of a character.\nWhat's next for The Web Wars\nRelease for the Android.\nRemaster the Graphics!!!", 
    "project_name": "The Web Wars", 
    "project_tags": [
      "unity", 
      "c#", 
      "photoshop"
    ], 
    "project_url": "https://devpost.com/software/the-web-wars"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nWanted to see who won the elections\nWhat it does\nShows the amount of tweets the candidates had on social media \nHow I built it\nLooooot of Flask hard work...\nChallenges I ran into\nThe whole project\nAccomplishments that I'm proud of\nFInally mastered it!\nWhat I learned\nServers don't work very very good on Windows :(\nWhat's next for Election Bot", 
    "project_name": "Election Bot", 
    "project_tags": [
      "majestic-seo-enterprise", 
      "html5", 
      "flask"
    ], 
    "project_url": "https://devpost.com/software/election-bot"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nOur inspiration for this project was to be able to represent the data available to us visually so it was easier for users to see and understand, and add interactivity for the user when analysing the data.\nWhat it does\nThe project visualises the Millennium Point data using a 3d space created in Unity. The user has the ability to move between the three main floors of the millennium point building to see the number of people using each entrance on each floor. The number of people entering is visualised through a circle that expands when more people enter through that entrance. The program also displays if the day or week is a school holiday, an event or during BCU term time. Averages of the people entering is also shown by Day and by week. \nHow we built it\nFirst we formatted the given data so that it could be loaded into unity. Next we sourced the floor plans for the building to locate the entrances for use in the product. We then created the UI plan and the 3D world to represent the data we were given.  \n\nWill only run on 64 Bit windows, can be recompiled for any OS if desired*\n\nChallenges we ran into\nThe main challenges we encountered were parsing the original data given for the challenge because the data was not always in a consistent format which could be passed easily for use in the unity engine. Labelling the entrances also proved a challenge as some were not clear to see and were not labelled on the floor plan. Creating a GUI similar to the design of Millennium Point also proved a challenge but we created one by comparing the GUI to documents and the Millennium point website.\nAccomplishments that we're proud of\nThrough the project we were able to create a project that was aesthetically pleasing for the general public but also could be used to display information throughout the year for the different entrances to the building. We are also proud of using game engine technology to visual data to large audiences with data analysing capabilities.\nWhat we learned\nWe learnt time management skill, delegation of responsibility to maximise the resources available. We also learnt more about using Unity3D and programming in C#.\nWhat's next for HTM Millennium Point Data Challenge\nTo improve the project for future use we would let it accept more general data files, to accept custom data which we could not do due to the time constraints of the project. We would also implement more advanced data analysis to provide details of trends over time.", 
    "project_name": "HTM Millennium Point Data Challenge", 
    "project_tags": [
      "unity", 
      "c#", 
      "gimp"
    ], 
    "project_url": "https://devpost.com/software/htm-millennium-point-data-challenge"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nWe are a group of friends who enjoy playing the game League of Legends and so decided to try and create something using their API.\nWhat it does\nAt current, there are two separate systems. One where you enter an item name from the game and the form returns the description of its stats as well as an image for that item. The other system is one where you give a player name and the region, then if that player is currently in a live game - the form will return who is in the game with that player.\nHow we built it\nWe used a website called jsfiddle.net to allow us to try out using javascript in conjunction with html. We used https://developer.riotgames.com/api/methods for reference.\nChallenges we ran into\nWe didn't plan effectively - which is how we ended up with two separate systems. For each of us, this is our first hackathon so we are all learning from each other and trying to understand what we should expect from ourselves within this time. Also, none of us had used html and javascript before so that was another learning curve - although prior programming experience between us made breaking this barrier down easier than the others.\nAccomplishments that we're proud of\nA working lookup of an item's statistics with a background image on the form. The live games form also returns other players currently in the game too.\nWhat we learned\nHow to use html and javascript! Also understanding about JSON files and how to pull information from them.\nWhat's next for Use of LoLInfo\nUnifying the two systems and making the design of the form a bit more sophisticated.", 
    "project_name": "LoLInfo", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/use-of-riot-api"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nBased off an interest of both APIs and procedural map generation in games, this \"game\" was born\nWhat it does\nYou can sail on the ship to get to a randomly created island that is based off the current real-life weather. Encounter enemies that are also weather based.", 
    "project_name": "WeatheRPG", 
    "project_tags": [
      "json"
    ], 
    "project_url": "https://devpost.com/software/weatherpg"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nHackTheMidlands challenges section\nWhat it does\nCool stuff. \nThere are different graphs showing people entering the building in different periods\nHow we built it\nWith our bear hands\nChallenges we ran into\nLong queue for the food \nAccomplishments that we're proud of\nTeam work\nWhat we learned\nCome with an idea and a team at the net hackaton\nWhat's next for MP Challenge hack\nSell it and become billionaires", 
    "project_name": "MP Challenge hack", 
    "project_tags": [
      "django", 
      "python", 
      "plotly"
    ], 
    "project_url": "https://devpost.com/software/mp-challenge-hack"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nPassion for music and DJing, and them sweet beat drops\nWhat it does\nTrack mixing in various creative fashions (mostly random) utilising Spotify's Echo Nest API (providing audio features like number of beats, bars etc.)\nHow we built it\nWith our blood and sweat\nChallenges we ran into\n\nDisappointing Spotify APIs\nAwkward sound libraries\nLack of energy drinks\n\nAccomplishments that we're proud of\n\nPulling through despite a lack of experience with audio programming and DJing\nWorking with undocumented APIs (looking at you Spotify!)\n\nWhat we learned\n\nMusic theory & digital music formats\nAudio manipulation & programming in Python\nBash on Windows is a pile of crap (still!)\n\nWhat's next for DJ++\n\nImproving mixing with a neural network with user input training\nMore effects and transitions", 
    "project_name": "DJ++", 
    "project_tags": [
      "python", 
      "flux", 
      "spotify", 
      "bootstrap", 
      "love"
    ], 
    "project_url": "https://devpost.com/software/dj-15xb62"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nOwn one at home. Challenging strategy game when played correctly.\nWhat it does\nWe planned to be able to play the game with up to 4 players locally on the same board.\nHow we built it\nUsing Java for the GUI, I/O and algorithms.\njMonkeyEngine 3 for the actual game.\nBlender for the models.\nChallenges we ran into\nWe had a lot of bugs and especially having difficulty paring computers once the GUI in place.\nAlso, we never got the tokens to show up once placed.\nAccomplishments that we're proud of\nCombining a bunch of different aspects of programing: GUI, I/O, 3D Arrays, Engines, Models.\nWhat we learned\nAlmost every technical aspect of the project was learned during the Hackathon.\nWhat's next for Dimentional Tic Tac Toe\nSmash all the bugs for a complete functioning game.\nTeam\nBeenitia, Juliano, James, Jakub and Alexandre.", 
    "project_name": "Dimentional Tic Tac Toe", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/dimentional-tic-tac-toe"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nThere is nothing more unique than having a poem created from the interpretation of an image\nWhat it does\nIt takes an image, URL or from the computer, runs it through Clarifai's API to generate a list of tags associated with that picture, then it grabs a multitude of lines of poems from a database, sees which combination is the best through IBM Watson, and chooses the best one according to an emotional parameter.\nHow we built it\nWe divided the work into making sure we can grab the list of tags from an arbitrary image, while the other person was taking care of the poem generation from dummy data. When things got connected, we expanded and got to polish everything up, and spent the rest of the time optimising the poem generation, through choosing the best lines of poems and having them judged by IBM Watson's Tone Analyser.\nChallenges I ran into\nPython proved to be challenging for us since we weren't experienced enough in it. We sometimes spent more time doing trivial stuff that should be accomplished immediately in a comfortable language. Nevertheless, practice makes perfect, and we never got impeded enough that moving forward wasn't an option anymore.  \nAccomplishments that we are proud of\nWe successfully glued together a remarkable number of APIs and functions all in a python script designed to synthesize awe from analytical data. Parsing JSON proved to be easier than expected, APIs credentials and authentication went surprisingly well. We managed to simulate meaningful emotion in the form of a poem from a picture of basically anything.\nWhat I learned\nKnowing your tools goes a long way, as well as having a really organised working environment that can support even the most difficult research sessions.\nWhat's next for Poem from your picture\nImplementing a beautiful web interface for easier access and spreading the word to anyone feeling that their picture isn't worth a thousand words. It always will.", 
    "project_name": "Poem from your picture", 
    "project_tags": [
      "python", 
      "ibm-watson", 
      "clarifai", 
      "vim"
    ], 
    "project_url": "https://devpost.com/software/poem-from-your-picture"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "At the start, we were considering a treasure hunting game, where there would be one organiser who would select different places (eg landmarks) around a city. We have been considering QR codes to use with this project, so each of the 'players' could scan the codes after they had found one of the places marked by the organiser. However, after some brainstorming, we have decided to allow any of the users to be able to submit a location to find. This way, the first player to find that location would get points. We decided to scrap the idea of QR codes, as these would be too much of a hassle to print out for every user, especially if only one player would be able to use the code afterwards. Instead, a player who finds one of the locations marked has to take a picture of it, and wait for the approval of the original poster of the location. If it is approved, the user is rewarded with 10 points. As the icon of the game if a camera with an arrow through it, we decided to call the points \"arrows\".\nWe have been considering several platforms for the game, but in the end we chose to make the application using XCode in the language Swift, as we had a team member with a lot of prior experience. We also distributed jobs for the rest of us, with one of us sketching and making the design, and one team member researching the back-end database.\nWe ran into several challenges. First of all, finding a good solution for the back-end was difficult without a good understanding of XCode and Swift. In the end, we decided to use a service called Quickblox, with allowed us to create a database and also manage the data in the application. Another challenge we ran into was the time limit, as even though we tried our best to keep working, we had to scrap some features that we had been considering originally, such as having locations displayed on a map, which would have been a nice extra feature, however it was unfeasible given the time we had.\nEach of us have learned new skills, as we have all been working with tasks we had never done before. Also understanding the importance of communication was important, and I strongly believe we each became closer to each other as friends.\nIf we were to continue developing this application in the future, we would add other features such as preventing users from finding the chosen locations of the same player more than once or twice, to ensure cheating would be difficult. Also, we would implement a map feature, to make locations easier to find around the city, by giving a radius on the map to show hints about where the locations are.\nOverall, we each enjoyed this experience, and definitely learnt new skills, and just had fun working together generally.", 
    "project_name": "Picture Hunt", 
    "project_tags": [
      "swift", 
      "xcode"
    ], 
    "project_url": "https://devpost.com/software/picture-hunt"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nWe were inspired by Majestic, who provided us with their great API.\nWhat it does\nThe application interprets Twitter users' opinions on different topics of your choice. It searches for tweets related to your keyword, selects the most popular ones using the Majestic API and analyses them using Google's Natural Language Processing API. We are showing the general opinion of the people and the most frequently used adjectives when talking about the respective topic. \nIt can also analyse a user's Twitter activity, showing information about patterns in his tweets and his overall attitude when posting, as well as the number of links pointing to his profile.\nHow we built it\nWe built the back end API in Python and Node.js, which is called on the client side using html, css and angularjs. We used external APIs like Twitter's REST, Google's Natural Language Processing and Majestic API.\nChallenges we ran into\nPutting all these technologies together and making sure they cooperate effectively is a difficult task.\nAccomplishments that we're proud of\nWe are proud of managing to interpret all this information and to visualise it in a nice way.\nWhat we learned\nWe got an insight into data analysis and natural language processing.\nWhat's next for AskTwitter\nWe plan on finding new ways of using Google's and Majestic's data and refining the application.", 
    "project_name": "AskTwitter", 
    "project_tags": [
      "python", 
      "flask", 
      "angular.js", 
      "html", 
      "css", 
      "node.js", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/asktwitter"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nWhat it does\nRepresents some universities as basic 3D buildings. Height represents the amount of links they have depending on the filter you request - such as specifically 'Computer Science' or 'General top 100'.\nHow I built it\nInteracts with the Majestic API through PHP (mostly using the library Majestic makes available on their GitHub)\nChallenges I ran into\nSevere issues with Majestic not allowing cross-domain access customisation / lack of graphical visualisation experience\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for Majestic Universities City\nMake it look good - link buildings via roads - expand to make a more 3d city \"block\"", 
    "project_name": "Majestic Universities City", 
    "project_tags": [
      "javascript", 
      "php", 
      "css3", 
      "html5"
    ], 
    "project_url": "https://devpost.com/software/majestic-universities-city"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nNot being able remember sources in an argument/debate\nWhat it does\nAllows the storage of studies, which can be referenced later when needed.", 
    "project_name": "StudyStorer", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/studystorer"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nTrying out new things. Coming from non-programming backgrounds, we decided to make a mash-up of forms and modules to test ourselves.\nWhat it does\nAllows you to login with credentials, and choose one of two games to play.\nHow we built it\nOriginally using Python, but then transitioning to Visual Basic.\nChallenges we ran into\nNot knowing how to code and not being able to understand some of the errors thrown at us.\nAccomplishments that we're proud of\nActually made a working app.\nWhat we learned\nSome basic VB, how to use GitHub, and some basic MySQL.\nWhat's next for Game Selection\nNo idea yet.", 
    "project_name": "Game Selection", 
    "project_tags": [
      "visual-basic", 
      "visual-studio"
    ], 
    "project_url": "https://devpost.com/software/game-selection-app"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "", 
    "project_name": "Python Text Game", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/python-text-game"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nDonald Trump obviously\nWhat it does\nStops mexicans reaching the great land of America\nHow I built it\nWith Bricks\nChallenges I ran into\n413 Request Entity Too Large\nAccomplishments that I'm proud of\n204 No Content\nWhat I learned\nThat I can very easily waste a weekend\nWhat's next for We're going to build a wall\nAsk the Mexicans", 
    "project_name": "We're going to build a wall", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/we-re-going-to-build-a-wall-wv8lxr"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nth3r3 wuz a lak of da meemz in da reel worl so w3 wunted 2 gif u all da gift ov da maymays\nWhat it does\nwen u get to the dankest of places (Near an estimote), the app will dwnl0ad all teh m3m3s 4 u 2 enj0y\nit uses the spiciest of da web technologees, liek Nodes nd stuffz 2 mek n apps\nw3 yooozed da https 2 protact agenst meme in the middle atteks\nHow we built it\nPoorly\nChallenges we ran into\nDatabas3s r hard m80 we had lots ov da pruuublems\nwe iz all da st00pid and we runned out of tiem\ndomain ppls r meanie poos and take ages 2 give you ur dank domains\nAccomplishments that we're proud of\nMEMES\nWhat we learned\nHow to be the dankest, like no m3m3l0rd 3v3r was\nWhat's next for DankDrop\nPepe.", 
    "project_name": "DankDrop", 
    "project_tags": [
      "javascript", 
      "xamarin", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/dankdrop"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nI wanted to use the twitter api\nWhat it does\npull 50*users tweets and then randomly queries the user about them\nHow I built it\nin python using the tweepy docs\nChallenges I ran into\nkeeping up to date data to avoid the twitter poll limit\nAccomplishments that I'm proud of\nActually finishing the project\nWhat I learned\na bit more python, and the entirety of tweepy\nWhat's next for Tweet-Guesser\nMore users and a gui", 
    "project_name": "Tweet-Guesser", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/tweet-guesser"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nInspired by Mr. Robot TV show\nWhat it does\n1) SMS CLI tool to spoof messages, making it look like it came from someone else\n2) Another metric to measure if received email is legitimate\nHow I built it\nPython all the way, mix of python 2.7 and 3\nChallenges I ran into\nParsing 135.000 most visited websites ranked by Alexa created couple of problems when using old version of Python\nWhat I learned\nIncreased my knowledge about security and how SMS and telecommunications work\nWhat's next for 3xpl0its_and_pyth0n.wmv\nFgnl gharq sbe THV irefvba bs FZF clguba fpevcg, zber gbbyf vapbzvat!  <---- find what this is \n                ,;:'`'::'\n             __||\n       _____/LLLL\\_\n       \\__________\"|\n     ~^~^~^~^~^~^~^~^~^~\n\nOMW TO HAX0R YOU!", 
    "project_name": "3xpl0its_and_pyth0n.wmv", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/3xpl0its_and_pyth0n-wmv"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nHaving found nothing to do at Hack the Midlands, I decided to sit down and brush up on my Java knowhow. Looking at tutorials for making games in Java, I stumbled across a tutorial to make a shooter. This was the humble beginnings of AchimQuest, but now it has evolved into something far beyond the scope of that tutorial.\nWhat it does\nAchimQuest is based on classic bullet hell shooters, where one must dodge enemies and their attacks while trying to survive. This version of AchimQuest features four levels plus one boss level (featuring a surprise boss!), in addition to the ability to change characters whenever you want.\nHow I built it\nAs mentioned earlier, AchimQuest initially started as a Java tutorial online. However when I received positive feedback from my peers, I decided to continue with AchimQuest and make it into a fully fledged game. I used my knowledge of Java graphics (awt and swing) to create a proper GUI and made more use of keyboard presses to increase functionality.\nChallenges I ran into\nJava graphics are extremely fiddly, as I found out. Most of the bugs I encountered were usually due to something not being painted or made visible at the right time. \nAccomplishments that I'm proud of\nI am most proud of the boss fight, which was coded much more blindly (the boss moves differently to the other enemies and is the only one who can fight back, as well as the only one who can withstand a large amount of hits, and change his movement appropriately when hurt).\nWhat I learned\nI learned some basic game development techniques which will surely come in useful later on in my career. I also dabbled in audio and image manipulation within Java.\nWhat's next for AchimQuest\nIf I continue to work on AchimQuest I could perhaps work on special attacks, multiplayer (co-op) and advanced attack patterns.", 
    "project_name": "AchimQuest", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/achimquest-m1pzwu"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nI always loved simple games that have a lot of gameplay (gameplay > graphics) and rouge games have this power. The hackathon was my opportunity to make my own rouge and that's what I made :D However, it wasn't so easy to get start with as working on 3 projects and focusing on the last one around 3 in the morning didn't leave me with a lot of time to develop the programme. Anyway, I'm proud of what I made with the help of 7 cups of coffee :D\nWhat it does\nIt's a  command-line-console game, where the only purpose is to survive (typical rouge action).\nHow I built it\nSimple C# code wrote in Visual Studio 2015\nChallenges I ran into\nMaking the created screen not flicker, create an attack system, implement spell systems [which crashes the game, idk why ;'( ]\nAccomplishments that I'm proud of\nMaking the whole project in less than 1/3 of the total event, implementing a no-flicker drawing system, not falling asleep\nWhat I learned\nCoffee is the best friend of a programmer xD\nWhat's next for RougeTheMidlands\nFix the spell systems, add quests and random room generation (with corridors connecting rooms)", 
    "project_name": "RougeTheMidlands", 
    "project_tags": [
      "c#", 
      "visual-studio"
    ], 
    "project_url": "https://devpost.com/software/rougethemidlands"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nThis project is inspired by the Wikipedia Game, in which you have to get from one Wikipedia article to another one by just clicking on links in the articles.\nWhat it does\nThe idea is very similar to that of the Wikipedia Game: navigate from one hashtag to another through Twitter posts.\nHow we built it\nWe have used the Twitter API, along with Javascript and node.js to grab necessary data. The whole game is built using jQuery and socket.io.\nChallenges we ran into\nBecause there are hundreds of thousands of Twitter posts, there has to be a way of filtering all the hashtags, so as to leave only the ones that are relatively similar. Otherwise, the game is pretty much impossible to complete.\nWe have tried to make use of the Majestic API to categorise various hashtags, but this has proved to be quite a challenge to implement, given the constraints on API calls and the limitations of the API itself.\nAccomplishments that we're proud of\nWe are satisfied with learning on how to interact with a Web service through API calls with node.js.\nWhat we learned\nWe have gained experience with using an API as a basis for a completely new platform, alongside with getting to know server-side scripting and HTTP to make requests.\nWhat's next for Twitterace\nIntegrate Majestic API to help pick out hashtags that are somewhat similar and realistically close in terms of Twitter posts.", 
    "project_name": "Twitterace", 
    "project_tags": [
      "javascript", 
      "node.js", 
      "html", 
      "twitter", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/twitterace"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nInitially what we wanted to do was create some sort of \"bot\" to have a conversation for around 20 minutes with however this proved to take more time than we expected so we decided to make something that just translates text into another language over the phone.\nHowever since Google Cloud Speech doesn't like the recording Twillio is spitting out we had to lower to bar again.\nAnd so at midnight we binned a lot of stuff and rewrote everything to get to the point where we are today.\nWhat it does\nVertaler is a translator, but not just any translator. A translator you can text. A translator that'll call you back. A translator that might even text you back! That's what Vertaler is. Not just a translator but a companion.\nHow we built it\nThe whole api endpoint is built in Sinatra since Flask is too overused and Ruby is a nice and comfy language.\nUsing the Twilio and Google Cloud gem we were able to translate the phrase we wanted to translate and then either call or text back using Twillio.\nChallenges we ran into\nGoogle Cloud Speech.\nAccomplishments that we're proud of\nIt works.\nWhat we learned\nHow to use the Google Cloud API.\nWhat's next for Vertaler\nSpeech to Speech support.\nSource Code\nrequire \"sinatra\"\nrequire \"twilio-ruby\"\nrequire \"google/cloud\"\nrequire \"unicode\"\nrequire \"unidecoder\"\n\naccountSid = ENV['TWILLIO_SID']\nauthToken  = ENV['TWILLIO_AUTH']\napiKey     = ENV['GOOGLE_TRANSLATE']\n\ngcloud  = Google::Cloud.new\ntwillio = Twilio::REST::Client.new accountSid, authToken\n\nhashLanguages = {\n  'Afrikaans'           => 'af',\n  'Albanian'            => 'sq',\n  'Arabic'              => 'ar',\n  'Armenian'            => 'hy',\n  'Azerbaijani'         => 'az',\n  'Basque'              => 'eu',\n  'Belarusian'          => 'be',\n  'Bengali'             => 'bn',\n  'Bosnian'             => 'bs',\n  'Bulgarian'           => 'bg',\n  'Catalan'             => 'ca',\n  'Cebuano'             => 'ceb',\n  'Chichewa'            => 'ny',\n  'Chinese Simplified'  => 'zh-CN',\n  'Chinese Traditional' => 'zh-TW',\n  'Croatian'            => 'hr',\n  'Czech'               => 'cs',\n  'Danish'              => 'da',\n  'Dutch'               => 'nl',\n  'English'             => 'en',\n  'Esperanto'           => 'eo',\n  'Estonian'            => 'et',\n  'Filipino'            => 'tl',\n  'Finnish'             => 'fi',\n  'French'              => 'fr',\n  'Galician'            => 'gl',\n  'Georgian'            => 'ka',\n  'German'              => 'de',\n  'Greek'               => 'el',\n  'Gujarati'            => 'gu',\n  'Haitian Creole'      => 'ht',\n  'Hausa'               => 'ha',\n  'Hebrew'              => 'iw',\n  'Hindi'               => 'hi',\n  'Hmong'               => 'hmn',\n  'Hungarian'           => 'hu',\n  'Icelandic'           => 'is',\n  'Igbo'                => 'ig',\n  'Indonesian'          => 'id',\n  'Irish'               => 'ga',\n  'Italian'             => 'it',\n  'Japanese'            => 'ja',\n  'Javanese'            => 'jw',\n  'Kannada'             => 'kn',\n  'Kazakh'              => 'kk',\n  'Khmer'               => 'km',\n  'Korean'              => 'ko',\n  'Lao'                 => 'lo',\n  'Latin'               => 'la',\n  'Latvian'             => 'lv',\n  'Lithuanian'          => 'lt',\n  'Macedonian'          => 'mk',\n  'Malagasy'            => 'mg',\n  'Malay'               => 'ms',\n  'Malayalam'           => 'ml',\n  'Maltese'             => 'mt',\n  'Maori'               => 'mi',\n  'Marathi'             => 'mr',\n  'Mongolian'           => 'mn',\n  'Myanmar (Burmese)'   => 'my',\n  'Nepali'              => 'ne',\n  'Norwegian'           => 'no',\n  'Persian'             => 'fa',\n  'Polish'              => 'pl',\n  'Portuguese'          => 'pt',\n  'Punjabi'             => 'ma',\n  'Romanian'            => 'ro',\n  'Russian'             => 'ru',\n  'Serbian'             => 'sr',\n  'Sesotho'             => 'st',\n  'Sinhala'             => 'si',\n  'Slovak'              => 'sk',\n  'Slovenian'           => 'sl',\n  'Somali'              => 'so',\n  'Spanish'             => 'es',\n  'Sudanese'            => 'su',\n  'Swahili'             => 'sw',\n  'Swedish'             => 'sv',\n  'Tajik'               => 'tg',\n  'Tamil'               => 'ta',\n  'Telugu'              => 'te',\n  'Thai'                => 'th',\n  'Turkish'             => 'tr',\n  'Ukrainian'           => 'uk',\n  'Urdu'                => 'ur',\n  'Uzbek'               => 'uz',\n  'Vietnamese'          => 'vi',\n  'Welsh'               => 'cy',\n  'Yiddish'             => 'yi',\n  'Yoruba'              => 'yo',\n  'Zulu'                => 'zu'\n}\n\nhashLocales = {\n  'da' => \"da-DK\",\n  'de' => \"de-DE\",\n  'en' => \"en-GB\",\n  'ca' => \"ca-ES\",\n  'es' => \"es-ES\",\n  'fi' => \"fi-FI\",\n  'fr' => \"fr-FR\",\n  'it' => \"it-IT\",\n  'ja' => \"ja-JP\",\n  'ko' => \"ko-KR\",\n  'nb' => \"nb-NO\",\n  'nl' => \"nl-NL\",\n  'pl' => \"pl-PL\",\n  'pt' => \"pt-PT\",\n  'ru' => \"ru-RU\",\n  'sv' => \"sv-SE\",\n  'zh' => \"zh-CN\"\n}\n\npost '/' do\n  sender      = params['From'],\n  receiver    = params['To']\n  body        = params['Body']\n  arrBody     = /(.*) in (.*)/.match(body)\n  phrase      = arrBody[1]\n  language    = arrBody[2]\n  country     = hashLanguages[language]\n  locale      = hashLocales[country]\n  translate   = gcloud.translate apiKey\n  translation = translate.translate phrase, to: country\n  if locale.nil?\n    twillio.account.messages.create({\n      :from => receiver,\n      :to => sender,\n      :body => \"The phrase '#{phrase}' in '#{language}' is '#{translation.text}'\",\n    })\n  else\n    ascii_str = translation.text.to_ascii\n    puts ascii_str\n    ascii_str = ascii_str.gsub! ' ', '%20'\n    phrase_escaped = phrase.gsub! ' ', '%20'\n    call = twillio.account.calls.create(\n      :url  => \"http://0cdef1d3.ngrok.io/voice?Text=#{ascii_str}&Phrase=#{phrase_escaped}&Country=#{translation.to}&Locale=#{locale}&Language=#{language}\",\n      :to   => sender,\n      :from => receiver\n    )\n  end\n  Twilio::TwiML::Response.new do |r|\n    r.Message \"Welcome to Vertaler, the SMS translation service. You've just asked me to translate the phrase '#{phrase}' into '#{language}'.\"\n  end.text\nend\npost '/voice' do\n  translation = params['Text']\n  country     = params['Country']\n  locale      = params['Locale']\n  phrase      = params['Phrase']\n  language    = params['Language']\n\n  Twilio::TwiML::Response.new do |r|\n    r.Say \"The phrase #{phrase} in #{language} is\", voice: 'alice'\n    r.Say translation, voice: 'alice', language: locale\n    r.Say \"Good bye!\"\n  end.text\nend", 
    "project_name": "Vertaler", 
    "project_tags": [
      "sinatra", 
      "twilio"
    ], 
    "project_url": "https://devpost.com/software/vertaler"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nThis project is inspired by the Wikipedia Game, in which you have to get from one Wikipedia article to another one by just clicking on links in the articles.\nWhat it does\nThe idea is very similar to that of the Wikipedia Game: navigate from one hashtag to another through Twitter posts.\nHow we built it\nWe have used the Twitter API, along with Javascript and node.js to grab necessary data. The whole game is built using jQuery and socket.io.\nChallenges we ran into\nBecause there are hundreds of thousands of Twitter posts, there has to be a way of filtering all the hashtags, so as to leave only the ones that are relatively similar. Otherwise, the game is pretty much impossible to complete.\nWe have tried to make use of the Majestic API to categorise various hashtags, but this has proved to be quite a challenge to implement, given the constraints on API calls and the limitations of the API itself.\nAccomplishments that we're proud of\nWe are satisfied with learning on how to interact with a Web service through API calls with node.js.\nWhat we learned\nWe have gained experience with using an API as a basis for a completely new platform, alongside with getting to know server-side scripting and HTTP to make requests.\nWhat's next for Twitterace\nIntegrate Majestic API to help pick out hashtags that are somewhat similar and realistically close in terms of Twitter posts.", 
    "project_name": "Twitterace", 
    "project_tags": [
      "javascript", 
      "node.js", 
      "html", 
      "twitter", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/twitterace"
  }, 
  {
    "hackathon_name": "Hack The Midlands", 
    "project_description": "Inspiration\nInitially what we wanted to do was create some sort of \"bot\" to have a conversation for around 20 minutes with however this proved to take more time than we expected so we decided to make something that just translates text into another language over the phone.\nHowever since Google Cloud Speech doesn't like the recording Twillio is spitting out we had to lower to bar again.\nAnd so at midnight we binned a lot of stuff and rewrote everything to get to the point where we are today.\nWhat it does\nVertaler is a translator, but not just any translator. A translator you can text. A translator that'll call you back. A translator that might even text you back! That's what Vertaler is. Not just a translator but a companion.\nHow we built it\nThe whole api endpoint is built in Sinatra since Flask is too overused and Ruby is a nice and comfy language.\nUsing the Twilio and Google Cloud gem we were able to translate the phrase we wanted to translate and then either call or text back using Twillio.\nChallenges we ran into\nGoogle Cloud Speech.\nAccomplishments that we're proud of\nIt works.\nWhat we learned\nHow to use the Google Cloud API.\nWhat's next for Vertaler\nSpeech to Speech support.\nSource Code\nrequire \"sinatra\"\nrequire \"twilio-ruby\"\nrequire \"google/cloud\"\nrequire \"unicode\"\nrequire \"unidecoder\"\n\naccountSid = ENV['TWILLIO_SID']\nauthToken  = ENV['TWILLIO_AUTH']\napiKey     = ENV['GOOGLE_TRANSLATE']\n\ngcloud  = Google::Cloud.new\ntwillio = Twilio::REST::Client.new accountSid, authToken\n\nhashLanguages = {\n  'Afrikaans'           => 'af',\n  'Albanian'            => 'sq',\n  'Arabic'              => 'ar',\n  'Armenian'            => 'hy',\n  'Azerbaijani'         => 'az',\n  'Basque'              => 'eu',\n  'Belarusian'          => 'be',\n  'Bengali'             => 'bn',\n  'Bosnian'             => 'bs',\n  'Bulgarian'           => 'bg',\n  'Catalan'             => 'ca',\n  'Cebuano'             => 'ceb',\n  'Chichewa'            => 'ny',\n  'Chinese Simplified'  => 'zh-CN',\n  'Chinese Traditional' => 'zh-TW',\n  'Croatian'            => 'hr',\n  'Czech'               => 'cs',\n  'Danish'              => 'da',\n  'Dutch'               => 'nl',\n  'English'             => 'en',\n  'Esperanto'           => 'eo',\n  'Estonian'            => 'et',\n  'Filipino'            => 'tl',\n  'Finnish'             => 'fi',\n  'French'              => 'fr',\n  'Galician'            => 'gl',\n  'Georgian'            => 'ka',\n  'German'              => 'de',\n  'Greek'               => 'el',\n  'Gujarati'            => 'gu',\n  'Haitian Creole'      => 'ht',\n  'Hausa'               => 'ha',\n  'Hebrew'              => 'iw',\n  'Hindi'               => 'hi',\n  'Hmong'               => 'hmn',\n  'Hungarian'           => 'hu',\n  'Icelandic'           => 'is',\n  'Igbo'                => 'ig',\n  'Indonesian'          => 'id',\n  'Irish'               => 'ga',\n  'Italian'             => 'it',\n  'Japanese'            => 'ja',\n  'Javanese'            => 'jw',\n  'Kannada'             => 'kn',\n  'Kazakh'              => 'kk',\n  'Khmer'               => 'km',\n  'Korean'              => 'ko',\n  'Lao'                 => 'lo',\n  'Latin'               => 'la',\n  'Latvian'             => 'lv',\n  'Lithuanian'          => 'lt',\n  'Macedonian'          => 'mk',\n  'Malagasy'            => 'mg',\n  'Malay'               => 'ms',\n  'Malayalam'           => 'ml',\n  'Maltese'             => 'mt',\n  'Maori'               => 'mi',\n  'Marathi'             => 'mr',\n  'Mongolian'           => 'mn',\n  'Myanmar (Burmese)'   => 'my',\n  'Nepali'              => 'ne',\n  'Norwegian'           => 'no',\n  'Persian'             => 'fa',\n  'Polish'              => 'pl',\n  'Portuguese'          => 'pt',\n  'Punjabi'             => 'ma',\n  'Romanian'            => 'ro',\n  'Russian'             => 'ru',\n  'Serbian'             => 'sr',\n  'Sesotho'             => 'st',\n  'Sinhala'             => 'si',\n  'Slovak'              => 'sk',\n  'Slovenian'           => 'sl',\n  'Somali'              => 'so',\n  'Spanish'             => 'es',\n  'Sudanese'            => 'su',\n  'Swahili'             => 'sw',\n  'Swedish'             => 'sv',\n  'Tajik'               => 'tg',\n  'Tamil'               => 'ta',\n  'Telugu'              => 'te',\n  'Thai'                => 'th',\n  'Turkish'             => 'tr',\n  'Ukrainian'           => 'uk',\n  'Urdu'                => 'ur',\n  'Uzbek'               => 'uz',\n  'Vietnamese'          => 'vi',\n  'Welsh'               => 'cy',\n  'Yiddish'             => 'yi',\n  'Yoruba'              => 'yo',\n  'Zulu'                => 'zu'\n}\n\nhashLocales = {\n  'da' => \"da-DK\",\n  'de' => \"de-DE\",\n  'en' => \"en-GB\",\n  'ca' => \"ca-ES\",\n  'es' => \"es-ES\",\n  'fi' => \"fi-FI\",\n  'fr' => \"fr-FR\",\n  'it' => \"it-IT\",\n  'ja' => \"ja-JP\",\n  'ko' => \"ko-KR\",\n  'nb' => \"nb-NO\",\n  'nl' => \"nl-NL\",\n  'pl' => \"pl-PL\",\n  'pt' => \"pt-PT\",\n  'ru' => \"ru-RU\",\n  'sv' => \"sv-SE\",\n  'zh' => \"zh-CN\"\n}\n\npost '/' do\n  sender      = params['From'],\n  receiver    = params['To']\n  body        = params['Body']\n  arrBody     = /(.*) in (.*)/.match(body)\n  phrase      = arrBody[1]\n  language    = arrBody[2]\n  country     = hashLanguages[language]\n  locale      = hashLocales[country]\n  translate   = gcloud.translate apiKey\n  translation = translate.translate phrase, to: country\n  if locale.nil?\n    twillio.account.messages.create({\n      :from => receiver,\n      :to => sender,\n      :body => \"The phrase '#{phrase}' in '#{language}' is '#{translation.text}'\",\n    })\n  else\n    ascii_str = translation.text.to_ascii\n    puts ascii_str\n    ascii_str = ascii_str.gsub! ' ', '%20'\n    phrase_escaped = phrase.gsub! ' ', '%20'\n    call = twillio.account.calls.create(\n      :url  => \"http://0cdef1d3.ngrok.io/voice?Text=#{ascii_str}&Phrase=#{phrase_escaped}&Country=#{translation.to}&Locale=#{locale}&Language=#{language}\",\n      :to   => sender,\n      :from => receiver\n    )\n  end\n  Twilio::TwiML::Response.new do |r|\n    r.Message \"Welcome to Vertaler, the SMS translation service. You've just asked me to translate the phrase '#{phrase}' into '#{language}'.\"\n  end.text\nend\npost '/voice' do\n  translation = params['Text']\n  country     = params['Country']\n  locale      = params['Locale']\n  phrase      = params['Phrase']\n  language    = params['Language']\n\n  Twilio::TwiML::Response.new do |r|\n    r.Say \"The phrase #{phrase} in #{language} is\", voice: 'alice'\n    r.Say translation, voice: 'alice', language: locale\n    r.Say \"Good bye!\"\n  end.text\nend", 
    "project_name": "Vertaler", 
    "project_tags": [
      "sinatra", 
      "twilio"
    ], 
    "project_url": "https://devpost.com/software/vertaler"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Bay Area Hackathon 2016", 
    "project_description": "Inspiration\nMy dad had this idea. The tools we have today for searching the Bible are great, but they are largely keyword and topical search based, which makes it infeasible to ask questions in natural language form about issues important to people's personal lives (i.e. culturally relevant questions), which may not appear in the Bible in direct language. We need a new search engine to enable anyone to ask a culturally relevant question and get a meaningful response directly from the Scripture. This would do 2 things: help Christians grow their faith and be an evangelistic tool for non-Christians who have little or no Bible knowledge. Done right, with the right resources, it could be one of the best tools for understanding what the Scripture really says.\nWhat it does\nHow I built it\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for AskGod\nC4TK\nc4tksanfrancisco\nSlack channel: prj-askgod\nSlack username: larrywalters", 
    "project_name": "AskGod", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/askgod"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Bay Area Hackathon 2016", 
    "project_description": "Inspiration\nMissionary organizations and ministries need people.  There are many people who desire to serve but often don't know how to find a good match with a group or mission that shares their particular passion.  And so they do nothing.  This needs to change!\nWhat it does\nThis app will help meet the needs of and match ministries and missionary organizations with people willing to serve.  This would include short term local ministry opportunities requiring little or no previous notice, as well as short, mid, long term and lifetime mission work.\nC4TK\nc4tkfremont\nSlack ID:  @phruglebrian\nHow we built it\nIt's not built yet.  Will you help?\nChallenges we ran into\nWe only have one developing developer involved.  (A teenager still learning how to code.)\nAccomplishments that we're proud of\nUm.....\nWhat we learned\nWe need help.\nWhat's next for Ministry Match\nHopefully, the expansion of God's kingdom through the development and use of Ministry Match", 
    "project_name": "Ministry Match", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/ministry-match"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Bay Area Hackathon 2016", 
    "project_description": "Inspiration\nWhat would a great audio Bible experience on the Amazon Echo sound like?\nWhat it does\nHelp you interact with the Bible through the Echo voice interface.\n\nReads Bible passages\nTells you which verse it just read\nRemembers where you are, so it can continue later (even days later)\nAsk to repeat verses\nGives commentary on a verse (hard-coded prototype)\nInitial multiple-language support\nFavorite verses\n\nHow I built it\n\nDigital Bible Platform API\nnode.js\nAlexa Skills Kit\nAWS Lambda\nAWS DynamoDB\nHeroku\n\nChallenges I ran into\nDebugging JavaScript can be annoying.\nAccomplishments that I'm proud of\nFull voice app created in a weekend!\nWhat I learned\nThe Alexa Skills Kit API is great!\nWhat's next for Echo Audio Bible\nC4TK\nc4tkfremont", 
    "project_name": "Echo Audio Bible", 
    "project_tags": [
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/alexa-audio-bible"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Bay Area Hackathon 2016", 
    "project_description": "We will fill this in later. :)", 
    "project_name": "Finesse", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/finesse"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Bay Area Hackathon 2016", 
    "project_description": "Register interest in the Prayer Button!\nWhat it does\nWe created a product for telling a prayer buddy that we're praying, by pressing a button.\nHow it work\nThis is an AWS IoT Button. When I press the button it connects over wifi, and tells my prayer buddy that I'm praying, via an app on their phone.\nHow we built it\nSwift v3 iOS iPhone app, and the AWS Button talks to the AWS IoT service, which triggers an AWS Lambda, which talks to the Go backend hosted on Pivotal Web Services (PaaS), and using a AWS SimpleDB database.\nWhat's next\nWe'd like to enable church communities to use this with prayer buddies so all they need to do is hand out pairs of devices. We want it to be possible to use this to do anonymous prayer buddies too. We have started looking into buttons that will work on cellular networks and vibrate when the buddy prays. And we'd like to expand the app so you could look at your prayer history, and we'd like to add incentives to bring you break to praying when life gets on-top of you.\nWhy\nWhile smartphones have increased the connection we have with each other through social apps, and made it easier for us to carry a Bible with us everywhere. They can get in the way of quality time with God.\nAs an example: Sometimes I'll think \"Oh I should check-in with my buddy and pray for them\" and I get my phone out to shoot them a message and then get distracted by an Facebook notification.\nWe wanted to tell our prayer buddies that we're praying, without needing to interact with our phones.\nC4TK\nc4tksanfrancisco\nPraying icon by Cristiano Zoucas from the Noun Project", 
    "project_name": "Prayer Button", 
    "project_tags": [
      "ios", 
      "swift", 
      "golang"
    ], 
    "project_url": "https://devpost.com/software/pray-together"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Bay Area Hackathon 2016", 
    "project_description": "Inspiration\nEveryone needs people in their corner. We all get beat up by life and return back to our corner, but many don't have key people in their corner who can support, encourage, and coach them. \nWhat it does\nA service that connects people who have been through the same storm. \nHow I built it\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for Corner\nc4tksanfrancisco", 
    "project_name": "Corner", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/corner"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Bay Area Hackathon 2016", 
    "project_description": "", 
    "project_name": "Ocean's Deep Encounters - Guided Christian Meditation", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/ocean-s-deep-encounters-guided-christian-meditation-po27i3"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Bay Area Hackathon 2016", 
    "project_description": "Inspiration\nWeChat platform is the most popular messages and social media platform in China. What if we could better reach the Chinese with an integrated chat bot that could help people learn more about the Bible.\nWhat it does\nProvide a simple reading plan for someone who has never encountered the Bible. Answer basic questions and respond with topical information and verse lookup via the WeChat messages app.\nBegin by subscribing to the Gospel Guide bot on wechat. The bot responds with a welcome and instructions. Commands such as Start, Stop, Next, allow the user to begin a new 14 day intro to the Bible reading plan. The bot will auto send you todays reading each day and keep track of what reading your are currently on. The bot also accepts voice commands using WeChat's built in voice recognition. The voice recognition currently only works for mandarin Chinese, however our app is multilingual and can accept these Chinese voice commands without issue.\n \nIn addition to the reading plan, users can ask basic questions such as 'What is God like?', 'Who is Jesus?', 'Who is the Holy Spirit?', and 'What is love?'. Questions that do not have automatic responses are forwarded to another WeChat user who can send a response back. This person could be a pastor or spiritual leader. The bot is also able to receive voice message responses.\n \nThe Gospel Guide bot can respond with Bible text lookups. Simply send a message containing a Bible verse, chapter, or range, and the bot will send you the full text. If you would like more information about a verse or passage you can send a mesage containing keywords such as 'explain', 'I don't understand', 'commentary' followed by a scripture passage and the bot will send you a link to a Bible commentary on that passage!\n\n\nMultilingual English/Chinese\n\n\n\nHow we built it\nWe built the Gospel Guide bot using Python, Flask, and Redis running on a Heroku.com server.\nChallenges we ran into\nOverall, the coding went smoothly. The biggest issue we had was understanding the limited WeChat documentation on message passing. Because the documentation was translated from Chinese, many questions we had were left unanswered and were solved through trial and error. Other challenges included bugs from working with utf-8 characters and handling the different use cases for text messages, video messages, and audio messages.\nAccomplishments that we're proud of\nWe built a working Chat bot!\nWhat we learned\nI (Ben) learned Python this weekend, thanks to the help of Femi!\nWhat's next for WeChat Bible bot\nMore Chinese integration\nC4TK #c4tksanfrancisco", 
    "project_name": "WeChat Gospel Guide bot", 
    "project_tags": [
      "python", 
      "wechat", 
      "heroku", 
      "redis", 
      "flask", 
      "bible.org"
    ], 
    "project_url": "https://devpost.com/software/wechat-bible-bot"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Bay Area Hackathon 2016", 
    "project_description": "Inspiration\nThough we love the original technology behind the Lego Mindstorms Educational Robotics kit, we're not excited about its heavy price-tag.  Thus, we're developing the T.A.C.H.NOLOGY Robotics System, where we incorporate T.echnology with A.rts & C.rafts to provide a safe yet scalable experience that democratizes EdTech across both age and socio-economic barriers.\nWhat it does\nAn educational D.I.Y. Robotics Kit that starts with older Elementary and continues up to High School and beyond.\nHow I built it\nThrough Open-Source Hardware & Software, we're able to keep this educational kit as affordable as possible.\nChallenges I ran into\nIntegrating the hardware with software to build the Robotics system has been an ongoing challenge in Christ.\nAccomplishments that I'm proud of\nWitnessing youths/families make a turn-around for the good as we use this Educational Robotics Kit as a vehicle to share the love and grace of Jesus Christ.\nWhat I learned\nIt's all about Jesus and His Amazing Grace to allow any of this technology to work and be used to touch lives for His Glory and His Kingdom.\nWhat's next for Urban Tech Missions: Stairway To Coding\nSeeking Prayer Supporters and Church Partnerships in testing, refining and spreading our competitively-priced curriculum to build interactive communities of support and sharing.\nC4TK\nc4tkpaloalto", 
    "project_name": "Urban Tech Missions: Bridge To Coding & Robotics", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/urban-tech-missions-stairway-to-coding"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Bay Area Hackathon 2016", 
    "project_description": "Inspiration\nBillions of kids never had a chance to hear about God and study the Bible in its entirety as structured education. Our hope is to provide such education via this \"virtual\" Sunday School.\nWhat it does\n1) kids can use iOS/Android app to listen to the animated stories and play text-based interactive games to study Bible topic by topic\n2) Allows teachers to add their custom lessons in the online Editor and push it to their kids devices or to the world.\nDuring C4TK hackathon, we wanted to create a completely new lesson with Carmen who has never used our app and our Editor before.  She and Camil managed to add this lesson in less than 1 day, and do it all in Spanish - this is our first lesson in Spanish!!\nAlso, we added ability to add animated Spine objects to a timeline of the animated story, to start their animation in the proper time of the voiceover audio.\nHow we built it\nApp is built with Unity\nBackend is Ruby on Rails.\nOnline Editor is Coffescript.\nHackathon feature involved modifications on all 3 domains - app, backend and front-end.\nChallenges we ran into\nUsability & bugs of the Editor for teachers and App for kids.\nDesign for placing multiple animation timeline tracks along the audio track.\nAccomplishments that we're proud of\nCarmen and Camil created completely new lesson in Spanish, using Editor, telling about Salvation Plan.\nWe have a service that allows teachers to independently create lessons for the targeted group of kids and communicate the Message in the most relevant way for those kids/teens.\nWhat we learned\nOur Editor requires a lot more work to improve it's usability for teachers. \nWhat's next for SunScool - Sunday School App for Kids\nFix bugs in the Editor & add tests for it.\nBuild more new lessons and improve UX in the app and Editor.", 
    "project_name": "SunScool - Sunday School App for Kids", 
    "project_tags": [
      "unity", 
      "ruby-on-rails", 
      "coffeescript"
    ], 
    "project_url": "https://devpost.com/software/sunscool-sunday-school-app-for-kids"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Bay Area Hackathon 2016", 
    "project_description": "About\nTreasured Word\n\nTheme Verse: Psalm 119:11- \u201cYour word I have treasured in my heart, that I may not sin against You.\u201d\n\nThe Bible is near and dear to every believer. I need more of it. My mind needs to be saturated with it, and my soul needs it very much.\nTreasured Word is Quora/StackOverflow meets Bible verse memorization and discovery, recall, encouragement, etc. Users will be able to tag, categorize, label, and create collections (\u201cmetadata\u201d re: the verses) of Bible verses, and the community will be able to upvote/star/follow/favorite the tags, categories, labels, and collections for easy discovery and retrieval later.\nTopics/Categories could be: Worship, Financial Stewardship, Marriage, Love, Work, etc (most high-level)\nLabels would be smaller categories, including Moods/life experiences, such as: Depression, Anxiety, Fear, Joy, Celebration, Mourning, Death, Sorrow\nTags would be more loose, kind of like Twitter hashtags: #blessed, #thankful, #rebuked, etc\nInspiration\nWhat it does\nHow I built it\nPython, Django, JavaScript, React\nChallenges I ran into\nTaxonomy\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for Treasured Word\n\nMake it go live and lots of people on it\n\nC4TK #c4tkfremont", 
    "project_name": "Treasured Word", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/treasured-word"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Bay Area Hackathon 2016", 
    "project_description": "Inspiration\nVisits to Tanzania\nWhat it does\nCollect Survey Data Offline\nHow I built it\nAndroid App submitting to Google Forms\nChallenges I ran into\nNo time to do anymore\nAccomplishments that I'm proud of\nIt works\nWhat I learned\nMore time is needed\nWhat's next for E3 Connect\nAdding position on a map\nC4TK\nc4tkpaloalto", 
    "project_name": "E3 Connect", 
    "project_tags": [
      "android"
    ], 
    "project_url": "https://devpost.com/software/e3-connect"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Bay Area Hackathon 2016", 
    "project_description": "Inspiration\nPersonal conviction about role of inappropriate content\nWhat it does\nUses screenshots to detect inappropriate content\nHow we built it\nGoogle App Engine + Cloud SDK w/ Python\nChallenges we ran into\ngetting the screenshots and photo recognition to work\nAccomplishments that we're proud of\ngetting the screenshots and photo recognition to work", 
    "project_name": "Open Screen", 
    "project_tags": [
      "google-app-engine", 
      "google-cloud", 
      "flask", 
      "bootstrap", 
      "android", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/open-screen"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Bay Area Hackathon 2016", 
    "project_description": "Inspiration\nIn an age where hardships and brokenness dominate the news, it is easy to get depressed and grow apathetic about the state of the world. Intercede is an app that delivers content about what's happening today but also empowers and challenges the Church to also pray for current issues.\nWhat it does\nIntercede sends a daily reminder to pray for current issues and events that are happening around the world.\nHow I built it\nWith a lot of prayer + using Xcode.\nChallenges I ran into\n\nNot enough time\nVery aggressive goals\n\nAccomplishments that I'm proud of\n\nIntuitive, beautiful UI / UX\nPrayed over issues showcased in app\nIntegration with Twitter\n\nWhat I learned\n\nHacking for Jesus is so life giving and fun\n\nWhat's next for Intercede\n\nAsk church leaders to help curate content + prayers for Intercede", 
    "project_name": "Intercede", 
    "project_tags": [
      "ios"
    ], 
    "project_url": "https://devpost.com/software/intercede"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Bay Area Hackathon 2016", 
    "project_description": "Inspiration\nReadScripture.org\nWhat it does\nHow we built it\nChallenges we ran into\nAccomplishments that we're proud of\nWhat we learned\nWhat's next for ReadScripture.org Chrome Extension\nC4TK\nc4tksanfrancisco", 
    "project_name": "ReadScripture.org Chrome Extension", 
    "project_tags": [
      "javascript", 
      "scss", 
      "html5", 
      "chrome"
    ], 
    "project_url": "https://devpost.com/software/readscripture-org-chrome-extension"
  }, 
  {
    "hackathon_name": "Predicting pollution incidents", 
    "project_description": "Inspiration\nTo solve the real life problem which can improve my analysis skills\nWhat it does\nThree correlation factors are found and analysed, which are water level variations, running period of pumping station and power consumption distribution.\nHow I built it\nFirstly, the water level variations data is calculated, these type of data are sufficient. By compaying the normal pattern with abnormal pattern of pumping station, the trend of blockages can be identified. \nThen, the running period is developed. because if the blockages enter into the pumping station, the operation time will be significantly increasing.\nLast, the power consumption of pump, is another important factors which can be used to predict the failure of pump station.\nChallenges I ran into\nUnderstand the data, I have asked many questions to find the right data,many thanks to the kind staffs.\nSome important data are not available, for example, normal running period data and hourly power consumption data.\nAccomplishments that I'm proud of\nThe model is effective, it does forecast the blocakge which can prevent the pollutions in advance.\nWhat I learned\nThe whole pumping station, the seweage system.\nWhat's next for An effective model for pollutions prediction in SPS\nModel improvement, the model is for example, each pumping station has its own model, which should be built individually.", 
    "project_name": "An effective model for pollutions prediction in SPS", 
    "project_tags": [
      "excel"
    ], 
    "project_url": "https://devpost.com/software/an-effective-model-for-pollutions-prediction-in-sps"
  }, 
  {
    "hackathon_name": "Predicting pollution incidents", 
    "project_description": "A python script calculates the difference at each second in the SCADA data between two pumps at the same station. The difference jumps when one pump behaves differently to usual meaning it may have failed or started to slow down.\nGiven more time, these observations could be included with other features to try and predict a pump failure before it actually happens.", 
    "project_name": "Pump prediction", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/pump-prediction"
  }, 
  {
    "hackathon_name": "Hack4Equality 2016 Live Demo (Los Angeles)", 
    "project_description": "Note: Loo Bot Phone Number: (424) 785-2026\nInspiration\nThe inspiration came from tackling down discrimination against members of the LGBTQ community. Being discriminated against for being who you are and being denied access to bathroom and other services because of that was something we were not too fond of. We took it upon ourselves to help out members of this wonderful community, more specifically those who are homeless and tech savvy, and created something that is so simple to use in an attempt to connect them to services that they seek.\nWhat it does\nOur app connects those without wifi-access to gender neutral restrooms and charging outlets nearby. All that the user has to do is text our phone number.\nHow We built it\nWe built our services using twilio, api.ai and different apis we used from sites like refugerestrooms.org and google places. We then integrated intents within api.ai and connected them to our twilio phone number that would then bring about information from the cloud in heroku which sent back information from refugerestrooms.org and google places.\nChallenges I ran into\nTraining our intents was a bit difficult for there are millions of ways that an interaction can take place between our uses and our bot. Also, connecting places nearby with users in need, and training our bot to know whether an establishment is open or not took some digging.\nAccomplishments that I'm proud of\nWe are proud to be able to to reach out and impact that lives of those in deed. Although it may not be in a large scale yet, i feel honored that i can create something that can touch and impact so many people who are in need, in a positive effective way.\nWhat I learned\nI learned that you dont have to relate to anything or anyone in particular to lend a helping hand. At the end of the days we are all humans, created equally and we should strive to always help those in need. There is nothing more rewarding than to be able to create something that can benefit the lives of others'.\nWhat's next for LooBot\nWe started LooBoot 2 weeks prior to demo day. With such little time on our side, we have created an MVP that touches solely on gender neutral restrooms and phone outlets nearby for those needing this service. We plan on growing and expanding our service by integrating shelters, housing accessibility, soup kitchens and much more.", 
    "project_name": "LooBot", 
    "project_tags": [
      "heroku", 
      "python", 
      "flask", 
      "api.ai", 
      "twilio", 
      "google-places", 
      "sketch", 
      "photoshop", 
      "google-geocoding"
    ], 
    "project_url": "https://devpost.com/software/loobot"
  }, 
  {
    "hackathon_name": "Hack4Equality 2016 Live Demo (Los Angeles)", 
    "project_description": "Inspiration\nWhen the discriminatory legislation known as North Carolina\u2019s HB2 (\u201cthe bathroom bill\u201d) came into national spotlight earlier this year, we were interested in learning more about it and its impact on the trans and gender-queer community, especially from people whose lives would be directly affected. Naturally, we clicked on #HB2 on Twitter, expecting to browse through personal perspectives shared online; to our disappointment, we only saw coverage by national media outlets and personal narratives were few and far between. This is due to Twitter\u2019s algorithm prioritizing crowd traffic over individual voices and the same phenomenon is seen across the modern media landscape. This made us interested in creating a impact sharing platform designed to feature individual LGBT voices.\nThe more we brainstormed the idea, the more we realized the potential value these shared stories could have as a vehicle for political advocacy\u2014so we began to investigate how we might introduce advocacy features into the app. As we aimed to improve on what\u2019s available today, we examined the shortcomings of advocacy organizations and platforms like the Human Rights Campaign and the White House\u2019s We The People. We saw that we could create a more agile, strategic and purposed tool for LGBT personal advocacy.\nWhat it does\nSpeakout provides consumer-facing apps that empower citizens to share their personal stories and see the personal stories of others who are impacted by LGBT legislation. Through the app, it amplifies their voices and also encourages them to contact their elected representatives. \nThe server also provides API access that could provide valuable insight for NGOs interested in the perspectives of everyday LGBT people whose perspectives provide valuable research. \nHow we built it\nEddie designed the wireframes, built the iPhone application using Swift, and built the server and API using Firebase as the backend. Leonard developed the Android app. We stayed in regular contact so we could collaborate on the broader mission and make sure our respective projects aligned. \nChallenges we ran into\nWe ran into many technical challenges (implementing authentication, connecting to the backend, parsing data). \nWe also ran into challenges deciding how to our users could present themselves on the app. For political advocacy, it is often most effective to have official names and official addresses on petitions. But for many in our community, official names may not be how we see ourselves, and sharing their addresses may impact their safety. For this reason, we have made it open-ended what people can choose to share. \nAccomplishments that we're proud of\nWe\u2019re proud of completing two apps, creating a server, implementing live data from the Sunlight Foundation and Google\u2019s Civic API -- and in less than 9 weeks!\nWhat we learned\nLeonard learned a lot about Android development, including implementing fragments, implementing images and interacting with servers. \nWhat's next for Speakout\nWe would love to work directly with an LGBT rights organizations (domestic or international) interested in gaining the perspective of LGBT people on a specific issue, then use Speakout to empower that community to be heard.", 
    "project_name": "Speakout", 
    "project_tags": [
      "ios", 
      "firebase", 
      "swift"
    ], 
    "project_url": "https://devpost.com/software/speakout"
  }, 
  {
    "hackathon_name": "Hack4Equality 2016 Live Demo (Los Angeles)", 
    "project_description": "", 
    "project_name": "HeyBud", 
    "project_tags": [
      "ios", 
      "api.ai", 
      "node.js", 
      "objective-c", 
      "cocoapods", 
      "afnetworking", 
      "php5", 
      "esri", 
      "core-location", 
      "firebase", 
      "npm", 
      "amazon-web-services", 
      "facebook-graph"
    ], 
    "project_url": "https://devpost.com/software/heybud"
  }, 
  {
    "hackathon_name": "Hack4Equality 2016 Live Demo (Los Angeles)", 
    "project_description": "", 
    "project_name": "Kristening.me", 
    "project_tags": [
      "ruby-on-rails", 
      "nginx", 
      "ruby", 
      "javascript", 
      "imagemagick"
    ], 
    "project_url": "https://devpost.com/software/kristening-me"
  }, 
  {
    "hackathon_name": "Hack4Equality 2016 Online-Only (Global)", 
    "project_description": "", 
    "project_name": "raTe \u2013 shared trans experiences of healthcare", 
    "project_tags": [
      "perl", 
      "google-maps", 
      "mysql", 
      "html5", 
      "css3"
    ], 
    "project_url": "https://devpost.com/software/trans-accessability-to-healthcare"
  }, 
  {
    "hackathon_name": "Hack4Equality 2016 Online-Only (Global)", 
    "project_description": "", 
    "project_name": "Welcomr", 
    "project_tags": [
      "twilio", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/welcomr"
  },
  {
    "hackathon_name": "Energy management reports for local authorities", 
    "project_description": "Principal Objective\nOur objective has been to reduce the amount of manual work and \u2018number crunching\u2019 involved for energy managers in their report generation process. Previously, reports were emailed out and and analysed on an hour by hour basis on energy managers computers locally, manually. Reports then had to be created by looking at this data and manually finding out statistics from it to then report on. We could see this was a clear problem and so, we built a cloud-based dashboard to automate the process entirely.\nFeatures and Benefits\n\nHalf hourly energy usage reports are automatically input when received as email attachments at a specific email address once per day - therefore no changes to existing infrastructure are needed whatsoever to allow our solution to be used day-to-day by real life energy managers.\n\u2018Energy concerns\u2019 are automatically highlighted by looking at sharp changes in numbers on a week-on-week per-site basis.\nSites can then be viewed in detail and have their usage, averages, and costs, displayed in a table and graphed.\nSites also have a \u2018good\u2019 or \u2018bad\u2019 status generated by our week-on-week analysis algorithm, so energy managers can see wether a particular site is becoming more or less efficient instantly.\nA report can be generated that contains running bi-weekly data, analysed using our per-site week-on-week algorithm, so that energy managers can instantly see the most improving and most deteriorating sites, along with average weekly usage change and average weekly cost change for all sites that they manage.", 
    "project_name": "Project Watergate", 
    "project_tags": [
      "node.js", 
      "mongodb", 
      "chart.js", 
      "javascript", 
      "context.io", 
      "express.js", 
      "bootstrap", 
      "jquery", 
      "moment.js"
    ], 
    "project_url": "https://devpost.com/software/project-watergate"
  }, 
  {
    "hackathon_name": "Energy management reports for local authorities", 
    "project_description": "The approach we took was to investigate similarities in behaviour for energy usage across similar type of sites whilst accounting for seasonal change. By comparing institutes to their own history has allowed us to get a good idea of when their behaviour is unusual and should be investigated for potential savings. \nThe outputs from this was a dashboard document which shows just a small amount of the information that can be gleamed from the data available and by using exactly the same data and approach a notification system can be implemented to get quick notification for issues.\nThe solution was built using an Azure SQL Database for data storage and transformation. Tableau was then used to visualise this information. From there a dashboard was created to show the real insight from the data.", 
    "project_name": "Energy Dashboard and Anomaly Detection", 
    "project_tags": [
      "sql", 
      "azure"
    ], 
    "project_url": "https://devpost.com/software/nwl-hackathon"
  }, 
  {
    "hackathon_name": "Energy management reports for local authorities", 
    "project_description": "We want to help Sunderland City Council be the UK's most water efficient council - the UK's first Smart Water City.\nCurrently:\nThere is no system integration \u2013 utility data and council data are not combined.\nVisibility is an issue \u2013 lack of rich, human accessible information.\nOperational issues are not highlighted as quickly as they could be and energy managers require genuine insight and  intelligent prioritisation,  live alerts and easy to digest data.\nGoals:\nImprove efficiency \u2013 You can only measure what you can see\nWork in partnership with sites (or in reality customers) to save water and money, and protect the environment.\nEducate building managers, business managers, caretakers and end-users by providing better and more accessible information and advice through harmonised data.\nPromote awareness and measure the success of water-saving initiatives.\nFacilitate investment to help organisations make further savings in their water use and their bills.\nApproach:\nDevelop an application that provides visibility of usage patterns and problems to help improve operational efficiency and save money.\nDashboards and visualisations of the data \u2013 including smart site health ratings and intelligent prioritisation. This takes the data admin load away from staff and allows them identify smart strategies that are proactive rather than reactive.\nUsing gamification to bring site managers and wider stakeholders along with the strategy via a campaign (ultimately multi utility).\nWe built:\nOne key area we wanted to address was the lack of data availability that had been seen time and time again in council systems. We looked to address this issue by basing our development on top of a high availability RESTful JSON API. This approach will allow us to provide data to the dashboard and to create the poster in near real time, whilst also opening up the data to facilitate future hackathons, to aid further insight and cost cutting in the future.\nWe we're able to expand the functionality of the API to provide it's first signs of insight by ranking the best preforming schools. This showed that the newer schools were more energy efficient. Proving investments in new systems are already starting to pay off. \nSummary:\nVisibility and therefore visibility are the major issues\nYou can\u2019t measure what you can\u2019t see \nWater is the worst but provides biggest opportunity\nImprove efficiency at top level gamify site level and wrap in campaign\nMoving forward:\nMulti utility \u2013 bring data sets together\nAny site, any style\nCan be used to validate business investment", 
    "project_name": "The UK's First Smart Water City", 
    "project_tags": [
      "json", 
      "node.js", 
      "chart.js", 
      "mysql"
    ], 
    "project_url": "https://devpost.com/software/the-uk-s-first-smart-water-city"
  }, 
  {
    "hackathon_name": "Energy management reports for local authorities", 
    "project_description": "NDA really limits what we can say here\nIt's all explained in the presentation and write-up.", 
    "project_name": "Meter Explorer (ODILeeds)", 
    "project_tags": [
      "javascript", 
      "leaflet.js", 
      "google-chart"
    ], 
    "project_url": "https://devpost.com/software/meter-explorer-odileeds"
  }, 
  {
    "hackathon_name": "Energy management reports for local authorities", 
    "project_description": "Inspiration\nWe used a number of key angles to formulate our development:\nIntegration \u2013 Enforce ownership of datasets to drive more efficient process.\nReporting \u2013 Start categorising sites so they can be compared against benchmarks\nOwnership \u2013 Push reports to building owners for them to take a vested interest and ownership of efficiency \nWhat it does\nBuilds reports for building managers on receiving the NWL data and fires alerts to energy/asset managers\nThe underlying function of this development is to unload some of the efficiency drive work from the energy manager and empower building management to take ownership and give them a purpose to drive through change themselves.\nWhat's next for Water Efficiency\nPlenty of scope for future development in this area\nUse of Power BI to create interactive reporting and dashboards for management.  Technology in use is already closely coupled to enable this to happen.\nDynamically connect Tech Forge and System Link\nApply targets and track these\nBring in other utilities to create a one stop shop for reporting.  Also include statutory items\nFactor in more data items to help define a category standard \u2013 e.g. Condition, occupancy etc", 
    "project_name": "Water Efficiency", 
    "project_tags": [
      "excel", 
      "c#"
    ], 
    "project_url": "https://devpost.com/software/water-efficiency"
  }, 
  {
    "hackathon_name": "Energy management reports for local authorities", 
    "project_description": "Inspiration\nTo develop a novel solution of demand side management for non-household sites\nWhat it does\nFirstly, collect all sites information, then generate the site energy and water performance scorecard. Divid all sites into four domains (for energy), then find out which site has bad energy performance, related priority is set up and with different solution.\nHow I built it\nUsing Demand side management technologies, like distribution energy generation, shift energy usage, energy efficiency improvement\nChallenges I ran into\nRunning with time\nAccomplishments that I'm proud of\nFind out which site should the manager focus on, short-term and long-term plan is identified.\nWhat I learned\nCommericial Building energy performance.\nWhat's next for A Novel Solution of Demand Side Management and Improve\nidentify the finance improvement and pay back period.", 
    "project_name": "A Novel Solution of Demand Side Management and Improve", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/a-novel-solution-of-demand-side-management-and-improve"
  }, 
  {
    "hackathon_name": "HackSussex2016", 
    "project_description": "Inspiration\nLearn how to use new hardware, and play a little with leap-motion!\nWhat it does\nWell, just fly a drone without a controller.\nHow we built it\nFirst of all, we have connected a Leap-Motion to an arduino through a computer.\nthen we have managed to connect the arduino to a drone controller using a protoboard.\nChallenges we ran into\n\nWe came with the idea that arduino has analog output pins, but we discovered that it only emulate them by PWM, that is a digital signal and doesn't work for emulating an analog potenciometer, that is what we wanted. \nFinally we solve this by using a low-pass filter, but for building them we need some capacitors that we haven't token from home, so we went to the city centre to buy them.\n## Accomplishments that we're proud of\nHacking a drone controller and pinch them using an arduino.\nSolving our problem with the lack of analog outputs using low-pass filters.\n## What we learned\nWe learned to use the SDK of Leap Motion.\nAnd we learned to use the arduino and his libraries.\n## What's next for Leap Drone\nGet a better drone because our is almost dead.", 
    "project_name": "Leap Drone", 
    "project_tags": [
      "python", 
      "c", 
      "leap-motion", 
      "arduino"
    ], 
    "project_url": "https://devpost.com/software/leap-drone"
  }, 
  {
    "hackathon_name": "HackSussex2016", 
    "project_description": "OctocatHasCommitmentIssues\nLegend has it that the mystical Octocat is working hard on publishing the perfect app.\nThis of course can not be done without the help of fellow open source contributors.\nThese contributors help by submitting issues with Octocat's codebase. Octocat has to fix these issues with commits.\nThe more issues he fixes the more watchers will join in to contirbute to the codebase.\nIf Octocat fails to fix issues they keep piling up and causing the codebase to lose watchers whenever Octocat stumbles upon these issues.\nPeriodically Octocat will have to make a public release. If successful Octocat's codebase will increase in popularity and gain lots of watchers.\nIf failing to release, the codebase loses a part of it's watchers who decide to go and build node modules for NASA instead.\nOnce Octocat's codebase will gain enough popularity he can retire hapily and go with his brothers to Valhalla. Legend has it, it takes a legion of 2000 faithful watchers to grant him ascension to the heavens.\n--\nThe game can be played either with a gamepad or keyboard.\nFrom the menu select your preferred input and click start.\nKeyboard input:\nLeft/Right arrows to move Octocat.\nZ to jump\nX to shoot\nP to restart game\nGamepad input:\nLeft/Right D-pad to move Octocat.\nB to jump\nY to shoot\nStart to restart game", 
    "project_name": "octocathascommitmentissues", 
    "project_tags": [
      "javascript", 
      "html", 
      "phaser.js"
    ], 
    "project_url": "https://devpost.com/software/octocathascommitmentissues"
  }, 
  {
    "hackathon_name": "HackSussex2016", 
    "project_description": "Dashbot\nWhat it does\n\"Dashbot\" is an easy way to control your (office) dashboard via Slack. Just write him what you need to see or which widgets aren't needed anymore via your computer or mobile phone and it will automatically update your board.\nHow we built it (frontend)\nFor the frontend we're using a websocket connection to get data pushed from the server. This data is used by react.js to update the grid reactively.\nInspiration\nOn the one hand all of us use Slack at work everyday and we all enjoy playing arround with one of the many different bots aviable, or even with our own ones. \nOn the other hand we were looking for an easy configurable dashboard to use in the office or even at home. \nSo we had the idea to combine both and build a dashboard editable via Slack. \nIn the office colleauges could share current activities or funny gifs with easy and short commands.\nAt home the dashboard can be used to coordinate te everyday life with your flatmates, for exammple with a shared grocery list.\nWhat's next for Dashbot\nIn the future we will probably start using Dashbot at home and so find out about missing features and weaknesses in the current controlling. For working on project in the future we will probably rewrite the code using sailes with our newly gained knowledge and experience.\nThe goal for the future is to see Dashbot running in the office.", 
    "project_name": "Dashbot", 
    "project_tags": [
      "node.js", 
      "redis", 
      "mongodb", 
      "heroku", 
      "github", 
      "slack"
    ], 
    "project_url": "https://devpost.com/software/dashbot"
  }, 
  {
    "hackathon_name": "HackSussex2016", 
    "project_description": "Inspiration\nMaking code snippets more accessible across projects \nWhat it does\nYou can copy snippets to memory and recall them at any time\nAccomplishments that we're proud of\nFirst ever atom plugin we made\nWhat we learned\nAtom is a brilliantly hackable editor you can edit EVERYTHING\nWhat's next for Footsize\nFix some errors and publish to the atom plugin directory", 
    "project_name": "Footsize", 
    "project_tags": [
      "node.js", 
      "coffeescript", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/footsize"
  }, 
  {
    "hackathon_name": "HackSussex2016", 
    "project_description": "Inspiration\nI didn't have an idea until like 5pm.\nI was too busy socialising and getting stickers and putting them on my laptop\nI wanted to make a game with unusual inputs, and use Unity to build it.\nAt about 4.30 I realised I wanted to make a controller using my Makey Makey and a sheet of paper.\nI couldn't find any paper, but I did find a MLH bag.\nThe whole game theme was built around that, with all the platforms being mlh stickers and the background being my laptop.\nWhat it does\nIts a game.\nsome people found it fun, some found it frustrating to play with the terrible controller I built.\nHow I built it\nThe paper bag had crocodile clips attached to the side, then i drew thick lines that led to big buttons on it in pencil.\nThe game was made in unity, I took pictures of some stickers, cut them out in an image editor to give them transparent backgrounds then made them objects in unity. \nChallenges I ran into\nTHE PENCIL GRAPHITE IS NOT A GREAT CONDUCTOR\nAccomplishments that I'm proud of\nMade a decent game in such short amount of time.\nWhat I learned\nI have a better understanding of creating 2D games in unity.\nWhat's next for Sticker Jump\nReleased on the Web for everyone to play", 
    "project_name": "Sticker Jump", 
    "project_tags": [
      "unity"
    ], 
    "project_url": "https://devpost.com/software/sticker-jump"
  }, 
  {
    "hackathon_name": "HackSussex2016", 
    "project_description": "// the domain.com name we've chosen is   teeny-tiny-emojitron-ninja.com\nInspiration\nMany tools are available for text auto-completion: spell check, voice command; however none are available to finish off a text with an appropriate emoji. We want to make the world a better place by providing everybody with our tool, so that everybody can emojify their sentences.\nWhat it does\nEmojiNinja can look inside your heart and your mind and 100% accurately make your message complete with the emoji your message needs. Emoji is life\nHow we built it\nIt's a node.js web chat we made using sockets. At the heart of the project is a neural network which analyzes the sentence and suggests an emoji.\nChallenges we ran into\nTurns out displaying emojis is quite a challenge\nAccomplishments that we're proud of\nWe are proud of using our knowledge of Python, node.js and AWS, along with neural networks, to create a tool to facilitate everyone's chat experience\nWhat we learned\nWe learned how to use AMAZON WEB SERVICES. We also learned how to use pybrain, a python library for neural networks. And Carla learned how to make a chat.\nWhat's next for EmojiNinja\nYou will never discover your true self without EmojiNinja, therefore it is our goal for the whole world to use it. And we could get some more training examples...", 
    "project_name": "EmojiNinja", 
    "project_tags": [
      "node.js", 
      "python", 
      "amazon-web-services", 
      "amazon-ec2", 
      "amazon"
    ], 
    "project_url": "https://devpost.com/software/emojininja"
  }, 
  {
    "hackathon_name": "HackSussex2016", 
    "project_description": "Inspiration\nWanted to play with Twitter api as well as try to deploy something with docker. \nWhat it does\nTracks the number of positive vs negative tweets that contain a particular search term/tag.\nHow we built it\nIt runs a separate Scala/Akka/JVM based dockerized backend hosted on an AWS EC2 instance orchestrated by TumTum (Docker Cloud) which is connected to the Twitter stream. The API lets you chose tags/search terms to follow. When a tweet is matched it is sent to the Azure Text Analytics API for sentiment analysis. A running total of positive vs negative tweets is kept for each search term, available on another API.\nAPI GitHub\nThe front end is written in Javascript using Webix and hosted on AWS S3.\nWebview GitHub\nChallenges we ran into\nStaying awake long enough to finish.\nGetting the Java Twitter4j library to play nicely with Scala - Scala primitives are not always the same.\nCORS - enabling the backing to take requests from other domains.\nMany many more...\nAccomplishments that we're proud of\nIt works without crashing \\m/ (so far...)\nWhat we learned\nTwitter API. Azure API. Akka Actors api. Docker/Tumtum.\nWhat's next for Bits Please\nMore analytics and persistence of results. Better UI.\nTried to use the domain voucher to buy bitsplease.net for the project but domain.com's site was being less than useful. I think I have managed to buy it now, but they won't send me the details to log in.... meh.", 
    "project_name": "Bits Please", 
    "project_tags": [
      "scala", 
      "java", 
      "javascript", 
      "docker", 
      "amazon-web-services", 
      "azure"
    ], 
    "project_url": "https://devpost.com/software/bits-please"
  }, 
  {
    "hackathon_name": "HackSussex2016", 
    "project_description": "func-seekr package\nA useful atom package for developers that reuses Gist code easily.\nIt consults all public Gists and lets you filter them so you can look for any function you want written in any language.\nTo toggle: ctrl + alt + o\nFor developing this tool we used the latest version of the AtomAPI 1.0, including atom-space-pen-views classes.\nAfter having some trouble when trying to get our free domain at Domain.com we have decided to develop it locally.\nThe domain name is www.noneedtoreinventthewheel.com\nWe have included the whole web project in the second repository field.", 
    "project_name": "func-seekr", 
    "project_tags": [
      "coffeescript", 
      "css3", 
      "html5", 
      "less", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/func-seekr"
  }, 
  {
    "hackathon_name": "HackSussex2016", 
    "project_description": "Inspiration\nThe realisation that lots of coursework deadlines were coming up.\nWhat it does\nCreates excuses from input strings based on how common the word is used in the English Language.", 
    "project_name": "ExcuseGenerator", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/excusegenerator"
  }, 
  {
    "hackathon_name": "HackSussex2016", 
    "project_description": "", 
    "project_name": "CrimeWatch", 
    "project_tags": [
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/crimewatch-zw4jhx"
  }, 
  {
    "hackathon_name": "HackSussex2016", 
    "project_description": "", 
    "project_name": "Ollie Simulator 2016", 
    "project_tags": [
      "html", 
      "javascript", 
      "phaser.js"
    ], 
    "project_url": "https://devpost.com/software/hacksussexthegame"
  }, 
  {
    "hackathon_name": "HackSussex2016", 
    "project_description": "Inspiration\nBubble wrap\nWhat it does\nBallons float to the top of the screen. The higher you press then the higher the note. You can use 3D touch to control the volume of the notes.\nHow I built it\nSwift and Xcode\nChallenges I ran into\nnon linear pressure recognition\nAccomplishments that I'm proud of\nThe balloons move at a very good pace\nWhat I learned\nBetter audio management on swift\nWhat's next for Stress Popper\nWWDC submission", 
    "project_name": "Stress Popper", 
    "project_tags": [
      "swift"
    ], 
    "project_url": "https://devpost.com/software/stress-popper"
  }, 
  {
    "hackathon_name": "HackSussex2016", 
    "project_description": "Inspiration\nWe wanted watch to tell us whether we left our phone.\nWhat it does\nIt vibrates whenever the connection is lost with the phone.\nHow we built it\nWe used CloudPebble API with C language and some on-line support websites.\nChallenges we ran into\nWe could not use the Pebble JS API to be able to use a Worker (background running up on pebble watch), we had to switch code to C\nAccomplishments that we're proud of\nWe were able to accomplish this without the need of separate mobile app\nWhat we learned\nSome C language (we never programmed in this particular one), Pebble API, Pebble Watch (we also never used one before)\nWhat's next for Leash\nQuicker response time with the disconnection (signal strength checker), a better GUI, clean code, add lock functionality for the phone", 
    "project_name": "Leash", 
    "project_tags": [
      "pebble", 
      "c"
    ], 
    "project_url": "https://devpost.com/software/leash"
  }, 
  {
    "hackathon_name": "HackSussex2016", 
    "project_description": "Inspiration\nI bought this cute plastic bird-shaped colour changing light from Tiger (the best shop in the world). I wanted to make something with it!\nWhat it does\nWhenever somebody tweets with #HackSussex it lights up in Twitter-blue!\nHow I built it\nNode.js app listens to a stream from the Twitter api and when it receives a tweet, sends a random signal over serial to the arduino, running a sketch that flashes the light on when it receives anything over serial.\nChallenges I ran into\nI initially wanted to light up the bird when I got a Mac OS notification but the sqlite database containing all of the notifications was total nonsense, so I have up on that idea. Also somebody said the bird looked like the Twitter logo.\nAccomplishments that I'm proud of\nI must get the award for laziest hack, right?\nWhat I learned\nDon't go out the night before a hack. Sleep is the most powerful programming tool!\nWhat's next for twit bird\nUse the arduino serial rgb led control software I made ages ago instead of this rubbish method. Also get a cuter bow.", 
    "project_name": "twit bird", 
    "project_tags": [
      "node.js", 
      "arduino", 
      "twitter"
    ], 
    "project_url": "https://devpost.com/software/twit-bird"
  }, 
  {
    "hackathon_name": "HackSheffield 1.0", 
    "project_description": "", 
    "project_name": "Algo Fighter", 
    "project_tags": [
      "javascript", 
      "json", 
      "node.js", 
      "socket.io", 
      "express.js"
    ], 
    "project_url": "https://devpost.com/software/algo-fighter"
  }, 
  {
    "hackathon_name": "HackSheffield 1.0", 
    "project_description": "Inspiration - We wanted to work plotting data on a map, also we are all very environmentally aware, so the idea of plotting a heatmap based on good positions to place solar panels.\nWhat it does - Reads a data file containing the height of buildings in London, analizing their position related to each other and the position of the Sun. Yellow Areas are best positions to place solar panels.\nHow we built it - Using Java, we read the data using a 2D array, then made the heatmap using the heatmap Java library, to calculate the position of the Sun, Aiden spent many hours figuring out which algorithms to use, and how to use the Solar Azimuth Angle, the Solar Zenith Angle and the hour angle.\nChallenges we ran into - We had to research a lot of the theory behind the Sun calculations, our data was very detailed, but far too big to compute all at once, we had to produce separate images of London, then Stitch them together using Gimp\nAccomplishments that we're proud of - We managed to produce a heatmap of London that resembled the city to a very high accuracy. We managed to produce a working Sun chart, predicting the angle of the Sun from the ground at any time on any day of the year.\nWhat we learned - our knowledge of 2D arrays and Big Data has expanded drastically, we learned about implementing new Java Libraries and how to quickly get to grips with the source code. We learned how to calculate the shadow cast by a building with the Sun at many different angles.", 
    "project_name": "HackSheffield - BooleanAlgebra", 
    "project_tags": [
      "java", 
      "netbeans"
    ], 
    "project_url": "https://devpost.com/software/hacksheffield-booleanalgebra"
  }, 
  {
    "hackathon_name": "HackSheffield 1.0", 
    "project_description": "Inspiration\nWe realised how there isn't a platform to discover events happening around us that is presented in a way easy to visualise. Many events are sometimes discovered on Facebook by accident when someone clicks \"attending\" or \"interested\" in an event. \nWhat it does\nFootFall is a platform that allows users to visualise the hottest events happening around them. They can search for different locations around the world\nHow we built it\nWe first gathered data using the Facebook graph API and sorted the data based on location, event dates, duration of the events, and the estimated number of people attending. An API was then created to query this data, which allows to then present in any client we choose. Our data visualisation method of choice is the Google Maps API, which allowed our users to interact with events that they found using a heatmap and a filter for the events based on date ranges. We deployed our website to Amazon AWS and also used a custom domain from Domain.com. On the AWS instance, have an Apache server for serving web content and a node.js server for API calls. We'd like to thank the sponsors of HackSheffield as well as the organisers of the hackathon for running this amazing event.\nChallenges we ran into\nThe biggest challenge we ran into was gathering the data itself. We had to be careful to not breach any terms of privacy and it was a major concern to us that there wasn't enough data around as well.\nAccomplishments that we're proud of\nWe are proud of solving a Big Data problem. Making sense of the data that we had and presenting it in a visually pleasing interface while also using it to benefit potential users around the world is truly satisfying. The team dynamic is also something that we are truly proud of. We enjoyed building something cool that matters during the hackathon.\nWhat we learned\nWe learnt how messy data is presented to us and sometimes, we don't even realise that there is data that we can utilize in a useful manner useless we actively looked for it.  \nWhat's next for FootFall\nWe could implement other sources of data, for example, live tweets from Twitter regarding current events and intergrate that into our platform. We could also allow our users plan a route through popular events in their area to help them discover the events around them.", 
    "project_name": "FootFall", 
    "project_tags": [
      "jquery", 
      "amazon-web-services", 
      "facebook-graph", 
      "google-maps", 
      "apache", 
      "node.js", 
      "javascript", 
      "html", 
      "css", 
      "sublime-text", 
      "python", 
      "linux"
    ], 
    "project_url": "https://devpost.com/software/footfall"
  }, 
  {
    "hackathon_name": "HackSheffield 1.0", 
    "project_description": "Inspiration\nSensor data from real world can be extremely noisy. Trying to make sense of tens of thousands of entries manually is NOT an option. Our approach uses different techniques to map the entries to the proper activities.\nWhat it does\nInitial dataset has many instances that are mislabeled. \nWe use a rule-based pre-processing routine to filter the meaningless data points.\nA simple neural network is then trained to classify the entries into 6 categories:\nIN_VEHICLE, ON_BICYCLE, STILL, UNKNOWN, TILTING, WALKING\nThe final goal is to visualise this new, improved information on a front-end.\nHow we built it\nThe data is in CSV format, the pre-processing is done using simple python scripts and subroutines.\nThe neural-net is written in python and is an input layer directly fed into an output layer. \nActivation function is a simple max function. Noise was introduced to try to reduce the effect of the skew in the classes composing the dataset.\nChallenges we ran into\nThe dataset, being real-world sensor data, was skewed towards certain activities.\nThis means that some classes were overrepresented during the learning process and dominated the network.\nAccomplishments that we're proud of\nThere is [a certain degree of] learning from the network and the visualisation shows that pre-processing is useful to a certain extent.\nWhat we learned\nExpect some serious noise in real world-data, sensors are cool but take them with a pinch of salt.\nUnsupervised learning is hard but super-cool. \nWhat's next for NoisyWorld\nIntroducing techniques to reduce the effect of skew in the data.", 
    "project_name": "NoisyWorld", 
    "project_tags": [
      "python", 
      "react", 
      "node.js", 
      "gulp.js", 
      "html5", 
      "scss"
    ], 
    "project_url": "https://devpost.com/software/noisyworld"
  }, 
  {
    "hackathon_name": "HackSheffield 1.0", 
    "project_description": "Inspiration\nWhat it does\nProvides statistical information related to FB HackSheffield event, such as FB user id, my personal friends connection at HackSheffield\nHow I built it\nBuilt using Express+Node.js and d3.js.\nChallenges I ran into\nAt start I ran into problems with getting access to FB Graph API and the visualising.\nAccomplishments that I'm proud of\nI found couple of interesting statistical pieces of data. For example that FB user if make two distinct pieces of data.\nWhat I learned\nI learnt that data visualisation can be a fun process :)\nWhat's next for DataInsights\nGetting more data visualised, improving the code, providing RESTful API.", 
    "project_name": "DataInsights", 
    "project_tags": [
      "javascript", 
      "json", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/datainsights-bpu5z2"
  }, 
  {
    "hackathon_name": "HackSheffield 1.0", 
    "project_description": "Domain registered : www.MarvelVSCap.com\nInspiration\nWe wanted to create something interesting using all sorts of open data. This project appeals to us because it has funny elements.\nWhat it does\nPredict the spread of the virus/disease based on the location, commuting between district, employment rate, population & wage + give you morbid thoughts of the future.\nHow we built it\n\nTechnologies: Node, MySQL\nData: Office for National Statistics (ONS) data for 2011, London Datastore\n\nChallenges we ran into\n\nToo much data sets that do not exactly match\nDifficult to incorporate/combine data for wanted results. (e.g. getting Local Authorities' boundary coordinates)\nSeverely lack of APIs which resulted us in downloading datasets and converting them into database tables.\n\nAccomplishments that we're proud of\n\nWe went through 5 hours of thorough planning, weren't tempted to tap away on our keyboards until we were done planning.\nAlthough we did not manage to properly crunch the data we have, we still managed to get some sensible information.\nWe went through hell digging for datasets in open data websites (e.g. ONS, Data.gov.uk, etc).\n\nWhat we learned\n\nMySQL does not have Common Table Expressions i.e. stick to the tech you know best\nDon't have to aim for perfection\n\nWhat's nice to have for UK Epidemic Simulator\n\nIncluding other types of data to predict the spread (e.g. topography, health status of location, etc)\nFeature to find a safe location to start a base\nMap routes to various desired resources\nWeather forecast\nOther survival features (e.g. (poisonous plants / berry identifier)", 
    "project_name": "UK Epidemic/Zombie Outbreak Simulator", 
    "project_tags": [
      "javascript", 
      "mysql", 
      "excel"
    ], 
    "project_url": "https://devpost.com/software/uk-epidemic-simulator"
  }, 
  {
    "hackathon_name": "HackSheffield 1.0", 
    "project_description": "Inspiration\nWe were inspired by the coolness of Oculus Rift, so we decided to use it combined with Leap Motion which is also a really neat device.\nWhat it does\nBasically it's a small VR game, where you can move around and destroy things with your real world hands. We strapped the Leap Motion sensor to Oculus Rift, so that it can detect your real world hands and put them in the real world. This allows you to interact with the VR world.\nHow I built it\nWe used Unity for the actual little game and the different types of SDKs and APIs required for the hardware.\nChallenges I ran into\nIt was really hard setting up the hardware to work together.\nAccomplishments that I'm proud of\nWell, it does look really cool.\nWhat I learned\nWe learned a lot about Unity while doing this. Also that the capabilities of VR are limitless.\nWhat's next for VR Simulation\nThere's so much to do with VR. I can see almost every type of entertainment migrating to VR in the future.", 
    "project_name": "VR Simulation", 
    "project_tags": [
      "unity", 
      "oculus-gear-vr", 
      "leap-motion"
    ], 
    "project_url": "https://devpost.com/software/vr-simulation"
  }, 
  {
    "hackathon_name": "HackSheffield 1.0", 
    "project_description": "Inspiration\nGot giddy with an Oculus Rift\nWhat it does\nNothing\nHow we built it\nWith blood\nChallenges we ran into\nAWS, integrating API's, integrating  google sign-in,\nupdating aws-SDK packages, gradle conflicts, waiting for gradle to build...\nAccomplishments that we're proud of\nstuck by AWS (first time using it)\nWhat we learned\nDon't use AWS if you're not a massive company and have no training on it.\nWhat's next for DroneGuide\nIf we get a drone.... we'll continue the implementation.", 
    "project_name": "DroneGuide", 
    "project_tags": [
      "java", 
      "amazon-web-services", 
      "android-studio"
    ], 
    "project_url": "https://devpost.com/software/droneguide"
  }, 
  {
    "hackathon_name": "HackSheffield 1.0", 
    "project_description": "Inspiration\nFirstly, we wanted to build a fun quiz game mainly targets kids right now which is nothing like traditional games which game developers write the questions and answers manually. We tried to build a game that extracts questions and answers from raw data.\nWhat it does\nIt uses some data set that contains information about countries, capitals, cities and population. Questions are gathered without knowing the structure of the data using some kind of Data Analysis. After getting the questions and answer, the game that we built in Unity fetches the questions from web server in AWS and users can answer them by just hand gestures received by Leap Motion.\nHow we built it\nWe used AWS to store data and the web service that gives the questions. Unity 3D 5.3 for building the game and Leap Motion of course. PHP and MySQL for implementing a web server that outputs in json.\nChallenges we ran into\nWe tried to build it in Windows first, after 6 hours of coding for the game in Unity it completely failed. So we started from scratch with Mac. After spending couple hours of more efficient coding, Unity in Mac froze and we lost all our design except C# codes. We spend couple hours just to find an appropriate data set. \nAccomplishments that we're proud of\nAlthough we didn't have any handful experience in Unity 3D or C#, in less than 24 hours we built a functional game with some complex features as getting data from a web server asynchroniously and Leap Motion which we also tried for the first time here.\nWhat we learned\nWe definitely learned Unity 3D with C# development. Some web services and data analysis.\nWhat's next for Motion Quiz\nTo sum up, the fact that we mainly focused on auto generated questions is because we will not need update questions occasionally, instead we will update question generator algorithms, so we can target all kind of people rather than just kids by customizing question types.", 
    "project_name": "Motion Quiz", 
    "project_tags": [
      "unity", 
      "leap-motion", 
      "c#", 
      "php", 
      "amazon-web-services", 
      "mysql", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/motion-quiz"
  }, 
  {
    "hackathon_name": "HackSheffield 1.0", 
    "project_description": "Inspiration\nAs there was no theme we came up with plenty of ideas, but in the end we decided to leave the fancy hardware aside and try to do something that could be useful for a potential user.  Everyone is using a bookmarks system (usually the browser integrated one), but most of the time the old links (even important ones) are forgotten and they get burried in the massive list of bookmarks.\nWhat it does\nOur web platform takes an URL input from the user and it automatically categorizes, by analysing the english words and it assigns them to different topics (such as Art, Business, Home, Techology) using public classifiers. Also, it displays the most visited websites and a trend of the website categories which are most visited. A system such as this will be really useful for tracking the online browsing and make efficient use of online resources.\nHow we built it\nWe used php for back-end and html and css for the front-end. For the classification algorithm we used uclassify and heroku for deployment. \nChallenges we ran into\nWe firstly decided to use Python instead of PHP, but unfortunately we had to change our minds and that made us run out of time. Also, as the sun rised, the long time with no sleep had a word in out focusing ability, but coffee and short naps solved the problem.\nAccomplishments that we're proud of\n-Have a running platform for the demo\n-Managed to work together even if each of us had a different background in programming\nWhat we learned\nLoads of stuff: how to use new libraries, how to divide tasks to finish quicker and even how useful Linux can be.\nWhat's next for Hackmarks\nHopefully implement all the detailed ideas we came up with, even though the hackathon is finished.", 
    "project_name": "Hackmarks", 
    "project_tags": [
      "php", 
      "html", 
      "css", 
      "machine-learning", 
      "uclassify", 
      "laravel"
    ], 
    "project_url": "https://devpost.com/software/hackmarks"
  }, 
  {
    "hackathon_name": "HackSheffield 1.0", 
    "project_description": "Inspiration\nWe had access to 1.7 Billion reddit comments, so we thought this could be interesting. \nWhat it does\nShows the usage of a search term over 8 years of reddit comments.\nHow we built it\nSimple rails app, then lots of javascript to draw the graphs and do the elastic search queries. Elastic search \nChallenges we ran into\nHosting the data, ended up having to have it locally.\nAccomplishments that we're proud of\nHow long Hugo managed to stay awake.\nWhat we learned\nAWS Elastic Search, some learnt more Javascript.\nWhat's next for RedditTrends\nIt will sit on GitHub untouched and alone. - Our amazon money hasn't come through, we won't spend our own \u00a3\u00a3\u00a3\u00a3\u00a3 to host the terrabyte of data. We could implement new graphs and other fancy things quite easily if we did keep working on it.", 
    "project_name": "RedditTrends", 
    "project_tags": [
      "ruby-on-rails", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/reddittrends"
  }, 
  {
    "hackathon_name": "HackSheffield 1.0", 
    "project_description": "Inspiration\nEveryone has experienced the frustration of the coffee cooling down or the beer becoming too warm! This simple yet elegant device addresses this issue.\nWhat it does\nThis device is designed to show the user the time he has to drink his drink before it gains uncomfortable temperature. When you place your beverage on the device, it calibrates the thermometer to ensure that the measured temperature is correct. Then it uses several measurements of temperature and Newton's law of cooling to calculate the rate of cooling and the time until your drink becomes too cold or warm to drink.\nHow we built it\nWe used Intel Edison dev board and Arduino IDE to run analyze data from temperature sensor and present it on the LCD display. \nChallenges we ran into\nSolving the differential equation for the Newton's law of cooling on the Edison dev board.\nWhat we learned\nWe gained experience in developing hardware hacks, working with Edison dev board, coding in C++ for Arduino.", 
    "project_name": "drink() while(perfect);", 
    "project_tags": [
      "intel-edison", 
      "arduino", 
      "c++"
    ], 
    "project_url": "https://devpost.com/software/drink-while-perfect"
  }, 
  {
    "hackathon_name": "HackSheffield 1.0", 
    "project_description": "Inspiration\nTwo devices, two different user experiences, too much hassle\nAt the beginning, our inspiration came from a simple issue: when using a desktop or laptop computer to access a website, all of the functionality of our smartphones and/or tablets wasn't being used. Mobile devices have become ubiquitous as easily accessible and multi-functional portable computers. These devices, having access to a wide array of sensors (such as cameras, gyroscopes, gps, etc.) are capable of quickly providing various types of data to websites.\nHowever, when using our desktops to browse the internet, we are incapable of accessing all of our phone's functionality! We cannot utilize the extra screen space of our phone, nor can we provide data from our phone's sensors to the website. Hence, we came up with the idea for a service that could link the functionality of mobile devices with traditional full-size computers. (And we named it AquaPoodle because why not?) \nWhat it does\nAquaPoodle Transfer (hence referred to as APT) is our proof of concept for a web service that can take data from a mobile device and provide it to a desktop or laptop computer in a simple and accessible manner. To allow a user to send data from one device to another, there are three primary steps:\n\n Establish a linkage between the mobile device and the computer using a QR code, \n Provide a mobile site to prompt the mobile device to obtain some data, and \n Send the data from the mobile device to the computer. \n\nHow we built it\nThe actual implementation of APT is fairly involved. Here we will break down the primary steps into the actual code involved.\nEstablishing a linkage:\nEnsuring that the user's mobile device and computer are linked requires a lengthy process of developing a unique session ID and then passing it from the computer to the mobile device with a QR code. To achieve, this, the unique ID must traverse the hierarchy of the code, from the web service down to the mobile device.\nTo begin the external web service generates a unique ID hashed from the mac address of the computer, the current time, and an internal device counter. The user will utilize a chrome extension that will then receive the unique ID. From there, the external web interface develops a QR code based on the URL that the mobile device will navigate to, and the unique ID. The QR code is then provided to the chrome extension. The user then scans this QR code with their mobile device's camera. At this point, the chrome extension and the mobile device both have the same unique ID. \n\nPrompting the mobile device:\nPrompting the mobile device to provide some data, in this case a photo, is achieved by navigating to a URL that contains javascript that provides the appropriate prompt. This URL is contained in the QR code referred to earlier. Here, assuming an android device is being used, the user may choose to provide a photo in the mobile device's storage, or to take a new photo. In either case, the photo is sent via a post to the server, which then caches it.\nSending data to the computer:\nFinally, the server can take the cached photo data (here encoded in base 64) and send it through a post to the user's chrome extension. The chrome extension then decodes the photo data and displays it in the toolbar to then be used where appropriate.\nChallenges we ran into\nSO MANY PROBLEMS PLEZ HALP\nWe ran into an inane number of issues over the course of our 24 hours of coding, which are compiled here:\n\nChrome extension errors: Numerous issues arose from finding out how to make a chrome extension interact with an external server and update accordingly. Many google help pages were queried.\nUncountable number of server errors: There was a constant fight against server errors as we slowly but steadily worked our way through syntax and configuration problems, fueled by coffee, red bull and Huel(TM). We tried to host our server on AquaPoodle.com but the domain provider eated it (T_T) .\nSession IDs that are not so unique: Determining a way to make session IDs that wouldn't clash required some trial and error as we logically decided which unique values could be used to make session IDs. \nAndroid apps that don't compile: We attempted to develop an app that would provide the functionality achieved by the mobile site provided through a URL in the QR code. Achieving this proved to be infeasible for the amount of time available, as working through the complex syntax of the Android code API and implementing a separate library to read scanned QR codes was just too much.\n\nAccomplishments that we are proud of\n\n\nImplementing an external library in Android code API to (nearly) provide functionality with reading barcodes or QR codes.\nHosting our own server!\nCreating a functional chrome browser extension!\nHaving fun and not losing our sanity!!\n\nWhat we learned\nAlthough we learned tons about javascript and server hosting, our most important development was how to work as a team. Splitting the workload efficiently, organizing meeting times and working together with synergy was highly rewarding and essential to our success.\nWhat's next for APT\nOne early example we envisioned was to display a user's shopping cart for a given webpage on their phone, and then allow them to select items from the phone shopping cart to navigate to the appropriate webpage on their laptop or desktop. Given the chance to extend APT, we would like to work on extending the functionality to be more generalized, and at a further point in development, make an API of this code to provide more possibilities with sharing data between mobile and full webpages, so that the first idea could be possible.", 
    "project_name": "APT (AquaPoodle Transfer)", 
    "project_tags": [
      "javascript", 
      "flask", 
      "apache", 
      "lamp", 
      "ubuntu", 
      "python", 
      "json", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/apt-aquapoodle-transfer"
  }, 
  {
    "hackathon_name": "HackSheffield 1.0", 
    "project_description": "", 
    "project_name": "Myown robot", 
    "project_tags": [
      "arduino", 
      "myo", 
      "skype"
    ], 
    "project_url": "https://devpost.com/software/myown-robot"
  }, 
  {
    "hackathon_name": "HackSheffield 1.0", 
    "project_description": "Inspiration\nHALF A GIG OF DATA? What couldn't tickle your curiosity more? When we initially saw this data set provided by the government, we dived straight into it, excited by the results we could produce.\nWhat it does\nProvides two visualisations for the user:\n1: Overlays a google map with a heatmap representing accident severity across the UK\n2: Plots a scatter plot of latitude against longitude for every accident\nHow we built it\nPython and the Bokeh visualisation library\nChallenges we ran into\nWe initially started working on this with SQLite and d3.js however we ran into problems having 1.6 million javascript objects in the browser. Thus, halfway through, we switched to a much simpler implementation in python.\nAccomplishments that we're proud of\nGetting working visualisations after hours of grafting and experimentation. \nWhat we learned\nParts of the d3.js library as well as the Bokeh library and python\nWhat's next for CrashMap\nWidgets to filter data on the map", 
    "project_name": "CrashMap", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/crashmap"
  }, 
  {
    "hackathon_name": "HackSheffield 1.0", 
    "project_description": "Inspiration\nAs Wikipedia is one of the largest and most popular websites in the world, and with an intent of exploring the vast quantity of data it has to offer in mind, we figured that it would be an excellent source to base our implementation of an original spin on the classic Top Trumps game on.\nWhat it does\nEffectively a Top Trumps game where the stats of the card are based on a Wikipedia's page data such as number of images and links on the page.\nHow we built it\nThe server backend is powered by Bottle, a Python micro web-framework which is lightweight and quick to get a functioning server up and running. The frontend is predominantly built on the HTML5 canvas together with JavaScript.\nChallenges we ran into\nGenerating an appropriate image for the cards since the name and link of the image were deeply nested in the JSON object\nAccomplishments that we're proud of\nThe final end product\nWhat we learned\nCoding skills, especially the trouble of working with strings in Python 2; the set up process of heroku service and subsequently deploying the app there.\nWhat's next for Wiki Trumps\nAs the current working game is generating cards based on a pre-defined list of article titles, the next goal to work towards would be to populate such a list randomly, which was always our intention if we had more time. Further, the game could potentially be made into a multi-player game or a single player game where the player competes against an AI computer player.", 
    "project_name": "Wiki Trumps", 
    "project_tags": [
      "python", 
      "jquery", 
      "javascript", 
      "html5", 
      "css3"
    ], 
    "project_url": "https://devpost.com/software/wiki-trumps"
  }, 
  {
    "hackathon_name": "HackSheffield 1.0", 
    "project_description": "Inspiration\nWe began by looking at datasets available online, including sets from fregis, and https://data.gov.uk/data/search , where we stumbled upon the existence of the data.police.uk api, which provides geographical crime data for the whole uk for the past 5 years.\nAfter some brainstorming we decided that providing at a glance crime stats to travels, prospective home owners, etc. could be quite a useful project.\nWhat it does\nIt allows you to visualise the the total crime levels per category, and also time series data per category, in a mile radius around a point, for the past year.\nHow I built it\n\nnpm - to run webpack, and babel (with jsx and e66 presets) to support reactjs\nreact googlemaps component to handle map rendering\nreact chartjs components for nice looking data visualisation\nA custom api module for data.police.uk\nhacky, inplace edits to files in node_modules to make http-browserify work okay with data.police.uk's CORS settings.\n\nChallenges I ran into\n\nIt's not possible to query more than a month of data with one request, or to query in any other manner than geodata (i.e. not possible to extract averages to compare/normalise the data to) from the api.\nCross-origin wildcards + http-browserify don't play nicely together, and there's no way to change the setting that needs changing without editing the module file.\nWebpack errors can be rather cryptic, this is probably made worse by using babel too.\n\nAccomplishments that I'm proud of\n\nLearned to use: react, webpack, babel, and es6 syntax, all in one go.\n\nWhat I learned\n\nIt's probably not so wise to try to pickup so many new tools at once, especially if you are aiming to have some sort of working product at the end as there are many idiosyncracies and small issues you won't notice.\n\nWhat's next for Neighbourhood crime app\n\nComparisons of locations.\nComparisons against a national/city/county average level.\nVisualisation of crime along a route, and tighter maps integration.", 
    "project_name": "Neighbourhood crime app", 
    "project_tags": [
      "npm", 
      "react"
    ], 
    "project_url": "https://devpost.com/software/neighbourhood-crime-app"
  }, 
  {
    "hackathon_name": "HackSheffield 1.0", 
    "project_description": "Inspiration\nMatt\nWhat it does\nHow I built it\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for Matt Vs The Haters", 
    "project_name": "Matt Vs The Haters", 
    "project_tags": [
      "node.js", 
      "phaser.js", 
      "socket.io", 
      "twitter"
    ], 
    "project_url": "https://devpost.com/software/matt-vs-the-haters"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "We decided VR would be cool, so we decided google cardboard would be cool.\nBuilt a google cardboard renderer from scratch, and connect to another phone via a node server.\nOne phone is a controller, and the other is the cardboard display.", 
    "project_name": "drunk drive simulator", 
    "project_tags": [
      "node.js", 
      "javascript", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/drunk-drive-simulator"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "No time to explain....", 
    "project_name": "EggHack", 
    "project_tags": [
      "javascript", 
      "php", 
      "sql", 
      "jquery", 
      "html"
    ], 
    "project_url": "https://devpost.com/software/egghack"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Inspiration\nLibrary fines are sad. They cost money. Students don't like spending unnecessary money. This API allows students / people to avoid fines by writing a short (6 lines, excluding blank lines) script to automatically renew their library books. It's possible to do much more, like send a text / email with details of where to find a list of books in the library (dewey classifications), or how to cite a specific book correctly.\nWhat it does\nIt scrapes data from the various library catalogues and presents it in a nice way. It's designed to have a minimal barrier to entry, so anyone can use it, even if they have very little coding experience. \nHow we built it\nUsing Python and the requests module. https://regex101.com/ was incredibly useful for testing the numerous regular expressions used, and the Chrome developer tools were helpful for working out how web browsers interacted with the online library catalogue.\nChallenges we ran into\nPerhaps unsurprisingly, the online catalogues aren't built to be friendly to screen scrapers. In some cases, they're really quite horrible.\nAccomplishments that we're proud of\nIt works! While it's not complete in any sense of the term, it works well with the SirsiDynix Enterprise library catalogue. Support for WebPAC Pro is being implemented, and support for ExLibris Primo is being planned - this should mean that over 83% of BrumHack participants can use the API!\nWhat we learned\nWe developed our skills in screen scraping, as well as our tenacity for when things don't go so easily. Scott learned Python! We also focused on usability and providing a \"nice\" interface of commands for users (who potentially aren't experienced coders).\nWhat's next for Library API\nMore implementations - ExLibris Primo is used by a large number of libraries, we hope to support it soon! Other catalogues which are also popular, such as Spydus / Selms and Capita Prism will be considered.", 
    "project_name": "Library API", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/library-api"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Project Flow\n\nView cards from lists in the trello board\nAdd new tasks to the to do list in trello board\nStart a trello task\n\n\na new git branch is created using the trello title\nthe trello card is updated to \"in progress\"\n\nSubmit a trello task\n\n\nthe branch is finalised and pushed to master\nthe trello card is updated to \"submitted for review\"\n\nReview a trello task\n\n\nthe branch is reviewed\n\n\nif the branch is accepted then the branch is merged onto master and trello card moved to done\notherwise the branch is rejected and the trello card is moved back to in progress with a rejection comment\n\n\n\nWhy use our product?\n\nFrustrated and tired of a trello that is out of sync with your project?\nHate using website interfaces?\n\nThen our command line script to integrate trello (with git) is the script for YOU!!!\nBenefits\n\nSave time from having to manually update the trello board (increased efficiency)\nEnsure the trello board is at it's most up-to-date state (increased visibility)\n\nWhat it does\nThe script links a given trello board with a github repository, when using the script a user can perform git actions and the trello board will be updated accordingly.\nHow we built it\nWe built it using the trello api and python invoked shell commands\nChallenges we ran into\nHaving the patience to deal with out of date API documentation\nWhat I learned\nLearning new python skills\nWhat's next for Trello Version Control (with Git integration)\n\nOther version control integration such as svn (subversion control)\nMore script actions to increase functionality", 
    "project_name": "Trello Version Control (with Git integration)", 
    "project_tags": [
      "python", 
      "json", 
      "trello", 
      "git"
    ], 
    "project_url": "https://devpost.com/software/trello-version-control-with-git-integration"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "What it does\nUsing the leap motion, we detect changes in the vertical motion of your hands so that you can \"shoot\" out of your fingers to knock over bottles as fast as possible.\nHow we built it\nWe used Unity to easily create a 3D world and support the Oculus Rift for vision.\nChallenges we ran into\nIt was difficult to properly detect the gesture required to shoot. It may have been easier on an older SDK, but the tracking was a lot worse so we decided it would be better to use the newer SDK and manually detect the motion.\nAccomplishments that we're proud of\nCreating something in Unity after not properly using it before, and effectively using the Leap Motion.\nWhat's next for The Sheriff\nWe may develop this into a small full demo (Or at least make the shooting much more reliable).", 
    "project_name": "The Sheriff", 
    "project_tags": [
      "c#", 
      "unity", 
      "leap-motion", 
      "oculus"
    ], 
    "project_url": "https://devpost.com/software/finger-bang"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Inspiration\nAnnoying systems that are hard to use during uni.\nWhat it does\nSimplifies everything you need to know at uni into one place.\nHow I built it\nUsing node.js as a backend, and using firebase for authentication and socket.io for chat.\nChallenges I ran into\nLearning node\nAccomplishments that I'm proud of\nChatrooms\nWhat I learned\nMore node\nWhat's next for Dash\nFull development, security, push with university.", 
    "project_name": "Dash", 
    "project_tags": [
      "jquery", 
      "node.js", 
      "socket.io", 
      "javascript", 
      "html5", 
      "css3", 
      "heroku", 
      "github", 
      "firebase"
    ], 
    "project_url": "https://devpost.com/software/dash-hcgvx8"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Inspiration\nWe wanted to make a extremely quick way to know when you receive a message from the most popular social media applications.\nWhat it does\nIt uses the Razer Croma keyboard to show images of the apps that you have unread messages in.\nHow I built it\nWith a lot of sweat and tears.\nChallenges I ran into\nI had to make stop motion animation images for the logos of the applications.\nAccomplishments that I'm proud of\nThe final product code is ~5500 lines of code more than 3000 of which are for the animations\nWhat I learned\nI learned a lot about the Razer Croma SDK and about C++ in general\nWhat's next for Keyboard notifier\nWE will expand the capabilities of the app in order to make it better.", 
    "project_name": "Keyboard notifier", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/keyboard-notifier"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Inspiration\nBeen sucked into minecraft recently, and fed up of svn.\nWhat it does\nVisualises git repositories into minecraft buildings.\nHow we built it\nblood sweat and tears.\nChallenges we ran into\ndependencies\nAccomplishments that we're proud of\ndependencies\nWhat we learned\ndependencies\nWhat's next for GitCraft\nnot dependencies", 
    "project_name": "GitCraft", 
    "project_tags": [
      "java", 
      "php", 
      "mysql", 
      "json", 
      "github"
    ], 
    "project_url": "https://devpost.com/software/gitcraft"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Inspiration\nThe increased effort when sharing links with friends via Facebook or other means.\nWhat it does\nCreates online groups via the chrome extension. One click link share directly from the web page. \nHow I built it\nBackend server: LAMP Stack and Pusher API\nFront end: Javascript\nChallenges I ran into\nLots of issues with the PHP PusherAPI\nAccomplishments that I'm proud of\nSolving all the issues we ran into as a group\nWhat I learned\nLearnt about the PUSHER API\nWhat's next for URL Share\nImprove our UI and the backend server", 
    "project_name": "URL Share", 
    "project_tags": [
      "pusher", 
      "php", 
      "javascript", 
      "html5", 
      "css3"
    ], 
    "project_url": "https://devpost.com/software/url-share"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Inspiration\nWhat it does\nFinds the seed of a Minecraft world\nHow I built it\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for Minecraft Seed Reversererer\nUse the power of the GPU!", 
    "project_name": "Minecraft Seed Reversererer", 
    "project_tags": [
      "c++"
    ], 
    "project_url": "https://devpost.com/software/minecraft-seed-reversererer"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Inspiration\nRace the Sun the videogame\nWhat it does\nIt is a videogame, that can also act as a browser\nHow I built it\nChallenges I ran into\nCommiting unity projects.\nAccomplishments that I'm proud of\nI did something in unity\nWhat I learned\nTo properly setup git ignore files and to \nWhat's next for UperDooperNavigateForTheWebPagesmatronopolis\nA lot of recoding!", 
    "project_name": "UperDooperNavigateForTheWebPagesmatronopolis", 
    "project_tags": [
      "unity", 
      ".net"
    ], 
    "project_url": "https://devpost.com/software/uperdoopernavigateforthewebpagesmatronopolis"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Inspiration\nNeeded a wesbsite to post blog posts \nWhat it does\nIt shows a website, can log in to edit, and submit blog posts\nHow I built it\nTeam help with CSS, HTML, PHP and mySQL\nChallenges I ran into\nLogin didn't work for ages, got it working though!\nAccomplishments that I'm proud of\nEverything seems to be working in order?\nWhat I learned\nPHP and MySQL :D\nWhat's next for TwistedVanilla-WebsiteTeam\nGetting this finalised and using it in the real world", 
    "project_name": "TwistedVanilla-WebsiteTeam", 
    "project_tags": [
      "html5", 
      "css", 
      "php", 
      "mysql"
    ], 
    "project_url": "https://devpost.com/software/twistedvanilla-websiteteam"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Inspiration\nWorking out why your cupboards are so full is difficult, and it involves actually moving around your house, from room to room, to find where all of your space is gone. We decided that since moving your own body is so labourious nowadays (think Uber, Self-Driving Cars, hoverboards, skyhooks, etc) we decided to bring the contents of your cupboards to your computer screen (since that's where you probably are anyway)!\nWhat it does\nA query-based analysis of the lines on your statement that show you random pictures from the retailers that you have been spending at, with the hope of encouraging you to spend less and save more (ha!).\nHow we built it\nImporting all of the data into MySQL, then doing SQL-views of the data to minimise code. A random image table is used to select a random image that matches the retailer, and we return this line-by-line back to the PHP which writes javascript into an image array (amongst other things).\nWe present the five analysis areas; favourite retailer, bar chart showing retailer transaction count and total spend, stack of pictures, pie chart showing tags, and pie chart showing retailer usage.\nChallenges we ran into\nJavascript is tough, man. Don't judge. Also, Jack can't tear himself away from his phone for more than a few minutes so we don't have as many images as we'd like...\nAccomplishments that we're proud of\nCollaboration of a brand new back-end dev (Daniel) and front-end dev (Alex) to create something that actually works! Everything is modular so we can work together, simultaneously.\nWhat we learned\n\nSee challenges.\nMySQL views are fun! And it's a lot easier to do it at the database than in the PHP code.\n\nWhat's next for Do You Even Hoard?\nNot much, unless we get some real data to put into it...", 
    "project_name": "Do You Even Hoard?", 
    "project_tags": [
      "php", 
      "mysql", 
      "javascript", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/do-you-even-hoard"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Inspiration\nAt the last hackathon we all volunteered for, there was a cool way of providing the hackers with food on demand via the tag KurtCart on Twitter. As a group, we believe that this was a mess and there could be a better way of implementing this idea, hence using the Myo. It also then doesn't require a twitter account for those who don't have it.\nWhat it does\nIt is the most convenient way of providing hackers with snacks and drinks.\nHow we built it\nWe used the myo and connected it to an android app and created a server which received the data and posted the results up on a website ready for the volunteers to watch over, with a continuous refresh feature", 
    "project_name": "Bring me food", 
    "project_tags": [
      "jade", 
      "javascript", 
      "node.js", 
      "amazon-web-services", 
      "mongodb", 
      "css3", 
      "html5", 
      "github", 
      "express.js", 
      "android", 
      "android-studio", 
      "vim"
    ], 
    "project_url": "https://devpost.com/software/bring-me-food-mc2u9v"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Inspiration - I was staring into the Abyss, Light bulb fell on my head.\nWhat it does - Abyss Simulator\nHow I built it - HTML and CSS\nChallenges I ran into - Overlapping two images\nAccomplishments that I'm proud of - Worked on the project myself.\nWhat I learned - Advanced on my knowledge in website building.\nWhat's next for The Abyss - Many many upgrades.", 
    "project_name": "The Abyss", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/the-abyss"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Inspiration\nWhat it does\nHow I built it\nChallenges I ran into\nNot enough time to fill in the whole story. Such challenging!\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for TwistedVanilla - Bomb Defusal (Minecraft!)", 
    "project_name": "TwistedVanilla - Bomb Defusal (Minecraft!)", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/bomb-defusal-minecraft"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "What it does\nTwo players can compete to complete an algorithm given by our sever.  Once code is written, players can't go back and edit there code, so it has to be right first term.  Throughout this, events change the players code and distract them, forcing them to respond to events.\nChallenges we ran into\nParsing the Java, and communicating between a server and devices\nAccomplishments that we're proud of\nDank memes\nWhat we learned\nAlways check the small things, and don't update code right before the deadline", 
    "project_name": "Algo-rekt", 
    "project_tags": [
      "php", 
      "java", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/algo-rekt"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Second team member: Alex Wiley, BCU\nInspiration\nMany parties with music not matching the mood.\nWhat it does\nMeasure the liveliness of a room and generate music genres (and soon music playlists) from this data.\nHow I built it\nUsing Java for the initial version along with a custom fork of a webcam library, modified to detect levels of motion in a frame.\nChallenges I ran into\nStarting the hack with only 12 hours to go, and as a solo project. Before luckily gaining a second team member in the latter stages.\nAccomplishments that I'm proud of\nWriting the computer vision code without the use of openCV.\nWhat I learned\nNever convert to web based in the last 4 hours.\nWhat's next for Algorhythm\nComplete the web based version with full spotify api integration.\nwww.algorhythm.space", 
    "project_name": "Algorhythm", 
    "project_tags": [
      "java", 
      "javascript", 
      "html", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/algorhythm"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Inspiration\nMachine learning is cool, so we thought we'd make some pretty patterns with it!\nWhat it does\nGenerates spirographs and incrementally improves based on users' input.\nHow we built it\nScala for the backend, and HTML5 canvas\nChallenges I ran into\nDNS PROPAGATION AT UNI IS TERRIBLE. PLEASE WORK.\nAccomplishments that I'm proud of\n\"HTML5 Canvas drawing\", \"learning scala at 4am\", \"forcing Jack to learn scala at 4am\".\nWhat I learned\nScala\nWhat's next for Spirographinator\nUpdating the DNS. HTTPS.", 
    "project_name": "Spirographinator", 
    "project_tags": [
      "scala", 
      "javascript", 
      "jquery", 
      "html5", 
      "postgresql"
    ], 
    "project_url": "https://devpost.com/software/spirographinator"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Inspiration\nAllan Alcorn. \nWhat it does\nCan play 2 player pong on 8x8 Led matrix controlled with ultrasonic sensors and displays scores on 2nd 8x8 Led matrix.\nHow we built it\nConnecting stuff together then programming stuff for it.\nChallenges we ran into\n2 arduinos died. Buttons are hard for some reason. Led referencing is difficult\nAccomplishments that we're proud of\nWe finished pong kind of.\nWhat we learned\nDot matrix display control.\nWhat's next for Ultra Pong\nA plethora of ultra pong sequels.", 
    "project_name": "Ultra Pong", 
    "project_tags": [
      "arduino"
    ], 
    "project_url": "https://devpost.com/software/ultra-pong"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Inspiration\nWe wanted to try new things and like VR\nWhat it does\nLook at planets and it destroys them, regenerates new planets each level\nHow we built it\nC# and Unity with Oculus\nChallenges we ran into\nNever used Unity or programmed in C# before - it was a learning curve!\nAccomplishments that we're proud of\nGetting a product that works!\nWhat we learned\nHow to use Unity and C# for VR games\nWhat's next for Planet Destroyer\nMake the planets move, more levels, better UI", 
    "project_name": "Star Killer", 
    "project_tags": [
      "oculus-gear-vr"
    ], 
    "project_url": "https://devpost.com/software/planet-destroyer"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Inspiration\nThe dire situation everyone fears of is of course, being unable to decide what cuisine to order with friends. We have devised the end-all solution for all of your nutritional needs.\nWhat it does\nCreate a room with your post code and share it with your friends, be prepared though, after the countdown you will be able to frantically tap for your prefered cuisine of choice, weighting the results as to which JustEat page you will be redirected to!\nHow we built it\nInternet\nChallenges we ran into\nCode\nAccomplishments that we're proud of\nThings\nWhat we learned\nCode\nWhat's next for Eat Spin\nThings", 
    "project_name": "Eat Spin", 
    "project_tags": [
      "node.js", 
      "javascript", 
      "amazon-web-services", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/eat-spin-tm2v45"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Stuff", 
    "project_name": "Phone Gladiator!", 
    "project_tags": [
      "javascript", 
      "socket.io", 
      "node.js", 
      "digitalocean"
    ], 
    "project_url": "https://devpost.com/software/phone-gladiator"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Inspiration\nMaths\nWhat it does\nEntertain\nHow I built it\nJava Plz\nChallenges I ran into\nSleep\nAccomplishments that I'm proud of\nIt made Brandon smile\nWhat I learned\nSleep is for the weak\nWhat's next for Pi\nPi is infinite and seemingly random, who knows", 
    "project_name": "Pi", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/pi"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "MoneyTalks\nBrumHack project", 
    "project_name": "MoneyTalks", 
    "project_tags": [
      "java", 
      "android"
    ], 
    "project_url": "https://devpost.com/software/moneytalks-z65d4p"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "What it does\nThe project allows you to view the globe of Earth in space inside virtual reality, with interesting locations marked on the surface, with names and miniature photos. The globe can be rotated by hand gestures and locations can be selected by looking at them. Another gesture allows entering a selected location to see the inside of a photo sphere.\nHow we built it\nWe used Unity as the engine, Oculus Rift for the virtual reality and the Myo wristband for gestures.\nChallenges we ran into\nThere were certain technological issues with the Rift and Myo working together on an old Windows laptop.\nAccomplishments that we're proud of\nIt kinda works, who would have thought.\nWhat we learned\nYou need a better computer for virtual reality and prepare earlier.", 
    "project_name": "Globulus Rift", 
    "project_tags": [
      "unity", 
      "oculus"
    ], 
    "project_url": "https://devpost.com/software/globulus-rift"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Brumhack2016 How many blocks can you remove before the tower falls?\nThe LeapMotion allows the player to directly interact with the tower.. can you keep a steady hand?", 
    "project_name": "Gesture Control Jenga", 
    "project_tags": [
      "c#"
    ], 
    "project_url": "https://devpost.com/software/brumhack2016"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Inspiration\nHave you ever had a bad day? One of those days in which you only want to eat chocolate ice cream? Those days are over, with ReactGif, we will analyse your face and show you funny stuff until you don't feel sad any more. \nWhat it does\nReactGif analyse your face emotions and with a complex algorithm determines whether you are happy or not. In case ReactGif detects you are not feeling good, it will display funny stuff until it detects you are happy.\nHow we built it\nReactGif uses the Google Cloud vision API to detect your face and obtain values for different kinds of emotions. ReactGif also uses Flask to create the server and OpenCV to take tllehe picture.\nChallenges we ran into\n\nBrightness on the pictures taken \nIntegration of Google Cloud Vision API\n\n\nDifferences between results obtained and specification\n## What's next for ReactGif\n\nEvaluate reactions to specific gifs in terms of effectiveness, to improve the reaction chooser algorithm.\nMake a challenge in which the user must be serious as much time as possible while the app throws some funny gifs", 
    "project_name": "ReactGif", 
    "project_tags": [
      "python", 
      "html5", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/reactgif"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "A sunny day in Birmingham inspired us to create a fully immersive game using the latest technology including the Oculus Rift, Muse Myo and Leap Motion. After many hours we gave up on using the Muse after finding it only works on Android or iOS. Several hours later the Rift decided it wouldn't work either, leaving us with only the Leap Motion.\nStressfully, we continued and the Oculus Rift, mind-controlled game was reduced to a steve punching bag simulator. This actually turned out to be quite fun. As-well as being able to punch steve you also have the ability to slap him or alternatively look at a selection of 2D sunflowers!\nI also learnt how to create a game and had a complete lack of sleep.", 
    "project_name": "Me vs Steve", 
    "project_tags": [
      "unity", 
      "leap-motion"
    ], 
    "project_url": "https://devpost.com/software/me-vs-steve"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Inspiration\nWhat it does\nAn app which discovers your nearest iBeacon and notifies you when you go to far. The app displays an image for each item and the range from the device being used.This can be applied as both a security feature and/or an exhibition feature.\nHow we built it\nUsing Android Studio and Java, along with the estimote iBeacons.\nChallenges we ran into\nAndroid studio was a bit of challenge, as well as java.\nAccomplishments that we're proud of\nWhat we learned\nWe learnt about Java and the challenges of Android Studio, as well as the inaccuracy of bluetooth.\nWhat's next for ComeFindMe", 
    "project_name": "ComeFindMe", 
    "project_tags": [
      "estimote", 
      "android", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/comefindme"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "MoneyTalks\nBrumHack project", 
    "project_name": "MoneyTalks", 
    "project_tags": [
      "java", 
      "android"
    ], 
    "project_url": "https://devpost.com/software/moneytalks-z65d4p"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "What it does\nThe project allows you to view the globe of Earth in space inside virtual reality, with interesting locations marked on the surface, with names and miniature photos. The globe can be rotated by hand gestures and locations can be selected by looking at them. Another gesture allows entering a selected location to see the inside of a photo sphere.\nHow we built it\nWe used Unity as the engine, Oculus Rift for the virtual reality and the Myo wristband for gestures.\nChallenges we ran into\nThere were certain technological issues with the Rift and Myo working together on an old Windows laptop.\nAccomplishments that we're proud of\nIt kinda works, who would have thought.\nWhat we learned\nYou need a better computer for virtual reality and prepare earlier.", 
    "project_name": "Globulus Rift", 
    "project_tags": [
      "unity", 
      "oculus"
    ], 
    "project_url": "https://devpost.com/software/globulus-rift"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Brumhack2016 How many blocks can you remove before the tower falls?\nThe LeapMotion allows the player to directly interact with the tower.. can you keep a steady hand?", 
    "project_name": "Gesture Control Jenga", 
    "project_tags": [
      "c#"
    ], 
    "project_url": "https://devpost.com/software/brumhack2016"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Inspiration\nHave you ever had a bad day? One of those days in which you only want to eat chocolate ice cream? Those days are over, with ReactGif, we will analyse your face and show you funny stuff until you don't feel sad any more. \nWhat it does\nReactGif analyse your face emotions and with a complex algorithm determines whether you are happy or not. In case ReactGif detects you are not feeling good, it will display funny stuff until it detects you are happy.\nHow we built it\nReactGif uses the Google Cloud vision API to detect your face and obtain values for different kinds of emotions. ReactGif also uses Flask to create the server and OpenCV to take tllehe picture.\nChallenges we ran into\n\nBrightness on the pictures taken \nIntegration of Google Cloud Vision API\n\n\nDifferences between results obtained and specification\n## What's next for ReactGif\n\nEvaluate reactions to specific gifs in terms of effectiveness, to improve the reaction chooser algorithm.\nMake a challenge in which the user must be serious as much time as possible while the app throws some funny gifs", 
    "project_name": "ReactGif", 
    "project_tags": [
      "python", 
      "html5", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/reactgif"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "A sunny day in Birmingham inspired us to create a fully immersive game using the latest technology including the Oculus Rift, Muse Myo and Leap Motion. After many hours we gave up on using the Muse after finding it only works on Android or iOS. Several hours later the Rift decided it wouldn't work either, leaving us with only the Leap Motion.\nStressfully, we continued and the Oculus Rift, mind-controlled game was reduced to a steve punching bag simulator. This actually turned out to be quite fun. As-well as being able to punch steve you also have the ability to slap him or alternatively look at a selection of 2D sunflowers!\nI also learnt how to create a game and had a complete lack of sleep.", 
    "project_name": "Me vs Steve", 
    "project_tags": [
      "unity", 
      "leap-motion"
    ], 
    "project_url": "https://devpost.com/software/me-vs-steve"
  }, 
  {
    "hackathon_name": "BrumHack 4.0", 
    "project_description": "Inspiration\nWhat it does\nAn app which discovers your nearest iBeacon and notifies you when you go to far. The app displays an image for each item and the range from the device being used.This can be applied as both a security feature and/or an exhibition feature.\nHow we built it\nUsing Android Studio and Java, along with the estimote iBeacons.\nChallenges we ran into\nAndroid studio was a bit of challenge, as well as java.\nAccomplishments that we're proud of\nWhat we learned\nWe learnt about Java and the challenges of Android Studio, as well as the inaccuracy of bluetooth.\nWhat's next for ComeFindMe", 
    "project_name": "ComeFindMe", 
    "project_tags": [
      "estimote", 
      "android", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/comefindme"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "Inspiration\nTraditional programming languages are cumbersome, monotonous, and difficult to learn. The icecream language is different \u2014 allowing users to quickly and easily create working programs directly on their phone.\nWhat it does\nThe iOS app allows users to create programs written completely in emojis.\nHow we built it\nThe language itself is compiled on the back-end to valid swift code, which is executed and returned to the client.\nChallenges we ran into\nUnicode characters caused a variety of issues, especially working between operating systems and programming languages. We are happy that we were able to resolve most of these issues.\nAccomplishments that we're proud of\nWe are especially proud of the separation of our code between the client and the server. Everything is general enough to allow us to add more features in the future.\nWhat we learned\nWe learned a lot about the unicode system and how it is represented in various systems.\nWhat's next for icecream\nWe would like to expand the language to support further interaction with the user (being able to prompt them for program inputs, implement a simple drawing and animation API). We also would like to create a web front-end to allow users without an iOS device to program in icecream. \nHappy coding!", 
    "project_name": "icecream", 
    "project_tags": [
      "xcode", 
      "cocoa-touch", 
      "iphone-sdk", 
      "javascript", 
      "node.js", 
      "mongodb", 
      "amazon-web-services", 
      "json", 
      "swift"
    ], 
    "project_url": "https://devpost.com/software/icecream"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "Shipyard\n\n\nLet us float your boat.\nDon't get lost at sea with Node.JS servers.\nLet us ship your code.\nDon't let your code be sub par.\nAnchor your code with us.\nSink all the competition.\n\nIn the past, we have used various continuous integration tools like Travis CI and Jenkins, but have always felt that they do not properly fulfil our use case. Shipyard is our answer to that. Written with Sails.js and utilising GitHub webhooks, it pulls the latest code whenever something is pushed, checks all is well, then restarts your server to minimise downtime in production. \nIt also has extensive server management tools. In Shipyard, we're referring to server repository instances as \"Boats\", and the collection of boats as a \"Harbor\".\nWhen you ship code, the Boat \"sets Sail\" and you do not have to go through the trouble of manually going back to your server, running git pull, then manually restarting your server.\nIn addition, we have written multiple apps and services for various platforms:\n\nWeb\niOS\nAndroid\nPebble\nPushBullet notifications, for when your Boat has successfully set Sail\nWe also implemented a desktop application written with Electron!", 
    "project_name": "shipyard", 
    "project_tags": [
      "javascript", 
      "html", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/shipyard-a12jln"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "Inspiration\nWe were really excited for the hardware that the MLH brought to StaCS Hack and we really wanted to get our hands dirty with some of them. \nAfter a bit of brainstorming, being that most of our teammates are part of some of the sport teams here at St. Andrews, an application for athletes became an obvious. The best piece of hardware to facilitate this was the Myo Armband.\nWhat it does\nOur app currently takes a constant stream of data from the Myo's 8 muscle activity sensors and translates it into data about each muscle group that it is connected to. We consider that even though the current prototype shows only real-time data, the access to that data allows us to add a multitude of features in the future.\nHow we built it\nOur app is built in Android Studio, using Java. We tried to abide to the material design rules as much as we could.\nChallenges we ran into\nOne of the main challenges that we had is the Android SDK for Myo doesn't expose the raw data for the 8 muscle activity sensor. Thankfully the open source community came to our rescue, and we found a project that implemented an API that exposed the data we needed. \nThe other challenge was in aggregating the individual sensor data so that we match it to the individual statement. \nAccomplishments that we're proud of\nWe made a working product that might be commercially viable\nWhat we learned\nAndroid development and interacting with hardware\nWhat's next for Myo Athletics\nWe'll add more features in the future like:\n\nExercise history\nExercise templates\nIntegrating other body parts and maybe other hardware like the Nike+", 
    "project_name": "Myo Athletics", 
    "project_tags": [
      "java", 
      "android", 
      "myo"
    ], 
    "project_url": "https://devpost.com/software/myo-for-athletes"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "", 
    "project_name": "LineFollowIno", 
    "project_tags": [
      "c"
    ], 
    "project_url": "https://devpost.com/software/linefollowino"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "", 
    "project_name": "Social Face Recogniser", 
    "project_tags": [
      "java", 
      "opencv", 
      "twitter"
    ], 
    "project_url": "https://devpost.com/software/social-face-recog"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "Inspiration\nGithub has saved our lives many times: in case of fire, git add, git commit, git push. But have you ever thought about what your commits say about you? Are you the type who just writes \"blabla\" all the type or do you give lots of details?\nWhat it does\nOur app  fetches your commits history from github, runs sentiment analysis on it and then based on the result suggests a song to match your mood, using spotify playlists. It also comes with a really cool design. The fun never stops!\nFood for thought\nGithub, spotify, sentiment analysis. What's not to love?", 
    "project_name": "MoodHub", 
    "project_tags": [
      "python", 
      "html", 
      "css", 
      "javascript", 
      "flask", 
      "github", 
      "alchemyapi", 
      "nltk", 
      "sentiment-analysis-online"
    ], 
    "project_url": "https://devpost.com/software/stacshack-koala9000"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "", 
    "project_name": "All Your Rebase Are Belong To Us", 
    "project_tags": [
      "d3.js", 
      "jquery", 
      "html5", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/github-visualizer"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "We asked everyone for their best and worst algorithm and decided to use codio to build a tutorial for Dijkstras with a story based on hackathons. We're proud of learning python and helping a beginner learn git, and we didn't quite have time to finish but we would love to expand this idea to other algorithms eg, algorithms related to red/black trees.", 
    "project_name": "stacs", 
    "project_tags": [
      "python", 
      "html", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/stacs"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "Inspiration\nWe didn't want to spend money on hosting servers but needed to share our dank memes.\nWe are going to make AWS obsolete\nWhat it does\nShares images through P2P connections so users can seed the images to each other, reducing server load\nHow I built it\nThere is a back-end written in Nodejs that handles upload and seeds the images for when no-one else is.\nWe used the JS library Webtorrent to do the P2P stuff\nChallenges I ran into\nNodejs.\nAccomplishments that I'm proud of\nThe fact it actually works for a small number of images\nWhat I learned\nDon't Node\nWhat's next for The Dank Web\ntrying to support more images and an image ranking system", 
    "project_name": "The Dank Web", 
    "project_tags": [
      "node.js", 
      "bootstrap"
    ], 
    "project_url": "https://devpost.com/software/the-dank-web"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "About\nA 2D jump'n'jump (we're talking about a bunny with a pogo stick, so there's not much running involved) featuring a slightly suicidal bunny. Randomly throughout the game, suicide mode is triggered which inverts the death logic of the game.\nThis means the player has to deliberately jump into deadly traps to stay alive which is somewhat counter-intuitive :-)\nContent\nAll assets have been created on the fly and the music used has been composed and produced by FoxPopuli, who allowed me to use it for the project.\nTechnology\nThe Godot game engine was used in this project. I have been loosely following its development ever since it has been released under an open source license by Okam Studio but never found the time to actually build something with it.\nThis is why I decided to try Godot in the course of this Hackathon and I really liked it!", 
    "project_name": "Suicide Death Bunny of Doom", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/suicide-death-bunny-of-doom"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "Inspiration\nTo make easier for atom users to talk about problems within their code with teachers and other students\nWhat it does\nCreates an issue on github directly from atom containing the currently highlighted code and shows notification to all people in the repository\nHow we built it\nWe used atom development tools with coffeescript as the base language. We also used github API and node.js.\nChallenges we ran into\nNew language (coffeescript) and new API's\nAccomplishments that we're proud of\nWe did it\nWhat we learned\nDon't use coffeescript\nWhat's next for Github Issues\nDirect interaction through issues on code.", 
    "project_name": "Github Issues", 
    "project_tags": [
      "coffeescript", 
      "node.js", 
      "github"
    ], 
    "project_url": "https://devpost.com/software/github-issues"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "Inspiration\nWhen you code, often you copy a line of code (ctrl+c) and you would like it to be with you, to stay in memory, to be able to retrieve it later, but then you copy another piece of code and the previous one gets lost, forever.\nIf you need it again, you have to copy it again, but you have to start looking for it again and wasting time.\nWhat it does\nPin Board is a storage tool that other than copying a piece of code/text in memory (same function of ctrl+c), it also adds it to a \"Pin Board\" where you are able to see it. Not only see it, but if you click on one of the stored items, you can copy it in memory and quickly retrieve it with the usual paste command (ctrl+v).\nThe copy command of Pin Board is triggered by the combination Ctrl+Alt+C.\nHow we built it\nPin Board is a plugin of the Atom editor, therefore it was built using CoffeScript and the Cson notation.\nChallenges we ran into\nCoffeeScript is a weird language, but after you get used to it it's cool! The API of Atom is not documented properly enough, and there is not enough material about Atom on the Internet.\nThe storage capacity of PinBoard is limited, because of a problem in making the data retrieval from the Pin Board generic. In fact, it seems quite hard to get to know which item on the Pin Board was pressed, and because of this, there has to be a method for each slot in the Pin Board, making the storage capacity limited.\nAccomplishments that we're proud of\nCreating a tool that can make the life of programmers easier! And of course taming CoffeeScript ;-)\nWhat we learned\nFirst of all, that Atom is a stunning text editor, and it's easily customizable! How the plugins in Atom work, their structure and functions.\nLet's not forget about the revision of JavaScript but in a different shape, CoffeeScript :)\nWhat's next for Pin Board\nMaking it possible to get to know which Pin Board element was pressed, in order to make its capacity unlimited and make only one function to retrieve the data stored in it.\nMaking the pinboard graphical: it will be possible to open it by pressing a button on the editor and see a list of boxes, each containing one of the copied texts.", 
    "project_name": "Pin Board", 
    "project_tags": [
      "coffeescript"
    ], 
    "project_url": "https://devpost.com/software/pin-board-4bz8rp"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "Inspiration\nPublic TTS services are not so good. We couldn't find big public data sets to train state-of-the-art algorithms. Aspects of Google Voice are trained on 1900 hours of private data. Power to the people!\nWhat it does\nUses YouTube and handmade Closed Captions to create audio snippets with correct English text.\nHow we built it\nPython, Google YouTube API, PyDub\nChallenges we ran into\nPython's type safety, python in general, lack of video decoder capabilities on lab machines, sleep, annoying people\nAccomplishments that we're proud of\nrunning and easy to use product, 7000 sentences with audio snippet and accurate English text.after just 3 hours of running (on one slow ass machine).\nWhat we learned\nThe Google API is powerful, this is actually totally possible\nWhat's next for SpeechFrenzy\nDRAIN YOUTUBE!! Minor post-processing of the data, error evaluation, build a huge data set and publish it, expand to audio books (highly illegal) and movies (even more highly illegal) and other languages (totally possible as well)", 
    "project_name": "SpeechFrenzy", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/speechfrenzy"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "With just a deck of cards, you can program literally anything.  Once domain.com gets itself sorted out, try it out at haveyouseenthesizeofmydeck.com", 
    "project_name": "Joker", 
    "project_tags": [
      "python", 
      "html", 
      "javascript", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/stacshack"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "Inspiration\nWe were at a loss for what to do at the start of this project. We spent the first 5 or 6 hours contemplating and trying out different ideas. Eventually we decided to make a game. Inspired by a video of the Warcraft 3 mod Warlocks we decided to make a Side-on wizard duelling.\nWhat it does\nThe game allows multiple people to connect and battle wizards. The aim of the game is to knock your opponents of the platform. You can move left and right using A and D, and you can jump using W. You can fire a spell using by clicking. Spells will fire towards the mouse position. Spells send any opponents that are hit by it flying back. You can charge up a spell by holding down the mouse button. The more charged a spell is the more it will knock your opponents back. The platform that you are duelling on is gradually crumbling away making it harder and harder to stay on.\nHow I built it\nWe built it in the Unity game engine using their 2D tools. The graphics we all created in Photoshop. \nChallenges I ran into\nDeciding on a project was an initial challenge. \nLearning how to use Unity took a while however once we got the hang of it we made quite good progress.\nAccomplishments that I'm proud of\nMaking a fun game in 24 hours\nWhat I learned\nWe learned how to make 2D games using Unity. \nWhat's next for Spell Ops 4\nInfinity and Beyond...", 
    "project_name": "Spell Ops 4", 
    "project_tags": [
      "unity", 
      "photoshop", 
      "c#"
    ], 
    "project_url": "https://devpost.com/software/spell-ops-4"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "Inspiration\nMachine learning in facial recognition software based on caricatures, which emphasise facial proportions over absolute measurements.\nWhat it does\nBased on a real-time video stream from a webcam, identifies the biggest face in each frame with Haar-cascades from openCV, further Haar-cascades identify 2 eyes within that area. Calculates the positions of individual pupils and compute the distance between them. If this value falls within the range specific to the primary user, return the user's name above the face box, else returns 'Who are you?'\nHow we built it\nUsed python libraries in Linux to install OpenCV software. Used available OpenCV modules to detect faces and eyes, implemented code to compute and return relevant variable and text.\nChallenges we ran into\nChoosing which facial proportions gave the most distinctive results, so as to identify different people with a minimum of measurements. Candidates include: distance between each pupil and the bottom of the face box, area between pupils and the chin, distance between each eye and the closest side of the face\nIdeally the model would have used Elastic Bunch Graph Matching, for increased resilience to out-of-plane rotations, but this feature was not obviously available in openCV.\nAccomplishments that we're proud of\nInstalling OpenCV (time-consuming.) Finding Irma. Getting a working program and reasonably accurate result over only 24 hours.\nWhat we learned\nHow to use OpenCV, basic face recognition theory, implementing custom extensions, perseverance, python.\nWhat's next for Where's Irma?\nFinding Jack. Implementing k-means clustering, wider positive and negative sample pool to train and automate machine learning algorithm.", 
    "project_name": "Where's Irma?", 
    "project_tags": [
      "opencv", 
      "python", 
      "machine-learning"
    ], 
    "project_url": "https://devpost.com/software/where-s-irma"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "g", 
    "project_name": "Fresh", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/fresh"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "St Andrews NightBus Tracker\nHave you ever missed the night bus or waited in the cold while it arrives several minutes late? Say no more...  The St Andrews night bus tracker will be your ally when going back home after a long day of studying, or when going out for a beer, or four.", 
    "project_name": "St Andrews night bus tracker", 
    "project_tags": [
      "android", 
      "react", 
      "java", 
      "javascript", 
      "twilio"
    ], 
    "project_url": "https://devpost.com/software/st-andrews-night-bus-tracker"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "Inspiration\nFarming is food, thus farming matters. However, farming may be hard without the proper automation. This is where Farm Script comes in.\nWhat it does\nFarm Script allows you to automate farming tasks and produce instant output - grow as many as 10,000,000 orchids in less than a second!\nHow we built it\nWe built Farm Script using our beloved HTML, CSS and JavaScript.\nChallenges we ran into\nMaking the god damned thing.", 
    "project_name": "Farm Script", 
    "project_tags": [
      "html", 
      "css", 
      "javascript", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/farm-script"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "Inspiration\nThe project was inspired by the GitHub challenge to create a new development tool. We decided to make achievement system, so that it motivates developers to build quality code in a more entertaining way.\nWhat it does\nIt adds several types of achievements, such as number of lines, number of commits and quality of code (i.e. number of comments weighed by the total number of lines in a file). Obtaining achievements allows users to gain experience and levels. Developers can also compete with their friends, whose information is fetched from GitHub.\nHow we built it\nWe used CoffeeScript, as it is the language of choice for Atom packages development. Some backend is implemented using Python. We divided the tasks, such that some of us were working mostly on frontend, while others focused on backend. \nChallenges we ran into\nNone of us used CoffeeScript before, so it was a real challenge to go from JavaScript to developing in a similar, but at the same time very different language. We have never developed packages for Atom before, so we spent a fair amount of time learning that as well. Other difficulties were related to the GitHub API and efficient GitHub repository management. \nAccomplishments that we're proud of\nWe are proud that we managed to build our first real Atom package and publish it to https://atom.io/packages/. \nWhat we learned\nWe improved our JavaScript knowledge, got to know GitHub API, learned CoffeeScript and Atom Package development.", 
    "project_name": "Achieve The Atom", 
    "project_tags": [
      "coffeescript", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/achieve-the-atom"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "Inspiration\nPain is always a good motivator. I can attest to the physical and mental pain inflicted to all its users by Michael Bostock: creator of data visualisation library D3.js.\nHowever, being able to make visualisations in JavaScript, especially reasonably nice-looking ones with animations and an enormous amount of flexibility regarding how the data is presented, is the reason we endure it.\nWith Gorgeous Graphs Mwah, we simplify the data collection and representation in a variety of common formats, so that users can enjoy Mr. Bostock's work, without giving their life away to StackOverflow.\nWhat it does\nIt provides a way to easily send unstructured data to the service, as well as a way to easily retrieve a visualisation of the data in popular formats (e.g. bar charts, line charts, pie charts).\nHow we built it\nAs an API that accepts data, placing it into a MongoDB instance. Then we query it and display with a Python NVD3 wrapper, which is an open-source project modified by us.\nChallenges we ran into\nSome of the challenges were especially to do with displaying dates and multiple data sets in one chart. For example, each data point has a date field associated with it, so it makes sense to display a data set as the data contained in each point along with each points' date field. However, doing this results in each data set having different dates, which then results in display inconsistencies.\nIt was necessary to calculate the maximum and minimum dates in the set, and then allow the user to pick a granularity interval. For each interval space, we aggregate the data that belongs in that interval's date range.\nAccomplishments that we're proud of\nIt works!\nThe front-end is very appealing and user-friendly, and the insertion and retrieval of visualisations works as originally intended. There are some things to iron out though.\nWhat we learned\nWholly unstructured data is not good for aggregation, because it is difficult to aggregate based on more than one field. We learned more about using Flask and MongoDB.\nWhat's next for Gorgeous Graphs Mwah\nImprove the displaying of multiple data sets, add more graph types, and simplify the user onboarding process and graph creation process.", 
    "project_name": "Gorgeous Graphs Mwah", 
    "project_tags": [
      "python", 
      "python-package-index", 
      "flask", 
      "mongodb", 
      "html5", 
      "css3", 
      "javascript", 
      "bootstrap", 
      "jinja", 
      "heroku", 
      "git", 
      "github"
    ], 
    "project_url": "https://devpost.com/software/gorgeous-graphs-mwah"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "Inspiration\nIf a person wants to use a pedestrian crossing, they must press the control box button manually. This can be a challenging task for someone who is visually impaired or/and has reduced mobility.\nWhat it does\nWe remove the requirement to physically touch the control box and allow users to control it with a Myo Wristband. At the same time we provide feedback to the wristband user in the form of vibrations based on the proximity of a traffic light and its current state (green/red).\nHow we built it\nWe created an Android app which communicates with the Myo Wristband and with the traffic lights (but there is no need to use the phone - user only needs to launch the app and after syncing with Myo they can put it in their backpack and never use it... user only needs to control the Myo\nChallenges we ran into\nWe didn't have a physical Pedestrian control box - so we had to create a server which listens to the requests and updates/schedules light switching. We used WebSockets to do this dynamically. Then of course we used the Estimote Beacon which would be part of the same physical control box.\nWhat's next for MyoCross\nWe would like to make people involved in city councils around the country aware of this project. We would love to see a real world implementation. We believe that this system could help many people with visual impairment and make their lives significantly easier...", 
    "project_name": "MyoCross", 
    "project_tags": [
      "android", 
      "myo", 
      "jquery", 
      "javascript", 
      "python", 
      "estimote", 
      "flask"
    ], 
    "project_url": "https://devpost.com/software/myocross"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "Inspiration\nTired of responding to nagging messages on facebook?\nSick of people who never reply to your own nagging messages?\nWhat it does\nuAI cleverly impersonates you so that your friends will never be without you - and you can never speak to them again!\nHow we built it\nPython, python, and more python. It's efficient right?\nChallenges we ran into\n50MB text files full of facebook messages take a long time to index.\nAccomplishments that we're proud of\nNot only can you generate a chatbot based on yourself, but you can generate one based on any of your friends using your data! Don't do this! It's creepy!\nWhat we learned\nFacebook has a legitimately scary amount of data about you. You should probably check up on that.\nWhat's next for uAI\nMore efficiency, and a web interface so people can generate their bots more easily!", 
    "project_name": "uAI", 
    "project_tags": [
      "python", 
      "github"
    ], 
    "project_url": "https://devpost.com/software/uai"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "Inspiration\nWe liked the challenge of company \"CodePlay\" which was to create the most ridiculous programming language and compiler and we also wanted to try out leap motion. Thus we decided to use leap motion for writing the language and since leap motions gestures and time given in hackathon are very limited, we decided to go with the most minimalistic and simplistic programming language called \"Brainfuck\".\nWhat it does\nYou can write \"Brainfuck\" code with hand gestures using leap motion and then the program compiles what you just written outputing the result in a text file.\nChallenges I ran into\nLeap motion was not very good at recognising similar hand gestures, thus sometimes the gestures had to be repeated few times in order to make the input. Mac and Windows tend to interpret frameworks in a slightly different ways, thus some of us were forced to contribute to the project without actually having one on their computer.\nAccomplishments that I'm proud of\nWhat I learned\nI improved my leap motion implementation skills, learned that there exist programming language which is actually called \"Brainfuck\", got some great ideas from other contestants about their projects.", 
    "project_name": "Brain Motion", 
    "project_tags": [
      "leap-motion", 
      "c++"
    ], 
    "project_url": "https://devpost.com/software/brain-motion"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "emoticon-lang\na program language that uses only emoticons\nhow to run the antlr-ver\nin the antlr-ver/grammer/ foulder \ncompile code using javac emlgrun.java\nThen programs can be run using emlgrun filepath\nwhere filepath is the path to a file , it will first check that the syntax in the file is correct then execute the code\nan example program is this that calculates the factorial of the imputed number\n|\u2011O:):$:))XD:):$><>:):>1<3:)XD:)<:|1:$:))XD:)):D:):$</3:O:)):$\nother example programs can be found in the antler-ve/test/ folder including this one\nthe full Syntax is found in antler-ve/grammer/emlg.g4\nand some non compact programs with comments that explain what is happing\nemjInter Version\nSimilar take on the \"altr-ver\" but instead uses the Unicode emoji images.\ncompile using: javac *.java\nThen programs can be run using: java Program /path/to/source/file [OPTIONAL -I /path/to/vm/spec/file/]\nExample of FizzBuzz: https://raw.githubusercontent.com/Dillnot/emoticon-lang/master/emjInter/fizzbuzz.em\nantlr-ver-compiler\nwe tried to write a compilet that compile the programs into java byte code but over estimated how long it would take , the file has been started and is in the grammar folder called compVisitor.java but is it not functional or finished", 
    "project_name": "emoticon-lang", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/emoticon-lang"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "GitBug\nTwitter based service to automatically add issues to the git repository when tweeted at\n\nWhenever it receives a tweet in the format:\n@1_pjp <title> | <body> #gitbug\nit creates an issue on the GitHub repository and tweets back the user. A much easier way of quick bug reporting!\n\nUses libraries:\n\npython-twitter (https://github.com/bear/python-twitter)\ngithubpy (https://github.com/michaelliao/githubpy)", 
    "project_name": "GitBug", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/gitbug"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "emoticon-lang\na program language that uses only emoticons\nhow to run the antlr-ver\nin the antlr-ver/grammer/ foulder \ncompile code using javac emlgrun.java\nThen programs can be run using emlgrun filepath\nwhere filepath is the path to a file , it will first check that the syntax in the file is correct then execute the code\nan example program is this that calculates the factorial of the imputed number\n|\u2011O:):$:))XD:):$><>:):>1<3:)XD:)<:|1:$:))XD:)):D:):$</3:O:)):$\nother example programs can be found in the antler-ve/test/ folder including this one\nthe full Syntax is found in antler-ve/grammer/emlg.g4\nand some non compact programs with comments that explain what is happing\nemjInter Version\nSimilar take on the \"altr-ver\" but instead uses the Unicode emoji images.\ncompile using: javac *.java\nThen programs can be run using: java Program /path/to/source/file [OPTIONAL -I /path/to/vm/spec/file/]\nExample of FizzBuzz: https://raw.githubusercontent.com/Dillnot/emoticon-lang/master/emjInter/fizzbuzz.em\nantlr-ver-compiler\nwe tried to write a compilet that compile the programs into java byte code but over estimated how long it would take , the file has been started and is in the grammar folder called compVisitor.java but is it not functional or finished", 
    "project_name": "emoticon-lang", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/emoticon-lang"
  }, 
  {
    "hackathon_name": "StacsHack 2016", 
    "project_description": "GitBug\nTwitter based service to automatically add issues to the git repository when tweeted at\n\nWhenever it receives a tweet in the format:\n@1_pjp <title> | <body> #gitbug\nit creates an issue on the GitHub repository and tweets back the user. A much easier way of quick bug reporting!\n\nUses libraries:\n\npython-twitter (https://github.com/bear/python-twitter)\ngithubpy (https://github.com/michaelliao/githubpy)", 
    "project_name": "GitBug", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/gitbug"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Stylist\nStylist teaches developers good programming and documentation style through a quiz where \nquestions are automatically generated from prior projects.\n\nProgramming Languages:\n\n\nJavascript (Google style guide)\n\nDocumentation:\n\n\nStrunk and White's \"The Elements of Style\"\n\n\nJavascript\nWe use JSCS to lint code extracted from a user-submitted\nGithub repository following the Google style guide.\nEnglish Language Linting\nWe use a fork of\na Strunk and White english\nlinter by @deniseli.\nThe rules which are checked include:\n\nContext free:\n\n\nExclamations\nIn-word dashes\nParenthesis\nFirst-person\n\nContext dependent:\n\n\nSingular possessive\nAs or Then\nAs to Whether\nOxford comma\nDate format\nOmit needless words\nLoose sentences", 
    "project_name": "Stylist", 
    "project_tags": [
      "javascript", 
      "css", 
      "php", 
      "node.js", 
      "jquery", 
      "express.js", 
      "github", 
      "bootstrap"
    ], 
    "project_url": "https://devpost.com/software/stylist-ltxzrh"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "", 
    "project_name": "fish", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/evolvingann-2alhe7"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nWe wanted to make a tool that helps people share with their neighbours what they not need anymore. One man trash is another man's treasure!\nWhat it does\nTreasure helps community get tighter, people explore and find new cool stuff. It lets you list your stuff and find what other people have listed around you.\nHow we built it\nTreasure is an Android application that relies on a Elasticsearch backend. All the search and insertion operation are made by a Django powered RESTful API.\nChallenges we ran into\nLocation, location, location\nAccomplishments that we're proud of\nIt actually works pretty well, we're pretty surprised\nWhat we learned\nAndroid, AWS, Banter\nWhat's next for Treasure\nTreasure Hunts - Organized city roams to find new treasures", 
    "project_name": "Treasure", 
    "project_tags": [
      "android", 
      "elasticsearch", 
      "django", 
      "python", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/treasure-wnpv0r"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "The inspiration is pretty obvious - Github goes down at least once a week and is a threat to productivity and peacefulness alike. Therefore we are allowing users to cache all/specific repos (subject to selection on the UI) to our mirror which updates every time something new is committed. We have created a proxy acting as a 'Git server' that goes through Git unless it is unavailable - in which GitStash will be called so users can still pull from these repos and work can continue.", 
    "project_name": "GitStash", 
    "project_tags": [
      "express.js", 
      "handlebars.js", 
      "node.js", 
      "php", 
      "golang", 
      "postgresql", 
      "mongodb", 
      "github"
    ], 
    "project_url": "https://devpost.com/software/gitstash-ymx5ct"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nRunning into different comment registrations, not being able to post comments anonymously and having content moderated by site owners is annoying. \nWhat it does\nIt makes sense to outsource comments to a single provider, one login, community moderation.\nHow I built it\nI built it on a Flask framework and used Firebase to store data in the backend.\nChallenges I ran into\nCross site cookies isn't allowed. I needed to change my project architecture to get it working.\nAccomplishments that I'm proud of\nMaking it alone from start to finish and not giving up on all the features which I had planned to bake in.\nWhat I learned\nThere are a lot of workarounds required to building something that works for every website and even after that it probably doesn't.\nWhat's next for Commeta\nUsing Machine Learning to stop spam.\nMaking a solid voting system for community moderation.", 
    "project_name": "Commeta", 
    "project_tags": [
      "azure", 
      "flask", 
      "jquery", 
      "heroku"
    ], 
    "project_url": "https://devpost.com/software/commeta"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nThe Myo gesture control armband seemed really interesting to us so we wanted to see what cool things we could make with it.\nWhat it does\nThere are two simple games controlled by the Myo.\nThe first is a top down space shooter where the player shoots asteroids through a gesture as well as controlling the ship by moving their arm.\nThe second is a first person shooter that uses VR through Google Cardboard. The Myo is used in order to control shooting while the VR is used to control player movement.\nHow we built it\nThe assets for both games were from two Unity tutorials. We then edited the behaviours slightly to use the Myo device rather than the default controls. We also had to replace the player completely in the second game as it was originally top down.\nChallenges we ran into\nTrying to incorporate the Myo with Android.\nReplacing the top down controller with a first person controller.\nAccomplishments that we're proud of\nWe managed to understand a completely new API and managed to get it running.\nWhat we learned\nWe learned a lot of the basics of Unity as well as the Myo API.", 
    "project_name": "MyoGaming", 
    "project_tags": [
      "c#", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/ic_hack_2016"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration: Thomas Allerton\nWhat it does: Sets an automatic alarm at a given time calculated from the distance and time of the next upcoming event, as well as accounting for factors such as journey time and morning routine\nHow we built it: Blood, sweat and tears\nChallenges we ran into: Solving git merge conflicts and setting up the Android emulator\nAccomplishments that we're proud of: Successfully using the APIs\nWhat we learned: How to use the Android IDE as well as the different Google API's\nWhat's next for AutoAlarm: More functionality and customisation of settings e.g. set ringtone", 
    "project_name": "AutoAlarm", 
    "project_tags": [
      "android", 
      "java", 
      "google-maps", 
      "android-studio"
    ], 
    "project_url": "https://devpost.com/software/autoalarm"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nWe wanted to use an oculus rift, and wizard's chess seemed pretty cool\nWhat it does\nA chess game for oculus rift in which the player can walk around on the board. Online multi-player is also implemented\nHow we built it\nServer was written in Golang, client was created using Unreal 4 with C++\nChallenges we ran into\nGetting libraries to work with unreal: the provided headers failed to compile\nGetting networking to work\nAccomplishments that we're proud of\nGetting networking running\nA working move checker on the server\nWhat we learned\nDon't use Unreal\nAlso, bring a more powerful computer if we want to use VR\nWhat's next for VizChess\nConsignment to the indie game graveyard (just kidding, probably)", 
    "project_name": "VizChess", 
    "project_tags": [
      "golang", 
      "unreal-engine"
    ], 
    "project_url": "https://devpost.com/software/vizchess"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "ParkWare\nFive overzealous newbie hackathoners use machine learning and computer vision technologies to find empty parking spaces.", 
    "project_name": "ParkWare", 
    "project_tags": [
      "html", 
      "javascript", 
      "css", 
      "c++", 
      "python", 
      "shell", 
      "makefile", 
      "opencv", 
      "google-prediction", 
      "google-maps", 
      "ajax", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/ichack-empty-parking-lot-detection"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nReddit has a lot of text-based quality content that is unavailable to people who may prefer to listen to that.\nWhat it does\nGenerates podcasts from subreddits\nHow we built it\nThe server uses watson api to synthesize the posts. Client provides playlist based podcast app\nChallenges we ran into\nCreating sound for posts longer than a few paragraphs\nAccomplishments that we're proud of\nEverything\nWhat's next for Crowdcast\nUser accounts , mobile client", 
    "project_name": "Crowdcast", 
    "project_tags": [
      "react", 
      "ibm-watson", 
      "amazon-web-services", 
      "chrome"
    ], 
    "project_url": "https://devpost.com/software/crowdcast"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nThe prizes were definitely a huge motivation, but most of the inspiration for this project came from the fact that I wanted to build a webchat with Node JS and AngularJS. But, at the same time I was interested in natural language processing so I decided to combine the two for all the Star Wars fans out there!\nWhat it does\nIt's a webchat that automatically translates the user's input into Yoda's words.\nHow we built it\nIt's a simple chatroom built with Node JS, but with an algorithm that converts the user's sentences using natural language processing techniques.\nChallenges we ran into\nRunning Python alongside Node JS. Node JS is an unfamiliar language, so that was definitely a challenge. And deployment on Heroku was new.\nAccomplishments that we're proud of\nIt actually works and we're proud to demonstrate that it does!\nWhat we learned\nA lot of Node JS and web development.\nWhat's next for Yoda Chat\nIt could be developed as a popular service, especially since the rest of the Star Wars franchise is set to be released over the next couple of years.", 
    "project_name": "Yoda Chat", 
    "project_tags": [
      "node.js", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/yoda-chat"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "", 
    "project_name": "ProcrastEnabler", 
    "project_tags": [
      "java", 
      "opencv", 
      "xml"
    ], 
    "project_url": "https://devpost.com/software/procrastenabler"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nI had a lot of guitar songs which I needed to organise, view and print songbooks of. This program makes this task much easier to do.\nWhat it does\nYou first login through Facebook, paste a URL to a guitar song to add it to your collection, and the linked website is automatically parsed and relevant data such as artist, title and content are extracted and saved to a database. You can then view and delete the songs and download all of them as a songbook in PDF format. The chords are also highlighted, making it easier to play the songs.\nHow I built it\n24 hours of hard work, lot of caffeine.\nChallenges I ran into\nNot getting Facebook API to do what I wanted for a long time.\nAccomplishments that I'm proud of\nFinishing in time.\nWhat I learned\nHow to work with Facebook API, how to parse HTML using DOM in PHP, improved my REGEX knowledge, learned how to set up a web server and a database quickly...\nWhat's next for MySongBook.io\nAdding support for more guitar song websites, perhaps extending the project outside guitar songs as well.", 
    "project_name": "MySongBook.io", 
    "project_tags": [
      "php", 
      "mysql", 
      "html", 
      "facebook", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/mysongbook-io"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nfacebook\nWhat it does\nMakes your life easier.\nHow I built it\nJS\nChallenges I ran into\nHad to sleep.\nAccomplishments that I'm proud of\nManaged to do it.\nWhat I learned\nFB api\nWhat's next for Facebook Offliner\nNew features", 
    "project_name": "Facebook Offliner", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/facebook-offliner"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nWe wanted to learn OpenGL and thought making a simple game engine would be quite cool.\nWhat it does\nLoads the original WAD (short for where's all the data?) files of the game back from 1993. Renders the levels in a 3D environment that resembles the classic game.\nHow we built it\neyeballing\nChallenges we ran into\nFloor and ceiling rendering is tricky and is not implemented properly. The techniques used in the original engine cannot be applied because that assumes rendering on the CPU and we really wanted to do OpenGL. The archaic file format is also a bit inconvenient to work with, especially in a strongly typed setting. Raw 1:1 bindings to OpenGl aren't too nice either. nullPtr in Haskell just doesn't feel right.\nAccomplishments that we're proud of\nManaged to draw pixels on the screen\nWhat we learned\n\n(some) OpenGL.\nHow to sweep unsafe code under the carpet and randomly get segfaults in 'pure' code\n\nWhat's next for Doom in Haskell\nNothing really, it was planned to be a weekend hack and thus has fulfilled its purpose\n(it is currently a bit broken, might fix up the simple low hanging fruit)\nlet's just say the no-clip cheat is turned on by default, and turning it off is not implemented yet\nand a bit (very) inefficient too", 
    "project_name": "Doom in Haskell", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/doom-in-haskell"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nMagic Tower / Binding of Isaac /Scavenger\nWhat it does\nTry to survive in a cave and fight against monsters.\nHow we built it\nUnity with C#\nChallenges we ran into\nOur team is relatively new to the Unity Engine, thus we needed to cope with the steep learning curve Unity Engine presented and then built something upon it.\nAccomplishments that we're proud of\nAnimation and Good game arts by our team mate.\nWhat we learned\nC# and Unity Engine.\nWhat's next for IC_HACK_16_CAVE_SURVIVOR\nGenerating endless map and adding more game modes, like the timing mode which the player should try to beat as much monster as he can in the certain time limit.", 
    "project_name": "IC_HACK_16_CAVE_SURVIVOR", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/ic_hack_16_cave_survivor"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Scan a receipt and request money from friends", 
    "project_name": "Dinner With", 
    "project_tags": [
      "iphone-sdk", 
      "swift", 
      "ruby", 
      "ruby-on-rails"
    ], 
    "project_url": "https://devpost.com/software/dinner-with"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nWe as software developers usually work on multiple screens but it is always not the case that we have a monitor with us. So we came up with an idea to solve this problem with all the desktops and workspaces being projected in 3D on your phone using the fantastic Google Cardboard.\nWhat it does\nIt basically runs on your local machine and local network and captures all the active spaces on your computer and transmits them to our Android application where you use it with the help of Google Cardboard to project every workspace in virtual reality. These spaces keep on refreshing so that you can get a real time view of your desktop.\nHow we built it\nFor the front end of the application we have used Unity along with Google Cardboard SDK for Unity 3D. For this Unity project we have used certain GameObjects which run on C# scripts to query the back end and get the latest update of the desktop screens and workspace. Whereas on the back end we run a node.js server which streams the images which are captured from X11 using FFMpeg.\nChallenges we ran into\nThe basic idea was to use Android Studio but then we switched to Unity after a great talk by David. But none of our team members had experience in Unity so we had to learn everything from the basics, learn C# etc. Another challenge was to refresh the stream constantly so that we don't miss out on anything going on. On the back end it was tough streaming the images correctly and efficiently.\nAccomplishments that we're proud of\nFirst accomplishment would be not sleeping for almost 24 hours. Second would be to pick up a new programming language in a day and make something useful with it. Learning new software and SDK from scratch.\nWhat we learned\nWe learned C#, Unity and core features of Linux to capture the image. Maybe some experience in Karaoke singing as well. Also we worked with graphics a little bit so it was good. Above all we learned how to use Google Cardboard.\nWhat's next for Desky\nUsing live video feeds instead of image feeds. Better rendering in 3D and mayb full HD resolution.", 
    "project_name": "Desky", 
    "project_tags": [
      "node.js", 
      "unity", 
      "c#", 
      "javascript", 
      "html5", 
      "css3", 
      "google-cardboard"
    ], 
    "project_url": "https://devpost.com/software/desky"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nWe saw a gap in the market between music applications which allow users to create and share playlists and the DJ and live music industries.\nWhat it does\nWe have tried to combine the best of both worlds by creating an application to allow users to vote on and select the DJs candidate tracks. They are also able to up-or down-vote the current song being played, as well as suggest tracks, which other people also vote on.\nMeanwhile, the DJ receives visualised live data through live graphs and charts, showing not just the song votes and participant reactions, but also the amount of movement (i.e. dancing) of the crowd in live-time.\nHow we built it\nWe created an API using the web framework, Django, to integrate a front-end web interface and an Android application with an online database. Live data is passed between these.\nChallenges we ran into\nEffective workflow using Git branching was difficult, as was effectively coordinating tasks between a team of five. Some problems were also posed by different Android versions.\nAccomplishments that we're proud of\nThe final product and its excellent features and quality are the things we are most proud of.\nWhat we learned\nEffective technical team working, Django development and Android development.\nWhat's next for Alpaca", 
    "project_name": "Alpaca", 
    "project_tags": [
      "java", 
      "android", 
      "django", 
      "javascript", 
      "css", 
      "html5", 
      "python", 
      "last.fm", 
      "highcharts"
    ], 
    "project_url": "https://devpost.com/software/alpaca-7wuj9b"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nWhen reading the news, I always wanted a directed source for when officials were being quoted.\nWhat it does\nA user-friendly feed for accessing exterior ministry statement, sortable by automatically generated keywords.\nHow I built it\nIt uses web crawlers by import.io to access the statements directly from the government website. It then uses indico.io machine learning api to generate keywords for each entry and store them together with other information in mongo DB. The user can query the keywords and only be shown the statements that relate to a specific topic.\nChallenges I ran into\nIntegrating indico.io into mongo DB proved very difficult due to lacking documentation.\nAccomplishments that I'm proud of\nIntegerating UK and US feeds using machine learning APIs.\nWhat I learned\nMachine learning APIs\nWhat's next for Gov Feed\nExpand the number of countries crawled by Gov Feed.\nEnabling to sort query results chronologically and by relevance.", 
    "project_name": "Gov Feed", 
    "project_tags": [
      "php", 
      "html"
    ], 
    "project_url": "https://devpost.com/software/gov-feed"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nOur primary inspiration for this project were the sponsors. As this is a Hackathon, we decided it would be best to adopt the theme of the event instead of working on something unrelated.\nWhat it does\nOur project is a web application at it's core but comes with a twist. It cannot be navigated using a mouse and keyboard. All the user interaction is done via gesture tracking and state control. The gesture tracking is powered by Leap Motions Controller which uses a set of cameras to achieve accurate finger, hand and arm tracking.   \nHow we built it\nThe first thing we did was to split the project into its smaller components; namely the gesture recognition part and the web user interface part. 2 of us worked on the first while the remaining 3 on the later. \nGesture Recognition\nLeap Motion has created a variety of libraries that can be used to interact with the Controller. We used the one written in Javascript in order to make the interfacing with the website as effortless as possible. While working on this project we discovered that even though the controller has a wide range of \"preset\" gestures, we needed to add some new ones such as the whole hand roll (X - Y axis). We also discovered that while the technology is certainly impressive, it comes with some limitations. For example, some gestures appear to be more accurate than others and there were occasions where the Controller was picking up a lot of unrelated noise. The noise can be cancelled by keep track of how long each object has been in view for, but unfortunately we did not have enough time to implement this. \nUser Interface\nFor the user interface we wanted to use as much available code as possible. The charts were generated using the Google Chart libraries and the financial data were taken from fixer.io. For styling, we used the Materialize CSS framework in order to make the website look decent with the least amount of effort possible. \nChallenges we ran into\nThe biggest challenge we had was getting all the data necessary asynchronously while also keeping the performance at acceptable levels. Also, we found that it was difficult to get the sensor to work once we deployed our website to Azure.\nWhat we learned\nThe Leap Motion controller is an impressive device and can have a wide range of applications", 
    "project_name": "FinanceMotion", 
    "project_tags": [
      "azure", 
      "javascript", 
      "leap-motion", 
      "html", 
      "css", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/financemotion"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nStudents in lectures keep texting each other, not paying attention to the lecturer. This app poses a limit to this.\nThis app is also an excellent tool against spammers.\nWhat it does\nYou have to play games, in order to earn points, in order to send messages.\nHow we built it\nUsing html css javascript and socket.io for the backend.\nChallenges we ran into\nCreating multiple rooms and inviting friends for a game. Unfortunately because of the short time we couldn't do neither, only one room an single player games. We also wrote two more games in javascript that unfortunately did not manage to implement.\nAccomplishments that we're proud of\nLearning the structure of the backend for a chat, and at the same time using javascript to write cool and traditional games.\nWhat we learned\nLearning the structure of the backend for a chat, and at the same time using javascript to write cool and traditional games.\nWhat's next for HackChat\nCreating multiple rooms and inviting friends for a game. Facebook login", 
    "project_name": "HackChat", 
    "project_tags": [
      "javascript", 
      "html5", 
      "css", 
      "socket.io"
    ], 
    "project_url": "https://devpost.com/software/hackchat-lvmk7i"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "What it does\nIt gathers metrics, logfiles and alerts from supported platforms. At present the only \"host\" adaptor provided is a generic \"Linux\" one (i.e. literally just the box you're on) but I wanted to add, e.g. a \"Docker\" one that allows discovery of services within Docker containers, etc. etc.\nIt's supposed to be simple to set up - it has very few dependencies, just Go (on some server somewhere!) and Postgres, unlike some reporting stacks which are quite complex to put together. I like to think I kept to that.\nHow I built it\nLiterally just me! I decided it might be interesting to see how far I could get trying to work on the app alone, full-stack.\nI fleshed out the backend collection agent first, which was a ton of fun. I think the first code that went in was the code that interacts with DBus to gather some interesting data about the number of packages installed on your system.\nChallenges I ran into\nIt's actually quite hard to do everything alone :o) but I knew that going in, anyway.\nAccomplishments that I'm proud of\nThe backend supports shuttling logs upwards, and the architecture is designed such that you can chain nodes together.\nThe provisioning system is super neat as well - you end up with (eventually, once the server support is there) a binary containing a one-time use, embedded certificate which can be used for generating proper key material on the target server.\nWhat I learned\nRed Bull sugar free tastes like death.\nWhat's next for phalanx", 
    "project_name": "phalanx", 
    "project_tags": [
      "go", 
      "react"
    ], 
    "project_url": "https://devpost.com/software/phalanx"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nThe sims\nWhat it does\nPuts diamonds around the head and make them usable (recognize people on facebook with your camera)\nHow we built it\nChallenges we ran into\nReading JSON\nAccomplishments that we're proud of\nReading JSON\nWhat we learned\nReading JSON, working with alamofire and 3rd party libraries in XCode\nWhat's next for ICHackEclipse\nRecognize everything!", 
    "project_name": "ICHackEclipse", 
    "project_tags": [
      "iphone-sdk"
    ], 
    "project_url": "https://devpost.com/software/ichackeclipse"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nMost machine learning algorithms aim to show people content that is most similar to their views already. We believe you should always listen to the other side.\nWhat it does\nIt's a news website that displays articles from different viewpoints and sources. It automatically finds opposing views for a certain article and tries to highlight the key sentences.\nHow we built it\nWith great difficulty.\nChallenges we ran into\nOur language processing algorithms didn't live up to their expectations\nAccomplishments that we're proud of\nSome articles have been processed surprisingly accurately\nWhat we learned\nWhat's next for perspective", 
    "project_name": "perspective", 
    "project_tags": [
      "python", 
      "django", 
      "postgresql", 
      "bootstrap"
    ], 
    "project_url": "https://devpost.com/software/perspective-a6x3vl"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nWe showed up to the hackathon with little to no ideas about what to make or do. However after seeing the google cardboard and the ease of use with unity, we felt we'd be able to make something fairly substantial. We then decided on a VR file viewer as an interesting way of searching through and looking at files. The ideas developed form there throughout the hackathon to the finished product.\nWhat it does\nOur project, VR file viewer, currently takes a folder full of images and populates a virtual world with interactive frames with these images on them. The world is easily traversable using the magnetic switch on the Google Cardboard and the head tracking of the phone. The hack also currently includes a method of playing music through this file viewer, and can easily be shown to switch between files when run on a PC, repopulating the world with images for each folder.\nHow we built it\nUsing Unity, the C# programming language and much caffeine, eventually a working product made its way onto a phone. We split the work between the two of us by one creating the main world and user interactions, and the other working on algorithms and working out how Unity handled files which were to be implemented in the final product. \nChallenges we ran into\nUnity is a little awkward at times, and the Google Cardboards were prone to being difficult to put together and stay together, as well as the apps made through unity heating the phone to a large extent and causing memory leaks. These were only small hurdles though.\nAccomplishments that we're proud of\nGetting a full finished product together in time even with a small team of two. We are also very proud of the positive responses we got whenever other participants tried our product.\nWhat we learned\nHow to code better in C# as well as dealing with file systems etc. from within other environments such as unity. We also learned that flexible plans are the most likely to succeed.\nWhat's next for VRFileViewer\nCloud support,  iOS implementation, more filetypes supported, multi user environments so others can see what you're looking at- possibilities are endless.", 
    "project_name": "VRFileViewer", 
    "project_tags": [
      "unity", 
      "c#"
    ], 
    "project_url": "https://devpost.com/software/vrfileviewer"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nAt University, we tend to go out to restaurants a lot for big friends gathering. But every single time, we spend as much time talking about our lives than about the bill.\nFor the sake of enjoy more quality time with our friends, we thought of way to make this process of splitting the bill faster.\nWhat it does\nSplit is a very simple and straightforward app. Take a picture of your receipt, we\u2019ll analyse it and convert it to a simple table. From then on, each person just tap the elements he ate and even shared with some other people, and the magic is done.\nEverything will be calculated, from sharing starters between some people to service charge and tip splitting.\nHow we built it\nSwift with Microsoft Oxford Project's OCR for text recognition.\nChallenges we ran into\nUsing an OCR is WAY more complicated than we expected. After having used Tesseract, post-image processing, we still didn\u2019t get anything good enough for the product quality we were aiming at. We therefore moved on to using Microsoft\u2019s Project Oxford OCR which was a lot more accurate. Unfortunately, we couldn\u2019t implement it on our iOS devices because of a common problem but we plan on doing it next.\nAlso, the project was meant to be completed by three people, but unfortunately, one of us feeling sick had to go back home. We still did it and (hopefully?) made him proud (and jealous).\nAccomplishments that we're proud of\nIt works! We can split bills and individual elements!\nWhat we learned\nThat Paul Balaji is an awful rapper.\nWhat's next for SPLIT\nWe\u2019re going live ASAP! The main reason why we came to the hackathon is to actually get this project done and functional..!", 
    "project_name": "SPLIT", 
    "project_tags": [
      "swift"
    ], 
    "project_url": "https://devpost.com/software/split-mpbvcq"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nWhat it doesasfasfasfa\nHow I built it\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for asfasf", 
    "project_name": "asfasf", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/asfasf"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nMost machine learning algorithms aim to show people content that is most similar to their views already. We believe you should always listen to the other side.\nWhat it does\nIt's a news website that displays articles from different viewpoints and sources. It automatically finds opposing views for a certain article and tries to highlight the key sentences.\nHow we built it\nWith great difficulty.\nChallenges we ran into\nOur language processing algorithms didn't live up to their expectations\nAccomplishments that we're proud of\nSome articles have been processed surprisingly accurately\nWhat we learned\nWhat's next for perspective", 
    "project_name": "perspective", 
    "project_tags": [
      "python", 
      "django", 
      "postgresql", 
      "bootstrap"
    ], 
    "project_url": "https://devpost.com/software/perspective-a6x3vl"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nWe showed up to the hackathon with little to no ideas about what to make or do. However after seeing the google cardboard and the ease of use with unity, we felt we'd be able to make something fairly substantial. We then decided on a VR file viewer as an interesting way of searching through and looking at files. The ideas developed form there throughout the hackathon to the finished product.\nWhat it does\nOur project, VR file viewer, currently takes a folder full of images and populates a virtual world with interactive frames with these images on them. The world is easily traversable using the magnetic switch on the Google Cardboard and the head tracking of the phone. The hack also currently includes a method of playing music through this file viewer, and can easily be shown to switch between files when run on a PC, repopulating the world with images for each folder.\nHow we built it\nUsing Unity, the C# programming language and much caffeine, eventually a working product made its way onto a phone. We split the work between the two of us by one creating the main world and user interactions, and the other working on algorithms and working out how Unity handled files which were to be implemented in the final product. \nChallenges we ran into\nUnity is a little awkward at times, and the Google Cardboards were prone to being difficult to put together and stay together, as well as the apps made through unity heating the phone to a large extent and causing memory leaks. These were only small hurdles though.\nAccomplishments that we're proud of\nGetting a full finished product together in time even with a small team of two. We are also very proud of the positive responses we got whenever other participants tried our product.\nWhat we learned\nHow to code better in C# as well as dealing with file systems etc. from within other environments such as unity. We also learned that flexible plans are the most likely to succeed.\nWhat's next for VRFileViewer\nCloud support,  iOS implementation, more filetypes supported, multi user environments so others can see what you're looking at- possibilities are endless.", 
    "project_name": "VRFileViewer", 
    "project_tags": [
      "unity", 
      "c#"
    ], 
    "project_url": "https://devpost.com/software/vrfileviewer"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nAt University, we tend to go out to restaurants a lot for big friends gathering. But every single time, we spend as much time talking about our lives than about the bill.\nFor the sake of enjoy more quality time with our friends, we thought of way to make this process of splitting the bill faster.\nWhat it does\nSplit is a very simple and straightforward app. Take a picture of your receipt, we\u2019ll analyse it and convert it to a simple table. From then on, each person just tap the elements he ate and even shared with some other people, and the magic is done.\nEverything will be calculated, from sharing starters between some people to service charge and tip splitting.\nHow we built it\nSwift with Microsoft Oxford Project's OCR for text recognition.\nChallenges we ran into\nUsing an OCR is WAY more complicated than we expected. After having used Tesseract, post-image processing, we still didn\u2019t get anything good enough for the product quality we were aiming at. We therefore moved on to using Microsoft\u2019s Project Oxford OCR which was a lot more accurate. Unfortunately, we couldn\u2019t implement it on our iOS devices because of a common problem but we plan on doing it next.\nAlso, the project was meant to be completed by three people, but unfortunately, one of us feeling sick had to go back home. We still did it and (hopefully?) made him proud (and jealous).\nAccomplishments that we're proud of\nIt works! We can split bills and individual elements!\nWhat we learned\nThat Paul Balaji is an awful rapper.\nWhat's next for SPLIT\nWe\u2019re going live ASAP! The main reason why we came to the hackathon is to actually get this project done and functional..!", 
    "project_name": "SPLIT", 
    "project_tags": [
      "swift"
    ], 
    "project_url": "https://devpost.com/software/split-mpbvcq"
  }, 
  {
    "hackathon_name": "IC Hack '16", 
    "project_description": "Inspiration\nWhat it doesasfasfasfa\nHow I built it\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for asfasf", 
    "project_name": "asfasf", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/asfasf"
  }, 
  {
    "hackathon_name": "Improve water utility efficiency", 
    "project_description": "Developing a NWL resource management hub for better more effective site / asset management \nWe have taken multiple unconnected NWL data sets and inter related them to help the experts at NWL better understand their assets, their management and where cost savings and efficiences can be made.", 
    "project_name": "NWL Hack by Enigma Interactive", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/nwl-hack-enigma"
  }, 
  {
    "hackathon_name": "Improve water utility efficiency", 
    "project_description": "Inspiration\nInfographic browser-based visualisations of data.\nWhat it does\nSurfaces information from various sources and displays in a meaningful manner.\nHow we built it\nImported data into MSSQL database and developed queries to link data in meaningful ways.  Developed application to convert data into form browser manipulation (JSON). Developed Javascript based application to visualise data.\nChallenges we ran into\nData was fragmented into different sources with no easy way to link them.  Data was of poor quality.\nAccomplishments that we're proud of\nCreating end-to-end proof of concept (from xlsx to browser visualisation).\nWhat we learned\nNeed more structured data sources for computer processing (not human readable sheets)\nWhat's next for Northumbrian Water Data Visualisation\nFiltering and sorting of data - allowing specific queries.  Different types of visualisation to explore added value.", 
    "project_name": "Northumbrian Water Data Visualisation", 
    "project_tags": [
      "javascript", 
      "scala", 
      "d3.js"
    ], 
    "project_url": "https://devpost.com/software/northumbrian-water-data-visualisation"
  }, 
  {
    "hackathon_name": "Improve water utility efficiency", 
    "project_description": "Nicander's new AFMS product is supporting the management and repair of network assets across Ireland and throughout the City of Dublin.  It will manage all asset infrastructure for the new Mersey Gateway Bridge when it opens in 2017. But where next.............", 
    "project_name": "Nicander AFMS", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/nicander-afms"
  }, 
  {
    "hackathon_name": "Improve water utility efficiency", 
    "project_description": "Inspiration\nThe data is bad. My mind connected with the jobs data, understanding how engineers are sent out for maintenance but might abort the job due to lack of information about was needed. That engineer might not bother to accurately record why they aborted the job, or even if finished they might not record what they did.\nI could have reviewed the data, running queries to flag up places issues commonly happen and I could have written a report on how good it was. That's my day job, and as this is a hackathon I wanted to see how my coding would follow my wandering mind. I also wanted to think how engineers and team leaders could be engaged with gaps in data and a potential domino effect. Simply pointing out which engineers/jobs had bad data, wasn't enough.\nWhat it does\nMy hacked-together project takes all the jobs associated to an asset. It then paints different aspects of the jobs onto a \"flag\" image. The human mind can easily spot patterns, and most importantly breaks in patterns. [see annotated flag] An asset may get jobs every few months and that be normal, but at one point there is is a job that was only a few days after the following job. That can draw us in, and perhaps every time the pattern breaks it is after an orange dot which means no comment was given.\nThe real benefit is the view of assets. The idea is that NWL staff will be able to filter the list of assets (or generating reports) in the way they are used to, I have just hard-coded some examples. For example, show all assets with more than had more than 40 jobs, or show pump assets. On this page, the \"flag\" images of each asset are shown. Because the filter has selected assets of an specific nature, the flags are likely to be the same. For example the time-since-last-job bar may be all greens because the assets are reliable ones maintained every 5 years. It is not the individual assets to look at, but the typical pattern of these flags and then you can see where there are breaks.\nHow I built it\nThe data was converted from Excel into CSV and into a mySQL database, thanks to critical help from Simon and his patience waiting for conversions to run. When the detail page of an asset is looked at, PHP runs some queries on the tables to get various data of the jobs. The GD image library is used to draw different shapes onto a grey rectangle. There is nothing amazing to this build, but I hadn't spent a lot of time with the GD functions before as previous work had started with images rather than create them from scratch. My main work was reviewing the data, and learning what the field names were.\nChallenges I ran into\nConverting the data had it's problems. Large Excel files are horrible, CSV is better.\nI was aware of limited time, and thus limited opportunity I had. I didn't push myself to build a big user interface, and that actually resulted in me skipping on another project idea I started forming. \nAccomplishments that I'm proud of\nVisualising about 50 rows on a 300 x 100 pixel image, displaying those on a page/gird, and thus being able to visualise multiple tables/queries of a relational database on such a flat view. Normally such a view would require flicking between tabs/sheets and keeping in mind what each one looked like and how they linked.\nPlaying with the GD image library was a fun accomplishment, but it's only the start.\nWhat I learned\nGD library has some bugs in it that limited what I could draw, I may be able to get around those. I've been able to learn about specific assets that stood out as a result of the flag images, although I'm not a domain-expert to know exactly what  that means or confirm it is something that isn't right.\nWhat's next for Abstract Assets\nUnderstanding the values is important, and although advice is on hand it would need a lot of sit-down time to see what is relevant. The break points for shapes changing colour, and what information to display could be tweaked and  adjusted. One of the things to add next would be a marker as to the priority-level of jobs. The image could also display information about the asset that isn't job-specific.", 
    "project_name": "Abstract Assets", 
    "project_tags": [
      "php", 
      "html", 
      "mysql"
    ], 
    "project_url": "https://devpost.com/software/abstract-assets"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Nashville 2016", 
    "project_description": "Inspiration\nWe don't pray nearly enough and we fail to pray for others when we say we will!\nAs Christians do we really believe that prayer is communication with our Creator and that it changes things?  We've learned that many of us have struggled in our prayer lives; not praying enough, failing to pray for others, and a general lack of disbelief in prayer. \nWe've set out to help our brothers and sisters cultivate this foundational spiritual discipline.\nWhat about new believer's who don't have anyone to pray for them? We've all felt the emptiness and loneliness of knowing and sensing no one is praying for me.\nWhat it does:\nPrayerGroups\u2122 provides small, private prayer groups to stay abreast of your prayers and others prayers requests.  \nThroughout the day, we encourage you to use Prayer Groups App to List your prayers. \nBring all your prayers the the Lord! \nYou can also request supplication from your personal 'Prayer Groups' - who can now join you in prayer.  \nFinally, provide spiritual help to others, you can respond to 'Prayer Requests', submitted from members in your personal Prayer Groups.   \nHow I built it:\nSketch, Invision.\nWe spent a considerable amount of time in ideation. It was important that we fully understood what we were setting out to accomplish.  This allowed us to hone in on our requirements to produce a minimal viable product.\nChallenges I ran into:\nEnsuring adherence to the original vision.  Through our cumulative experience, we have learned that sometimes too many features/options can detract from the overall design of the project - \"Less is More\".\nAccomplishments that I'm proud of:\nWe came into this project with just an IDEA.  By the end of our weekend, we had provided the groundwork to an App that we believe will change the world, \"One Prayer at a Time\"\nWhat I learned:\nFront end and back end development languages. \nWhat's next for Prayer Groups:\nThis is the start of our new ministry - PrayerGroups App.\nConsider business development and marketing partnerships to sustain platform (Kendrick Brothers - War Room Prayer App)", 
    "project_name": "PrayerGroups\u2122", 
    "project_tags": [
      "flow", 
      "sketch", 
      "html", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/prayergroups"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Nashville 2016", 
    "project_description": "Kristin is a youth minister and sees a need for an app that will help students engage with the Bible.\nThe Formed App prompts students to read sections of scripture and gives opportunities to respond and reflect on those scriptures. There is also a social component to this app, allowing groups within a church to share their thoughts on the scriptures with each other. There is opportunity in the future for push notifications to remind students to read, for youth ministers to create their own lessons, and for youth ministers to keep up with engagement rates for different students.\nHow we built it: Each member of the teach tackled a different component of the project. Chance focused on front end, Dustin on backend, Kristin on content and the idea, and Kevin on the design.\nChallenges we ran into: Thinking about how to sell to the target market. How much are youth ministers willing to pay for this app? We also ran into some trouble with the backend development.\nAccomplishments that we're proud of: working together as a team and making good progress.\nWhat we learned : A team with different strengths is able to really move forward on the project. The team, by chance,  included a backend developer, front end developer, content writer and visionary, and a graphic designer. It allowed us to work on all aspects the app over the weekend.\nWhat's next for Formed App more team meetings to explore the future of the app. Still need to build more development to get to Beta release stage. Create a test group with a few small youth groups to look for bugs and test usability.", 
    "project_name": "Formed App", 
    "project_tags": [
      "react", 
      "bootstrap"
    ], 
    "project_url": "https://devpost.com/software/formed-app"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Nashville 2016", 
    "project_description": "This project is a JavaScript and Node.js client for the Digital Bible Platform Digital Bible Platform\nThe Digital Bible Platform is an online API for Bible Text, Audio, and Video. This client module for Node.js provides an easy-to-use set of functions designed to simplify the building of JavaScript applications that use the Digital Bible Platform.\nRequirements\n\nNode.js\nA Digital Bible Platform API key\n\nInstalling the client\nnpm install digital-bible-platform\n\nClient usage\nvar Client = require( \"digital-bible-platform\" );\nvar client = new Client( \"your-api-key\" );\n\nclient.versions( function( err, versions ) {\n    console.log( versions );\n} );\n\nSample Electron Bible Application\nElectron Bible is a cross-platform desktop application that uses the client to provide basic Bible reading and text search features.", 
    "project_name": "Digital Bible Platform JS SDK", 
    "project_tags": [
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/digital-bible-platform"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Nashville 2016", 
    "project_description": "Inspiration\nThe drive to help God's Kingdom to start leading the world on the social, technology and educational fore front.\nWhat it does\nThis web platform allows for end users to create a profile with-in a network that will allow for sharing,distribution and community growth with God's word.  \nHow I built it\nI created it with word press, js and css.\nChallenges I ran into\nTime...I was bless with this conceptual ideal today and worked as much as God enabled me to create such vision.\nAccomplishments that I'm proud of\nI'm proud that I was blessed to be chosen to introduce such a beautiful advancement for the Glory of God's Kingdom. \nWhat I learned\nI've learned that sometimes you have to wait a little longer than others to find God's calling and direction.\nWhat's next for Thy Kingdom\n100 percent completeness and marketing to reach all God's children!", 
    "project_name": "Thy Kingdom", 
    "project_tags": [
      "wordpress", 
      "javascript", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/thy-kingdom-ankd9z"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Nashville 2016", 
    "project_description": "Eddystone Beacons\nWhat it does\niOS Swift, Apigee Baas, WalkBy API\nAlways more work than you think\nThe possibilities seem to be endless\nfinish and take to market", 
    "project_name": "WalkBy", 
    "project_tags": [
      "iphone-sdk", 
      "apigee", 
      "swift", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/walkby"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Nashville 2016", 
    "project_description": "Inspiration\nTo call the church, and society in general to be more like the Samaritan in the parable Jesus told, in a culture that is increasingly divisive and not at all Samaritan-like.\nWhat it does\nIt is currently a website, with incomplete content, that is designed to change opinions towards immigrants and provide a sign up to be part of the movement.\nHow we built it\nWe used a WordPress theme from StudioPress to be mobile responsive.\nChallenges we ran into\nLimited programming knowledge in our team to build all the functionality for applications we wanted, and narrowing down the scope of our presentation.\nAccomplishments that we're proud of\nBuilding a fully functional website in less than two days that communicates our message, and forming the concepts that make the foundation of a movement.\nWhat we learned\nLearning story boarding and project planning, consolidating ideas to form a larger vision. Group dynamics and cooperation in compromising ideas to form a vision and plan. Increased WordPress skills for several members and increased interest in programming and future attendance in local Nashville tech community events.\nWhat's next for Be The Samaritan\nWe would like to propel this into a movement that is adopted by masses of people, and specifically all ideological groups, especially Christians to come together to face and change the human challenges associated with immigration. A strong media strategy is needed. Technically, we would like to see applications built to bring disparate groups of people together to serve the needs of immigrants. Also, relaunching the site in completed form on the domain that was purchased: www.BeTheSamaritan.org", 
    "project_name": "Be The Samaritan", 
    "project_tags": [
      "wordpress"
    ], 
    "project_url": "https://devpost.com/software/be-the-samaritan"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Nashville 2016", 
    "project_description": "Inspiration\nPeople have a hard time figuring out what ministries they would fit in, and many ministries lack talented people. There should be a simple way to help both parties connect.\nWhat it does\nMinistries add skills they think they need. Members register and then list the skills they have. After that, they see the matching ministries.\nHow I built it\nI used Ruby on Rails with postgres as a database. I used a css framework called Foundation to style the front end, with minimal extra CSS added. No javascript is used.\nI modeled the Ministries, Skills, Members and relationships in Rails, and added a simple registration/login system for Members. Most everything in Skills and Ministries is editable by anyone at the moment, but there are also standard seeds to set up some initial data.\nChallenges I ran into\nIt was difficult to try to list all the skills a given ministry might need. The interface for adding skills is a bit gaudy as I am not in any way a designer.\nWhat's next for Ministry Skill Matcher\nI would like to ad admin roles, so not just anyone can add new skills/ministries. I would like to clean up the member skill chooser UI/UX. I would like to have more logic around finding matching ministries, including partial matches ranked with some computed score.", 
    "project_name": "Ministry Skill Matcher", 
    "project_tags": [
      "ruby-on-rails", 
      "ruby"
    ], 
    "project_url": "https://devpost.com/software/ministry-skill-matcher"
  }, 
  {
    "hackathon_name": "Code for the Kingdom Nashville 2016", 
    "project_description": "(Kasey Smith answering)\nTeam\nKasey Smith\nWayne Birch\nMatthew the Amazing\nInspiration\nMy love for science and Creation science.\nWhat it does\nGives brief answers to challenging questions, and references to where to find more information.\nHow I built it\nSublime editor\nChallenges I ran into\nVisual layout.\nAccomplishments that I'm proud of\nThat I was able to get this all done in time.\nWhat I learned\nI learned a lot about CSS and HTML and that kind of programming.\nWhat's next for Apologetics App\nMore home content and videos.", 
    "project_name": "Apologetics App", 
    "project_tags": [
      "html", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/apologetics-app"
  }, 
  {
    "hackathon_name": "Hack the Holidays", 
    "project_description": "Inspiration\nWe had LEDs, it's Christmas.\nWhat it does\nIt visualises votes on a poll, by colour, across a load of LEDs wrapped around a tree.\nHow we built it\nServer is built with Node.JS, which exposes a REST API using Express and also sends real-time data to the clients via Socket.IO. The server talks to an MQTT server, which a little ESP8266 microcontroller (running some C++ witchcraft) receives, and sends the data out to the LEDs.\nChallenges we ran into\n\nScaling a number of voters between 1-infinity between 50 LEDs, until we found a nice shiny library to do everything for us\nGetting the ESP to not crash\n## Accomplishments that we're proud of\nIt works, and seems to perform well\n## What we learned\nDeveloped skills with talking to MQTT\nWe played with AWS\nThat sleep is required to write good code\n## What's next for Sherry the tree\nGet a bigger tree and more LEDs, stick it in the middle of a roundabout during the next election.", 
    "project_name": "Sherry the tree", 
    "project_tags": [
      "node.js", 
      "express.js", 
      "html", 
      "css", 
      "javascript", 
      "c++", 
      "socket.io", 
      "handlebars.js"
    ], 
    "project_url": "https://devpost.com/software/sherry-the-tree"
  }, 
  {
    "hackathon_name": "Hack the Holidays", 
    "project_description": "Inspiration\nLost in the jungle of social media, the few remaining cheerful voices are drowned in the horrors of modern society.   We wanted a way to be able to identify who was left in the defence against the war against Christmas.  This is why we created Festive O Meter.\nWhat it does\nBased on any Twitter handle, it analyses their tweets, and brings back a percentage of their Christmas spirit.  A map displaying festive hotspots is also showed on the webpage.\nHow we built it\nUsing the Twitter API and our own sentiment analysis engine we found a way to judge someone on how festive they are.  Then, we built an angular based frontend which interfaces with our REST API endpoints and Google Maps API.   \nWe emulated the Hack The Holidays design scheme and incorporated this graphical design amongst our final products.  With this rengineering of scalable and globalised Twitter data we put context into an otherwise abstract dataset using Web 2.0, without boiling the ocean.\nBy being both time, and space efficient, we allowed for maximum productivity with frequent localised on site scrum meetings with the product owner collective.\nChallenges we ran into\nHad to submit to devpost 3 hours before deadline.\nLead designer learnt design.\nTaught algorithm developer JS \nAccomplishments that we're proud of\nLead designer learnt design.\nTaught algorithm developer JS \nWhat we learned\nDesign, and Javascript.\nProducing performant scalable software.", 
    "project_name": "Festive O Meter", 
    "project_tags": [
      "javascript", 
      "mongodb", 
      "twitter", 
      "google-maps", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/festive-o-meter"
  }, 
  {
    "hackathon_name": "Hack the Holidays", 
    "project_description": "Inspiration\n-> Wanted to make something, anything with webgl \n-> Originally based around old games such as Doom\nWhat it does\n-> Renders a map in the style of an old ray-casted game but with hardware acceleration in the browser\n-> Allows for movement around the game world using two mobile devices\nHow we built it\n-> With the webgl graphics rendering pipeline\n-> twgl.js to wrap tedious functionality (compiling shader programs, creating a context, managing some uniforms)\n-> javascript to script the game\nChallenges we ran into\n-> webgl is frustrating (especially for us 'gl noobs)\n-> \nAccomplishments that we're proud of\n-> getting anything rendered in the first place \n-> \nWhat we learned\n-> Don't use webgl for 24hr hackathons?\n-> Don't be too ambitious!\nWhat's next for deranged penguins?\n-> Perhaps not the penguins but we may build further on the level rendering technique", 
    "project_name": "deranged penguins?", 
    "project_tags": [
      "javascript", 
      "html"
    ], 
    "project_url": "https://devpost.com/software/hacktheholidaything"
  }, 
  {
    "hackathon_name": "Hack the Holidays", 
    "project_description": "Inspiration starwars\nWhat it does: leap motion VR spaceship gsme\nHow we built it: Unity 3D\nChallenges we ran into: oculus wouldn't work, github was a pain\nAccomplishments that we're proud of: Playing the game for the first time, seeing it work and work well\nWhat we learned: oculus, leap motion, unity 3d\nWhat's next for Forcemas continue to develp as open source fun project on github", 
    "project_name": "Forcemas", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/forcemas"
  }, 
  {
    "hackathon_name": "Hack the Holidays", 
    "project_description": "The story.", 
    "project_name": "wisp", 
    "project_tags": [
      "javascript", 
      "node.js", 
      "sails.js"
    ], 
    "project_url": "https://devpost.com/software/wisp-r5sedb"
  }, 
  {
    "hackathon_name": "Hack the Holidays", 
    "project_description": "Inspiration\nCreating a game in a short amount of time ideas from somes games as super mario or speedrunners\nWhat it does\nit's a 2 players platform games where the goal is to escape the dragon and to go to the flag before the other player \nHow I built it\nbuild in XNA (C#)\nChallenges I ran into\nphysics and gravity managment \nAccomplishments that I'm proud of\nphysics and gravity managment and side scrolling \nWhat I learned\nphysics gravity and side scrolling \nWhat's next for Plateform Game\ndifficulties (sidescrolling speed change and other mode as split screen or infinite mode)", 
    "project_name": "Plateform Game", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/plateform-game"
  }, 
  {
    "hackathon_name": "Hack the Holidays", 
    "project_description": "peterdrop\nAirDrop that does work. Transfer photos wirelessly from your mobile to your Computer as easy as possible.\nThe main problem was that when we try to transfer a photo from our mobile phone to our mac, it's so frustrating. That's because AirDrop 1 out of 5 times works great and the other 4 does not detect the other device (the one you want to send the files).\nSo then we built our own, one that within an app you choose your photos from your mobile phone and then the device itself detects the computers you have at the same network and then you choose where you want to send it and it saves directly into the folder you have set.", 
    "project_name": "PeterDrop", 
    "project_tags": [
      "java", 
      "javascript", 
      "css", 
      "html", 
      "apache", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/peterdrop"
  }, 
  {
    "hackathon_name": "Hack the Holidays", 
    "project_description": "Soon Christmas is here, and what better than a game to play with friends and family.\nThis Christmas you take Santa's job and decide to deliver presents yourself. You run from roof to roof dropping presents through people's chimneys. Look out for obstacles.\nWe built it using PyGame in Python using Visual Studio Code and Photoshop.\nDetecting collision detection took longer than what we anticipated.\nWe've managed to make a fully functional game in under 24 hours.\nWe had to play around with sprites and implement collision detection.\nNext for Santa Claus Job we will have bonus points, lives and shields which will protect you against some obstacles.", 
    "project_name": "Santa Claus Job", 
    "project_tags": [
      "python", 
      "pygame"
    ], 
    "project_url": "https://devpost.com/software/santa-claus-job"
  }, 
  {
    "hackathon_name": "Hack the Holidays", 
    "project_description": "Inspiration\nAfter a difficult week at school, we realised that it is necessary to stay organised - and what better way to do that other than an app. This way, we can access our tasks around the globe, whether we're on holiday or we've simply forgotten our bags. Later, we realised this app can be used by more than just school children, so we removed the school theme by not using words such as \"subject\" for the tags.\nWhat it does\nTodio is a todo list which stores your tasks and adds tags to them, and then displays the tags. It allows for adding descriptions to the tasks too.\nHow we built it\nWe used css for the style of the webpage, then we used javascript for the client-side scripting along with the jquery plugin for increased functionality. We used AJAX to talk to the server whilst remaining on the same webpage allowing for data to be loaded on demand and the page to be more dynamic. Html was used to create the website itself.\nChallenges we ran into\nOur first challenge was the login, as we attempted to use Google's login API. Though this was guaranteed as secure, it did not work and we later realised we would have to code the login in php. To prevent a compromise on security, this took a rather long amount of time, and we faced many bugs too, so before we knew it, it was past midnight and all we really had was a login. Time management is a target for the future.\nAnother challenge was that one team member did not have a pc to work from, so our productivity was minimised (by 33%), which will change next time for sure.\nAccomplishments that we're proud of\nWe managed to create a prototype of our core idea and created a basic UI. Though none of had special expertise in any particular language, or any experience with hackathons, we worked under the pressure and produced a product, though substandard. \nWhat we learned\nAlongside actual programming knowledge, such as MySQL, we have learnt many skills that will help us to improve our programming experience and maybe even to perform better at a future hackathon. This includes planning the amount of time we dedicate to each task, by producing a Gantt chart for example. We will also plan the UI in more detail, as the choosing of colours took an unnecessary amount of time, as did choosing the layout. \nWhat's next for Todio\nWe have many ideas for improving our current product as it did not reach the level of completion we initially hoped for. The most important next step is including a calendar function, as this was the basis for a lot of the app. Then, we plan to improve the UI, making it more accessible not only to the average user but to those who are less able, for example a setting for the visually impaired or colour changes for the colour blind. A further stretch would be allowing for a link to other file services, such a dropbox, allowing people to work on their tasks wherever in the world they are. \nLast but definitely not least, a working Google login will be an aim for the future, as well as working logins from other popular OpenID Providers.", 
    "project_name": "Todio", 
    "project_tags": [
      "html5", 
      "css3", 
      "php5", 
      "javascript", 
      "jquery", 
      "ajax"
    ], 
    "project_url": "https://devpost.com/software/todio"
  }, 
  {
    "hackathon_name": "Hack the Holidays", 
    "project_description": "Inspiration\nReading is hard, my hack saves precious seconds by condensing all the \"information\"from twitter into gifs", 
    "project_name": "CmonDevpostPleaseDontmakeMeThinkOfAName", 
    "project_tags": [
      "python", 
      "flask", 
      "html", 
      "css", 
      "bootstrap"
    ], 
    "project_url": "https://devpost.com/software/cmondevpostpleasedontmakemethinkofaname"
  }, 
  {
    "hackathon_name": "Hack the Holidays", 
    "project_description": "No of us knew Java...some of us still don't BUT we have a working hack!\nWe can generate a lat/lon of a Android device's location based on discrete GSM data harvested.", 
    "project_name": "GSM Hack", 
    "project_tags": [
      "php", 
      "java", 
      "android"
    ], 
    "project_url": "https://devpost.com/software/gsm-hack"
  }, 
  {
    "hackathon_name": "Hack the Holidays", 
    "project_description": "Inspiration\nWhen we arrived we had no idea what we are going to build and half an hour into Hack the Holidays we still had no idea. So we pulled random and weird ideas out of our heads until we came up with: Hackindr - Tinder for Hackathon Ideas! However, this idea was quickly sidelined by the arrival of the MLH hardware lab and the realisation that I had bought my Passport. The next few hours were spent renting out a selection of hardware, from Oculus Rifts to Leap Motions, and we quickly came up with the idea of a virtual keyboard that allowed you to type in midair using the Leap Motion. But we had little success with tracking individual fingers with enough accuracy so we attempted to use the Thalmic Myo to create a morse code keyboard but we also ran into problems. So, driven by our aim to actually finish a hack within 24 hours we returned to Hackindr.\nWhat it does\nHackindr is a mobile and web app that allows users to like or dislike random hackathon ideas, see the top ten ideas and submit their own.\nHow we built it\nFirstly, we built a REST API using Python, Flask and Postgres which was deployed on Heroku. We then connected this to our native Android app written into Java. We then built a web interface, originally using Angular, but ended up being built in Node.js and Express.js and hosted on Heroku. Finally, we also began to work on an iOS version using Swift.\nChallenges we ran into\nAfter encountering problems with Thalmic Myo and Leap Motion we were hoping for Hackindr to relatively problem free, however, this was not the case. Our first major problem was when the backend suddenly stopped accepting valid usernames and passwords which was solved by turning it off and on again. Our next problem was trying to figure out how to make HTTP requests in Swift which was eventually solved. Additionally, we encountered a nearly infinite series of NullPointerExceptions in Android app which were mostly caused by ourselves accidently deleting lines in our sleep deprived haze.\nAccomplishments that we're proud of\nOverall, we are really impressed by the fact we actually finished our hack with the web and android versions working before 9am.", 
    "project_name": "Hackindr", 
    "project_tags": [
      "python", 
      "flask", 
      "postgresql", 
      "java", 
      "android", 
      "android-studio", 
      "node.js", 
      "express.js", 
      "git", 
      "github", 
      "heroku"
    ], 
    "project_url": "https://devpost.com/software/hackindr"
  }, 
  {
    "hackathon_name": "Hack the Holidays", 
    "project_description": "My Inspiration came from gardening , where I realise , plants are not connected to the Internet of things.\nThis Prototype, is able to provide user with soil moisture reading, Temperate / Humidity sensor reading .At the current time am working on so the device is connected to the Internet via Azure mobile services, hence allowing user to see how well their plant is doing, in addition the plant pot can send push notification to your device alerting user if it requires attention.\nThis Prototype was build using Arduino Uno , DHT22 Humidity sensor , OLED Display and Soil moisture sensor.\nThe challenges I ran into , being dyslexic meant I had to re-read three or four times a same webpage with additional information. so it was slow process , still not able to fix the Arduino Ethernet shield IP address issue. but I do have another 3 hours to go so anything can happen.\nAccomplishments that I'm proud of\nThe accomplishment I am proud of is that I learnt how to use the sensor with Arduino , and in doing so I also learnt how to use Microsoft Azure mobile services. \nWhat's next for iPot (The Intelligence Plant Pot)\nThe future is full of unlimited possibilities for this type of device , plan is to add a basic A.I ability, if the IP issue is not fix within the next three hours , then to find a fix for this and make it easier for other user to be able to fix this bug with Arduino.", 
    "project_name": "iPot", 
    "project_tags": [
      "c#", 
      "asp.net"
    ], 
    "project_url": "https://devpost.com/software/ipot-the-intelligence-plant-pot"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration\nWe wanted to see how data and information is spread on the internet and how you can find out new ways of manipulating this spread and maybe not get affected by it.\nWhat it does\nIt displays how information is spread on the internet and how links/informations is linked between each other.From there you can see what domains are referenced by each other and who has the biggest influence.\nHow I built it\nWe built it using php, python and gource for visualising the data.\nChallenges I ran into\nWe had some problems with the implementation of the shortest path between two URLs as there was a big amount of BackLinks which had to be taken into consideration. At the moment this process runs smooth as long as you have a modest amount of nodes between the links. This could be improved by building the dataset using C++ and buying a better computer.\nAccomplishments that I'm proud of\nWe managed to make a significant and trust full visualisation of how one piece of information surfs over the internet and influences our lives even if we do not realise this. We can also use these data to find out about other webpages that referenced the main URLs.\nWhat I learned\nI have learned a lot about crawling and about how big the internet is. The main lesson was why algorithms have to be efficient. THE INTERNET IS HUGE!!!\nWhat's next for LinkTracker\nWe might have to improve the efficiency of our shortest path tree algorithm and rewrite some of our function. Create a powerful front-end.", 
    "project_name": "LinkTracker", 
    "project_tags": [
      "php", 
      "python", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/linktracker"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration:SAfety is the best word to discribe it!\nWhat it does:Shows your location and directions to your custom location where you want to arrive.Also,will send a text message to a phone number when reaching that location.\nHow I built it:Using telerik UI for adapting javascript in a Android app.\nChallenges I ran into:Making my team work...\nAccomplishments that I'm proud of EVERYTHING!\nWhat I learned\nWhat's next for SafeDrive", 
    "project_name": "SafeDrive", 
    "project_tags": [
      "javascript", 
      "html", 
      "telerik", 
      "google-directions", 
      "twilio", 
      "google-maps"
    ], 
    "project_url": "https://devpost.com/software/safedrive-ails80"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration\nUsing iMessage when drunk\nWhat it does\nCompletely misrepresents you\nHow I built it\nNot very well\nChallenges I ran into\nAlmost everything\nAccomplishments that I'm proud of\nAlmost nothing\nWhat I learned\nThe meaning of sleep deprivation\nWhat's next for Misconstrue\nComplete abandonment", 
    "project_name": "Misconstrue", 
    "project_tags": [
      "java", 
      "javascript", 
      "meteor.js", 
      "ibm-watson"
    ], 
    "project_url": "https://devpost.com/software/misconstrue"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration :\nThe Majestic API is a very powerful tool for providing data,so i decided to use it in a proper way.\nWhat it does :\nProvides the user with a graph according to the data from a website,the amount of visitors it had in the last period of time and everything else.\nHow I built it :\nPython and Majestic API\nChallenges I ran into :\nInstalling all the modules for python.\nAccomplishments that I'm proud of :\nDeveloped my Python Engineering Skills even more\nWhat I learned How to use pip and other modules\nWhat's next for Linear Graph /w Majestic API :\nNothing unfortunately,it was just a hackaton project,but the API may be developed in more tools featuring web development.", 
    "project_name": "Linear Graph /w Majestic API", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/linear-graph-w-majestic-api"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "We decided to make a 3D dungeon crawler in Java using our own openGL engine to explore wikipedia...", 
    "project_name": "WikiCrawler", 
    "project_tags": [
      "java", 
      "glsl", 
      "opengl", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/astonhack-2015"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration\nThought of the pun \"Tweat\" of the word \"Tweet\" and thought of Twitter user data visualisation using an Agar.IO like game environment.\nWhat it does\nPlayers are represented as 'blobs', these blobs have a size proportional to the influence of a Twitter user. When one user tweets another in the game they will being travelling towards them. When a user sends a tweet they grow in size. When a player encapsulated another it gains the others influence.\nHow I built it\nTwitter as a backend, Java as a back/frontend.\nChallenges I ran into\nTwitter API usage limitations, rather obscure bugs.\nAccomplishments that I'm proud of\nGraphics.\nWhat I learned\nThe value of planning and scrum meetings.\nWhat's next for TwEAT\nOpen source on GitHub (as soon as we remove API keys...)", 
    "project_name": "TwEAT", 
    "project_tags": [
      "java", 
      "twitter"
    ], 
    "project_url": "https://devpost.com/software/tweat"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration\nSomething fun and different\nWhat it does\nWill answer any one of your questions\nHow I built it\nAndroid Studio\nChallenges I ran into\nAccomplishments that I'm proud of\nWriting the app in 4 hours\nWhat I learned\nHow to use a hybrid frame work to push apps onto two platforms \nWhat's next for Gnome Child\nTo rule the world?", 
    "project_name": "Gnome Child", 
    "project_tags": [
      "android"
    ], 
    "project_url": "https://devpost.com/software/gnome-child-u8gxf7"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration\nWhat it does\nHow I built it\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for game", 
    "project_name": "game", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/game-df5k1h"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration\nInspired by the TV show Pointless, and the Topic feature of the Majestic API - as it uses Majestic and Pointless but there is no easy way to combine these names I called it M'pointless.\nWhat it does\nIt's a multiplayer browser-based game where you play a (funky type of) Pointless game, but rather than generic concepts as in the TV show, it uses web topics and domain names.\nOut of many players in the game, one is chosen as a contestant, the rest are the audience. Everyone is given a specific topic (eg. Video Games) and the audience must all submit one or more websites which they think are related to the given topic. After the round ends (after 30 seconds), the contestant must then choose a website themselves, and the aim is to pick the website which was chosen least by the audience (such as by picking a very obscure website) while still being related to the topic.\nM'pointless uses the Majestic API to judge whether a given website is related to the topic,\nHow I built it\nI started off not sure what to build, so I wrote an events system which allows the JS frontend to talk to the Bottle back-end through Ajax calls. After I wrote this, I needed to decide what to actually make that was multiplayer and web-based, so I brainstormed various game ideas until I came to TV shows, and realised that Pointless works well as it has a large audience.\nChallenges I ran into\nThe JSON payload of each Ajax call is quite a lot if it's being sent to >100 people at once so I needed to find a way to condense all of the information in each event into as little space as possible.\nAs I didn't spend a lot of time structuring the project at the start, all of the client-side logic is one ugly JavaScript file, so maintaining it toward the end of the project wasn't easy!\nFinally the Majestic API was very information-dense and returned a lot of numbers so I wrote my own Python wrapper around Majestic's Python wrapper around their own web API, to allow the server code to at least be a little bit maintainable\nAccomplishments that I'm proud of\nLiterally the only frameworks I've used are Bottle on the backend and jQuery/Bootstrap on the front-end  - everything else is done from scratch!\nWhat I learned\nBasically had to learn Ajax from scratch as I've never used it before, and also got to know some of the more detailed intricacies of routing in the Bottle framework\nWhat's next for M'pointless\nMake the website look nicer! :D\nTry it out!\nTry it out at http://tomgalvin.uk/", 
    "project_name": "M'pointless", 
    "project_tags": [
      "bottle", 
      "python", 
      "javascript", 
      "html5"
    ], 
    "project_url": "https://devpost.com/software/m-pointless"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Hashtag Trending Internet\nA tool which tries to visualize the dynamic structure of the internet based on trending twitter tags. Using Majestic API and data the tool finds websites related to trending twitter tags and visualize new backlinks added to the site during the trending time frame of the tag.", 
    "project_name": "#TrendingInternet", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/uob_f4-8fqh4x"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration\nI wanted to learn a little about the majestic API and visualizing data. \nWhat it does\nPresents the majestic API data in a readable and usable format.\nHow I built it\nThe project was built with python\nChallenges I ran into\nMany challanges....\nAccomplishments that I'm proud of\nI still managed to complete something, event though my original plan failed\nWhat I learned\nI learned about visualizing data\nWhat's next for DataSquared\nmake it look better and cleaner", 
    "project_name": "DataSquared", 
    "project_tags": [
      "python"
    ], 
    "project_url": "https://devpost.com/software/datasquared"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration\nAfter watching a fellow hacker using Pusher for a cool real-time application, it inspired us to create a football game, allowing users to use their smartphones as virtual controllers to control an individual football player.\nWhat it does\nWhen connected to the URL, the system will detect whether you are using a smartphone or a computer to connect to it. If you are connecting using a smartphone, It will redirect you to a \"controller\" page which has a virtual joystick and a \"Kick\" button. The computer will be redirected to the game display where the actual game will be shown as the users control the players with their phones.\nHow I built it\nWe had built the entire system using a mix of JavaScript and css, whilst using the Pusher API. The controller and game scene were built in JavaScript whereas the website layout is in css.\nChallenges I ran into\nWe had problems coming to terms with how to integrate Pusher into our system as it was a completely new API for us to learn. We had all also lost a bit of proficiency when it came to JavaScript, so we had to brush up on our skills!\nAccomplishments that I'm proud of\nAs a whole team, we were able to overcome the daunting Pusher API and made a very impressive game (at least in my opinion ;) ). Also, I and my team had amazing teamwork as we worked to each other's strengths and helped each other out when we could.\nWhat I learned\nI had learned how to use the Pusher API to create a JavaScript game.\nWhat's next for AstonBall\nWho know's what the future holds? ;)", 
    "project_name": "AstonBall", 
    "project_tags": [
      "javascript", 
      "css", 
      "pusher"
    ], 
    "project_url": "https://devpost.com/software/astonball"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration\nWe are aiming to use Majestic API to extract information regarding the popularity of websites and display them through a 2D game, as a result the users can interact with the data in real-time. Making the information more fun to encapsulate.\nThe whole project is written in C#. It is divided into 2 phases: the extraction phase, which uses the Majestic API to get a websites' back-links, ref-domains and trust-flow, calculating a popularity rating for each site. While the second \nChallenges I ran into\nThe challenges the team face was to fight fatigue at night-time \nAccomplishments that I'm proud of work in a team that deliver a complete project\nWhat I learned\nteam work plays a major part in accomplishing a project", 
    "project_name": "Game Your Data", 
    "project_tags": [
      "c#"
    ], 
    "project_url": "https://devpost.com/software/game-your-data"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "It's a fun thing using Majestic and socket.io where you bid on companies", 
    "project_name": "FinancialCrashAdministrativeTakeoverSimulator15MMORPG", 
    "project_tags": [
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/financialcrashadministrativetakeoversimulator15mmorpg"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "We were working on the project \"Gamification\", created by \"Severn trent\"\nInspiration\nWe as a team were inspired to come up with an interesting educational and entertaining idea for this so important problem that should be given more attention.\nWhat it does\nIt is a location-based game app. The player will have an office in the centre of the map and some randomly generated leakages will appear in the area. Then the player will have to send their plumbers to fix the problem. There are mainly 3 types of plumbers: normal, quick, efficient. The bigger leakages are be fixed only if you have certain tools. A really important thing to mention is that the player will also be given the opportunity to win big prizes and bonuses in game, whenever they report a real leakages. \nHow I built it\nFor my first time, I was mostly focusing on the front-end. Helped develop the login, options, register, loading forms. My main focus was the user friendly interface to engage people into playing more and more. I enjoyed writing C# in Unity in a really fun way.\nChallenges I ran into\nI ran into challanges mostly in the begining, when I had to watch loads of tutorials about using the Unity's API and that of C# as well. It was hard for me to build the location based map, but finally managed to take the Google Maps api working on our app.\nAccomplishments that I'm proud of\nI am proud of the work me and my team have put into this project. I really enjoyed the idea and mostly enjoyed its implementation.\nWhat I learned\nI have learned new languages and more about the Unity game engine. I am also planning to create my own mini projects in the future as well.\nWhat's next for Fix My Link\nIf the app is approved I would like to have it go to the next level. For example, multiple minigames between players. real time reports, interesting communication system, more and more upgrades and tools.", 
    "project_name": "Fix My Link", 
    "project_tags": [
      "c#", 
      "php", 
      "unity"
    ], 
    "project_url": "https://devpost.com/software/fix-my-link"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration\nWe wanted to make an amazing product, more accessible to people not familiar with it.\nWhat it does\nGraphical representation of data acquired from the majestic api and sourcing it to gather interesting information regarding a user's site.\nHow I built it\nWe used php back-end to collect, store and manage data which we implemented in our web service using JavaScript.\nChallenges I ran into\nWe created our own graphical representations which were time consuming, but provided us with the flexibility that we needed for implementation.\nAccomplishments that I'm proud of\nWe have a program called Stitches that collects screenshots of the linked sites from the url entered, and creates a interesting collage of all the screenshots.\nWhat I learned\nWe learnt cross-platform collaboration which is beneficial to our skill sets and something that we could use for implementation in future hackathons/projects. \nWhat's next for OperationRedBrick\nSleep, but after that we are thinking of expanding the capabilities of our system to reach our vision that we had in the beginning.", 
    "project_name": "OperationRedBrick", 
    "project_tags": [
      "javascript", 
      "php", 
      "html5", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/operationredbrick"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration\nWhat it does\nDashboard for customer feedback\nHow I built it\nNode.js, Express.js, MEAN, etc.", 
    "project_name": "Severn Trent Water Custom Support Web App", 
    "project_tags": [
      "node.js", 
      "express.js", 
      "jquery", 
      "angular.js", 
      "bootstrap", 
      "font-awesome", 
      "google-fonts", 
      "twilio", 
      "google-maps", 
      "html5"
    ], 
    "project_url": "https://devpost.com/software/severn-trent-water-custom-support-web-app"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration\nWhat it does\nAllows users to submit pictures of potential leaks they identify and earn points for, weekly highscores with prizes.", 
    "project_name": "SevernTrent Fixit", 
    "project_tags": [
      "unity", 
      "c#", 
      "google-maps"
    ], 
    "project_url": "https://devpost.com/software/severntrent-fixit"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "The challenge was given us by Severn Trent and we took this challenge.", 
    "project_name": "Severn Trent Water Report Forum", 
    "project_tags": [
      "javascript", 
      "html5", 
      "css", 
      "jquery", 
      "php", 
      "mysql", 
      "bootstrap"
    ], 
    "project_url": "https://devpost.com/software/severn-trent-water-report-forum"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "", 
    "project_name": "OpenTeach", 
    "project_tags": [
      "node.js", 
      "socket.io", 
      "google-maps", 
      "express.js", 
      "postgresql"
    ], 
    "project_url": "https://devpost.com/software/openteach"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "FighttheWeb\nNO time", 
    "project_name": "FighttheWeb", 
    "project_tags": [
      "c#", 
      "unity"
    ], 
    "project_url": "https://devpost.com/software/fighttheweb"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration\nInspiration came from Cookie clicker game and Severn Trent company itself\nWhat it does\nGamifies user experience, saves money\nHow I built it\nWe have decided not to use Agile since we work next to each other\nChallenges I ran into\nMaking all components work together. \nAccomplishments that I'm proud of\n80 percent of features we planned are working\nWhat I learned\nAlikhan : Angular.Js\nBrandon : He needs sleep\nCallum : Server side on Flask and Python\nWhat's next for Severn Trent\nImproving code, adding features such as deleting adding records etc", 
    "project_name": "Severn Trent", 
    "project_tags": [
      "javascript", 
      "angular.js", 
      "python", 
      "flask", 
      "swift"
    ], 
    "project_url": "https://devpost.com/software/severn-trent"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "My dad said he wanted an easy way of remembering loved ones after they pass away and a cheeper alturnative to burrying/cremating someone\nit allows custom grave plots for family members to veiw and walk around there graves and other peoples public graves\nwe made it using putty and filezilla \nwe had a great time i learnt alot about making a website", 
    "project_name": "GraveSite", 
    "project_tags": [
      "php", 
      "css", 
      "javascript", 
      "html5"
    ], 
    "project_url": "https://devpost.com/software/gravesite"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration\nWe were fed up with how slow email clients are at searching through emails, especially when you have thousands in your inbox. There were no alternatives that we are aware of, so we decided to make our own!\nWhat it does\nYou can bring up a command palette to quickly perform functions on your emails. For example, to search for every email that contains the phrase \"twitter\", in the subject, sender, or body, case sensitive or not.\nHow we built it\nSublime Text, Atom, Node.JS, Electron, jQuery, HTML and CSS.\nChallenges we ran into\nIMAP is a right pain. Especially in javascript! Some inboxes still don't even work, and some stop half way through, for some unknown reason that we will fix in the future.\nWhat's next for Email CMD\nAdding multiple accounts, OAuth login, sending emails (no time to add this! :c), draggable panes, etc.", 
    "project_name": "Email CMD", 
    "project_tags": [
      "javascript", 
      "html", 
      "css", 
      "jquery", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/email-cmd"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "", 
    "project_name": "Severn Trent Water Testing Robot Technology", 
    "project_tags": [
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/severn-trent-water-testing-robot-technology-zo1wem"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration\nBetter communication with customers\nReducing water consumption\nHelping provide uninterrupted water supply (identify pipelines and infrastructure)\nWhat it does\nUsers\nHunt manholes, gain points, rank up, get discounts/vouchers/swag\nHow we built it\nIn android studio, using Java, with difficulty\nChallenges we ran into\nLeaning something new.\nSetting up android on 3 devices (a little time consuming)\nWorking out how to use GitHub, connecting Android Studio to GitHub, trying to pull... respositories.  Trying to make and push commits.\nLearning how to create an android app in a short time frame with no previous experience.\nAccomplishments that we're proud of\nActually getting a working app with a wide variety of functions, including \nWhat we learned\nWhat's next for Water Reporter", 
    "project_name": "Water Reporter", 
    "project_tags": [
      "java", 
      "android-studio"
    ], 
    "project_url": "https://devpost.com/software/water-reporter"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration\nThe difficulties that there are from building on top of an archaic water system.\nWhat it does\nSurveys the water system by allowing you to analyse the time take for the beacons to reach different points across the network.\nHow I built it\nUsing A mixture of cheap Arduino Hardware and A simple Python API.\nChallenges I ran into\nCommunication between the front-end and back-end system was not possible to achieve in the time frame.\nAccomplishments that I'm proud of\nThe design suits that of Severn Trent water and everything is as simple as possibly can be.\nWhat I learned\nSometimes it is best to drop a lot of useful features in the pursuit of something that works.\nWhat's next for SevernTrentWater\nScaling up and finishing the interface to make the entire system simply work.", 
    "project_name": "SevernTrentWater", 
    "project_tags": [
      "python", 
      "flask", 
      "arduino"
    ], 
    "project_url": "https://devpost.com/software/severntrentwater"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration\nCapgemini Data visualisation Challenge\nWhat it does\nDisplays Data Visually to allow people and interpret data in manner that is more precise and easier to see. \nHow I built it\nUsing Bluemix , VSJS and JSON\nChallenges I ran into\nChallenges were great, firstly I\u2019m overly new to javascript as a consequence it was a steep learning curve to be able to manage it into 24 hours.  \nAccomplishments that I'm proud of\nThat i was able to write a program as efficiently as possible in a language that i wasn\u2019t overly familiar with. \nWhat I learned\nBluemix , VSJS and JSON, \nWhat's next for Warcraft\nPossibilities could be to allow users to add and edit nodes something which further enhance use of data manipulation. Colour variations could it vibrancy and help clients distinguish vast number of nodes more precisely and efficiently.", 
    "project_name": "Warcraft", 
    "project_tags": [
      "d3.js"
    ], 
    "project_url": "https://devpost.com/software/warcraft"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "", 
    "project_name": "Severn Trent Water Testing Robot Technology", 
    "project_tags": [
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/severn-trent-water-testing-robot-technology-zo1wem"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration\nBetter communication with customers\nReducing water consumption\nHelping provide uninterrupted water supply (identify pipelines and infrastructure)\nWhat it does\nUsers\nHunt manholes, gain points, rank up, get discounts/vouchers/swag\nHow we built it\nIn android studio, using Java, with difficulty\nChallenges we ran into\nLeaning something new.\nSetting up android on 3 devices (a little time consuming)\nWorking out how to use GitHub, connecting Android Studio to GitHub, trying to pull... respositories.  Trying to make and push commits.\nLearning how to create an android app in a short time frame with no previous experience.\nAccomplishments that we're proud of\nActually getting a working app with a wide variety of functions, including \nWhat we learned\nWhat's next for Water Reporter", 
    "project_name": "Water Reporter", 
    "project_tags": [
      "java", 
      "android-studio"
    ], 
    "project_url": "https://devpost.com/software/water-reporter"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration\nThe difficulties that there are from building on top of an archaic water system.\nWhat it does\nSurveys the water system by allowing you to analyse the time take for the beacons to reach different points across the network.\nHow I built it\nUsing A mixture of cheap Arduino Hardware and A simple Python API.\nChallenges I ran into\nCommunication between the front-end and back-end system was not possible to achieve in the time frame.\nAccomplishments that I'm proud of\nThe design suits that of Severn Trent water and everything is as simple as possibly can be.\nWhat I learned\nSometimes it is best to drop a lot of useful features in the pursuit of something that works.\nWhat's next for SevernTrentWater\nScaling up and finishing the interface to make the entire system simply work.", 
    "project_name": "SevernTrentWater", 
    "project_tags": [
      "python", 
      "flask", 
      "arduino"
    ], 
    "project_url": "https://devpost.com/software/severntrentwater"
  }, 
  {
    "hackathon_name": "AstonHack", 
    "project_description": "Inspiration\nCapgemini Data visualisation Challenge\nWhat it does\nDisplays Data Visually to allow people and interpret data in manner that is more precise and easier to see. \nHow I built it\nUsing Bluemix , VSJS and JSON\nChallenges I ran into\nChallenges were great, firstly I\u2019m overly new to javascript as a consequence it was a steep learning curve to be able to manage it into 24 hours.  \nAccomplishments that I'm proud of\nThat i was able to write a program as efficiently as possible in a language that i wasn\u2019t overly familiar with. \nWhat I learned\nBluemix , VSJS and JSON, \nWhat's next for Warcraft\nPossibilities could be to allow users to add and edit nodes something which further enhance use of data manipulation. Colour variations could it vibrancy and help clients distinguish vast number of nodes more precisely and efficiently.", 
    "project_name": "Warcraft", 
    "project_tags": [
      "d3.js"
    ], 
    "project_url": "https://devpost.com/software/warcraft"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "", 
    "project_name": "Frist Time Air 9-1-1", 
    "project_tags": [
      "android"
    ], 
    "project_url": "https://devpost.com/software/frist-time-air-9-1-1"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "Inspiration\nOur attempt to build a calendar feed with personalised disruption services has mostly failed due to lack of structured data.\nWhat it does\nIt is a demonstration of what disruption data feeds can look like with no complicated steps on the side of the data providers. Also a visualisation that can be built with ease using our purposed structure.\nHow I built it\nChallenges I ran into\nMaking good use of disruption data feeds, as the important bits of the data is not structured.\nAccomplishments that I'm proud of\nWe are building a demonstration of what can be done and attempting to convince the relevant people to adopt this new data structure, which will save months for many companies attempting to use this data.\nWhat I learned\nOpen data is the first step towards useful things. The next step is to make this data structured and easily accessible. Our vision goes beyond disruption in rail services, we want to fix rail open data, one feed at the time.\nWhat's next for Disruption Feeds\nMoving to other open data feeds which are too hard to use, and make them actually useful, not just available.", 
    "project_name": "Disruption Feeds", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/disruption-feeds"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "Home Page - Journey\nhttps://richard140.typeform.com/to/OtqNeS\nInspiration\nOver 80% of customers search for Train Tickets and EXIT on the search results and also to  attract 87% of customers buying tickets at Train stations. \nWhat it does\nPutting the human touch back to ticket purchasing experience.   \nHow I built it\nHTML5, Single page Web application, Responsive Web Design, Intelligent back end with personalised recommendation \nChallenges I ran into\nJavaScript issues & slow API connectivity. \nAccomplishments that I'm proud of\nWe built the solution by addressing the problem.  \nWhat I learned\nRail Travel can be Simplified and there is a lot more room for Improvement. And Let's Do IT.  \nWhat's next for JOURNEY\nDisplay useful information about overcrowded trains from statistics on Tickets results page, even before user actually Buy their Train Tickets. \nAttract new customers with Cheapest/Flexible Tickets by up-selling Rail-cards on Search Results and encouraging  customers to Buy Rail-cards  and get discounted tickets where applicable.", 
    "project_name": "JOURNEY", 
    "project_tags": [
      "python", 
      "javascript", 
      "html5", 
      "silverrail-journey-planner"
    ], 
    "project_url": "https://devpost.com/software/journey-s6qmni"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "== README\nThis README would normally document whatever steps are necessary to get the\napplication up and running.\nThings you may want to cover:\n\nRuby version\nSystem dependencies\nConfiguration\nDatabase creation\nDatabase initialization\nHow to run the test suite\nServices (job queues, cache servers, search engines, etc.)\nDeployment instructions\n...\n\nPlease feel free to use a different markup language if you do not plan to run\nrake doc:app.", 
    "project_name": "Goodthings", 
    "project_tags": [
      "ruby", 
      "html", 
      "javascript", 
      "coffeescript", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/cashtrain-server"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "Inception\nAs the team formed during the #HackTrain2015, our combination of skills and interests led us to tackle the problem of real-time crowd counting and seat availability during train journeys in the UK. Vadim had prior experience working with beacons technology, Nick is already a hackathon war-hero and veteran, Marius is the laser-focused web-dev guy and myself, well, I'm soaking all that we're doing. Be it through business modelling, joining dev talks, searching for resources or APIs or writing our story. \nAs it unravels.\nwaveRoll is a solution to one big pain point from UK's rails industry: counting in real-time the people from each carriage during a journey. Based on this, it can provide business insights for the train operators and it can also tell passengers where there is a high probability that they can get a seat. Before they board.\nHow we built it\nWe actually started having in mind the two elements, the silverrail API capabilities and the iBeacons techology. After quickly sketching up the requirements for a webAPI, talking about microservices, scalability, we thought more in depth about how we might get this in front of company executives and travellers alike.\nGetting into the core of waveRoll, there are a few considerations to be made. First, the analytics system is built around the Apache Kafka high-throughput messaging system, which is designed to efficiently aggregate massive amounts of data; its distributed nature allows capacity to be added simply by allocating nodes. \nFor data at rest, we are using ElasticSearch as our storage engine, which is similarly distributed and resilient. In a massive real-world deployment, we would likely abandon this prototype in favour of a higher performance database such as PostGreSQL\nChallenges\nWho doesn't love random technical incongruences on a Saturday evening during a 60h+ hackathon?\nThe actual JSON that we were receiving from the silverrail API, our beloved sponsor, was in the wrong format. The coordinates were almost unusable, save for a brilliant algorithm furiously typed by Nick, chief-in-hackathon. \nNow, I'm not saying that this was our best accomplishment. The actual greatness was for all 120 of us to be here, building and iterating over ideas. Beginners and artisans alike, contributing towards a palpable progress within an entire industry. In less than 3 days.\nWhat awaits team waveRoll\nAs of now, we're still inching away in developing our beloved creation, making waveRoll robust and focused on solving a single paint point. \nIt's tomorrow when we'll demo it and all the cards will fall into place. For me, it already is a crazy learning experience which I will never forget. My only hope is that someday, I will be able to pass over what I've learned now to someone who, like me today, was given a chance to see product development at its best.", 
    "project_name": "waveRoll", 
    "project_tags": [
      "json", 
      "elasticsearch", 
      "flask", 
      "swift", 
      "silverrail-technologies", 
      "google-maps", 
      "javascript", 
      "html", 
      "css", 
      "jquery", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/waveroll"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "Inspiration\nThe current system does not elegantly handle changes. We want to fix that.", 
    "project_name": "RailAssist", 
    "project_tags": [
      "golang", 
      "objective-c", 
      "swift", 
      "mysql", 
      "redis", 
      "docker", 
      "ibeacon"
    ], 
    "project_url": "https://devpost.com/software/railassist"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "Inspiration\nThe train schedulers currently do not have nearly enough information readily available to make good decisions.\nWhat it does\nHow I built it\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for PlanAroo", 
    "project_name": "PlanAroo", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/planaroo"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "", 
    "project_name": "Traxi", 
    "project_tags": [
      "google-places", 
      "uber", 
      "c#", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/traxi-ewp78u"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "Summary\nOne of the problems that many train operators have been facing is the lack of real-time passenger volume data. Taking into consideration infrastructure and cost constraints, we decided to build a solution that leveraged upon CCTV image feeds to calculate in real-time the level of crowdedness in carriages. \nWe created an image parser using python and opencv. The data output was piped into a postgresql database. A node server was then used to call the data and create a REST API. Finally, we also built an android app that called the API that had been exposed.", 
    "project_name": "Trainlicious", 
    "project_tags": [
      "node.js", 
      "opencv", 
      "python", 
      "android", 
      "bluemix", 
      "heroku", 
      "postgresql"
    ], 
    "project_url": "https://devpost.com/software/trainlicious-mva0je"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "The number one passenger complaint is \"I can't get a seat\", but train operators don't know how many people actually board their trains\nWhen planning, Train Operating Companies need to know:\n    Can we adjust pricing to manage demand?\nIf journeys are full for part of the route, should we run short-haul shuttles?\nWhen booking, Passengers want to know:\nWhich trains are less crowded?\nWhen at the station, Passengers want to know:\n    Will I get a seat?\nWhich coaches will be less crowded?\nWill the train after this one be less crowded?\nShould I get another coffee and wait?\nInfrared (thermal) cameras have reduced dramatically in size and cost.  This project trials a commercially available camera to determine its ability to identify and count boarding passengers.  We also build an API to support passenger counting regardless of source to serve queries on historical data for planning and booking and to serve near real-time data for query by apps serving passengers in transit.", 
    "project_name": "CrowdCount", 
    "project_tags": [
      "ruby-on-rails", 
      "android"
    ], 
    "project_url": "https://devpost.com/software/crowdcount"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "triptrack\nHackTrain 2.0 Project", 
    "project_name": "TripTrack", 
    "project_tags": [
      "meteor.js"
    ], 
    "project_url": "https://devpost.com/software/tiptrack"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "PRESENTATION HERE!\nBUBBLE UP EVERYBODY!\nhttps://www.dropbox.com/sh/871fxx449fbms26/AAC9psQympMgB_2Pf8SkVrUoa?dl=0\nFormat : Zipped Keynote and PDF / Zipped PDF", 
    "project_name": "Team Bubble", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/presentation-j2p3xw"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "Inspiration\nWhy are people having fun in packed pubs, gruesome standing times for royal events or even new years eve fireworks, and always complain about trains? They practically have the same conditions. Well, it's because they are in good company with friends and other people who celebrate the same thing. Why cant we have this kind of environment for trains? We want to start pioneering that shift of mindset through our app ChatPoint.\nWhat it does\nChatPoint is an application that encourages customers to socialize with others on a train by providing them a platform to chat with other people they could possibly get along with.\nHow I built it\nUsing JavaScript at the client side to display data and node.js on the server side to manage distribution of messages.\nAdvantage to the customer\nMost customers described their train rides as \"long\", \"dull\", and \"boring\".\nAnd contrary to popular belief, they do talk to other people on the train. But only if the coversation was started by the other person.\nWe found it interesting that only 2 out of the 12 people we physically approached declined a chat with us for the survey.\nMost of them are open to chatting especially when they are interested on the topic. \nChat point would be a great tool for them to pass their time on the train.\nAdvantage to TOC's\nUser data\nSince we have a huge collection of customer data, train companies can now adjust certain strategies accordingly. For example some months could be lean seasons and some unknown tourist destinations could only have a few passengers.\nThrough the app's backend analytics, you could see patterns of certain type of people who use the trains that you couldn't have guessed normally. So you could adjust the marketing accordingly.\nYou could also see patterns of people's behaviour and their sentiments so you could also adjust operations accordingly.\nAdditional Revenue\nWe would have certain chat topics that are sponsored by brands and people would get certain perks if they participate in the discussion such as a discount on the ticket or in shops. So it's kind of an ad but not really because based on their likes, people would want to participate in the discussion.\nBased on our survey, the 70% of yes' was raised to 93% when the concept of discounts was introduced.", 
    "project_name": "ChatPoint", 
    "project_tags": [
      "html", 
      "css", 
      "javascript", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/chatpoint-rxnck9"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "We're making the ticket purchasing experience quicker, more intuitive, and more accessible. Using voice analysis we are able to provide travelers with exactly what they want and in a matter of seconds, rather than wasting their time with clunky interfaces that create stress and long queues. \nTrain of Thought is built by integrating advanced speech recognition API's, IBM's Watson Artificial Intelligence services including the Natural Language classifier and the SilverRail API to pull up to date information about train routes and schedules in the United Kingdom. As a voiced based application, we focussed on an ultra-high accuracy of speech-to-text transcription using Google's new web speech API. The accuracy is above 90% for most accents and use cases, and we achieved 100% accuracy for most tests and common queries. IBM's Natural Language classifier service, a part of the Bluemix basket of Watson service, then run the transcribed speech through a classifier that we trained to recognize common customer queries at kiosks such as route finding, ticket purchasing and ticket printing based on a pre-booked purchase and reference number. The confidence index for most results returns by the classifier is over 98% due to the extraordinarily well trained, machine learning service that we built and integrated.  Once queries are classified, the Dialog AI service from Watson is used to provide a fast and accessible interaction with the customer to buy tickets, see route information or print pre-booked tickets. For ticket purchasing and routing, the SilverRail API is called to get the up to date routes between two locations which are extracted from the transcribed text.\nA seamless, fast and accessible user experience. Buy a ticket in less than 10 seconds.", 
    "project_name": "Train of Thought", 
    "project_tags": [
      "ibm-watson"
    ], 
    "project_url": "https://devpost.com/software/train-of-thought"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "RICCS\nRICCS is an automated train service disruption solver. Train service disruptions occur for many reasons, including train malfunction, accidents, congestion and human error. When disruptions occur, the resulting delays propagate to other trains operating on the same line. This problem is one of the biggest in the rail industry today. A common solution is to re-route trains and reshuffle staff rotas to minimise the effect of a disruption. This is currently done manually, on an ad-hoc basis by dedicated teams. RICCS uses a mathematical constraints model that takes into account routes, trains and staff in order to optimise the schedule given a service disruption scenario as input.", 
    "project_name": "RICCS", 
    "project_tags": [
      "python", 
      "flask", 
      "javascript", 
      "bootstrap"
    ], 
    "project_url": "https://devpost.com/software/riccs-cfpbsz"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "Maps are difficult to navigate around, and for tourists; it can be, aggravating to do so. Even Londoners may find it troubling, we can all agree that London can be confusing, and we\u2019ve finally found the solution to the problem. We\u2019ve created an idea of using and coding QR codes which can be scanned by any Smartphone and can redirect you to a vast information database that will give you directions, opening times and any additional information about any place. Now, why don\u2019t people just Google it? With QR codes it makes things faster and simple, we can cut out the middle man and save you a lot of time. With billboards in key areas of London, QR codes will provide a fast alternative for looking at a map for 10 minutes.", 
    "project_name": "Tapp On", 
    "project_tags": [
      "php5"
    ], 
    "project_url": "https://devpost.com/software/tap-on"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "Inspiration\nThe inspiration behind the project arose from the precedent set by Google with it's real-time traffic monitoring for roads and we want to replicate that for the rail network.\nWhat it does\nWe've used real-time rail data to create a colour-coded representation of the rail network that illustrates the level of service disruption on the line down to the resolution of between stations\nHow we built it\nWe built the MVP over the course of two days responding to the challenge set by the Department for Transport as find better ways to visually communicate the nature and severity of service disruption. \nWe used historical data from the SilverSearch API and 'cleaned' it for use in the demo where we would find a particularly 'eventful' day then speed it up to 10x to illustrate.\nOn the front end we used Swift to create a simulation of how the iOS app would look and created the route between London and Birmingham (a particularly significant route strategically for the UK with HS2 en route)\nThe route was broken down into sections between stations that would change colour depending on the severity of the delay experienced on that line of track.\nChallenges we ran into\nOne of the major challenges was being able to clean the data and convert it into a consistent format that could then be used with any reliability. With so many different formats and naming conventions combined with the scale of the data, it was incredibly difficult to make this useful. All credit to Tom for making this happen!!!\nWhat's next for Ripple\nWe want to expand on the prototype we built using the London to Birmingham line and plan to take it further to other major rail routes in the country. Ultimately the idea is that we will be able to use historic data to create a predictive analysis of where disruption will occur so that proactive action can be taken.", 
    "project_name": "Ripple", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/ripple-zdqf75"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "Visualisation and analytics tool to support long-term decision making for train scheduling.", 
    "project_name": "OnTrack", 
    "project_tags": [
      "python", 
      "javascript", 
      "d3.js", 
      "bootstrap", 
      "html5", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/ontrack-ig3tw9"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "Inspiration\nWhat it does\nHow I built it\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for Ticket", 
    "project_name": "Ticket", 
    "project_tags": [
      "ionic", 
      "html5", 
      "css3", 
      "angular.js", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/ticket-rxo1di"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "The biggest update to the train tickets in 190 years.\nDeveloped during HackTrain 2.0\nWhat it does\nSimply scan your paper train ticket and the app will create an e-ticket so that you can see the next valid train, platform information, calling points, disruption and an overview of available seats on your mobile device.\nLooking for today\u2019s first class menu? or maybe that all important lost property number? Ticket serves up tailored journey information for your train operator with ease; and once you\u2019ve settled into your seat, use Ticket to check in and see what your fellow passengers are up to.\nDownload it on Google Play", 
    "project_name": "Ticket", 
    "project_tags": [
      "javascript", 
      "html5", 
      "css3", 
      "angular.js", 
      "ionic"
    ], 
    "project_url": "https://devpost.com/software/ticket"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "", 
    "project_name": "Training", 
    "project_tags": [
      "javascript", 
      "html", 
      "css", 
      "meteor.js", 
      "ionic"
    ], 
    "project_url": "https://devpost.com/software/training-948psu"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "ugo\nugo is a digital information kiosk that is designed to be placed in train stations in order to inform travellers about disruptions & delays as well as provide them with personalised information about their own journey at the right time in the right place.\nHow we built it\n\nA first interface paper prototype was drafted in order to be validated by users.\nWe asked travellers in Newcastle train station to use the paper prototype and give us feedback in regards to the current features.\nA new hi-fi interface was designed based on their needs and requests.\nA tablet and mobile phone are mounted in a box.\nAn app on the phone uses the camera to scan a ticket.\nIt then makes a request to a web server sending the ticket data.\nThe tablet has a browser open connected to the same web sever.\nWhen the app has scanned, the web server hits the rail APIs for info.\nWebSockets are used to automatically update the info on the tablet.\n\nChallenges we ran into\n\nReading the ticket - we did not have magnetic scanner and could not decipher the 2D barcode\nLack of hardware in the actual Hackthon. Thanks to Nick from Wave Roll, we had a tablet which can be used as a mock-up LCD screen \n\nWhat we learned\n\nMost travellers feel safer knowing the reasons for their delays.\nMany travellers prefer interacting with a digital artefact than asking the information desk .\nInformation announcements are many times ignored or very hard to hear due to the noise in the station. \nTravellers loved the idea of having personalised information about their journey available in the context of the station, by scanning their ticket.\nHaving a personalised map to navigate large and unfamiliar train stations is a feature well received by the public.\nIt would be better to shoot a video than a live demo. Because of the limitations described above, at current stage, a live demo is quite risky.\n\nWhat's next for ugo\n\nugo is getting a new box and will be polished for the next pitch event in December.\nA second round of user validation with the new prototype and a demo video will be filmed.\nWe hope to launch a pilot in one of UK's major rail stations to test ugo's effectiveness and we'll gather data about the pilot study that will later be presented to potential business partners.", 
    "project_name": "ugo", 
    "project_tags": [
      "html5", 
      "javascript", 
      "asp.net", 
      "css", 
      "c#"
    ], 
    "project_url": "https://devpost.com/software/ugo"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "Maps are difficult to navigate around, and for tourists; it can be, aggravating to do so. Even Londoners may find it troubling, we can all agree that London can be confusing, and we\u2019ve finally found the solution to the problem. We\u2019ve created an idea of using and coding QR codes which can be scanned by any Smartphone and can redirect you to a vast information database that will give you directions, opening times and any additional information about any place. Now, why don\u2019t people just Google it? With QR codes it makes things faster and simple, we can cut out the middle man and save you a lot of time. With billboards in key areas of London, QR codes will provide a fast alternative for looking at a map for 10 minutes.", 
    "project_name": "Tapp On", 
    "project_tags": [
      "php5"
    ], 
    "project_url": "https://devpost.com/software/tap-on"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "Inspiration\nThe inspiration behind the project arose from the precedent set by Google with it's real-time traffic monitoring for roads and we want to replicate that for the rail network.\nWhat it does\nWe've used real-time rail data to create a colour-coded representation of the rail network that illustrates the level of service disruption on the line down to the resolution of between stations\nHow we built it\nWe built the MVP over the course of two days responding to the challenge set by the Department for Transport as find better ways to visually communicate the nature and severity of service disruption. \nWe used historical data from the SilverSearch API and 'cleaned' it for use in the demo where we would find a particularly 'eventful' day then speed it up to 10x to illustrate.\nOn the front end we used Swift to create a simulation of how the iOS app would look and created the route between London and Birmingham (a particularly significant route strategically for the UK with HS2 en route)\nThe route was broken down into sections between stations that would change colour depending on the severity of the delay experienced on that line of track.\nChallenges we ran into\nOne of the major challenges was being able to clean the data and convert it into a consistent format that could then be used with any reliability. With so many different formats and naming conventions combined with the scale of the data, it was incredibly difficult to make this useful. All credit to Tom for making this happen!!!\nWhat's next for Ripple\nWe want to expand on the prototype we built using the London to Birmingham line and plan to take it further to other major rail routes in the country. Ultimately the idea is that we will be able to use historic data to create a predictive analysis of where disruption will occur so that proactive action can be taken.", 
    "project_name": "Ripple", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/ripple-zdqf75"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "Visualisation and analytics tool to support long-term decision making for train scheduling.", 
    "project_name": "OnTrack", 
    "project_tags": [
      "python", 
      "javascript", 
      "d3.js", 
      "bootstrap", 
      "html5", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/ontrack-ig3tw9"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "Inspiration\nWhat it does\nHow I built it\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for Ticket", 
    "project_name": "Ticket", 
    "project_tags": [
      "ionic", 
      "html5", 
      "css3", 
      "angular.js", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/ticket-rxo1di"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "The biggest update to the train tickets in 190 years.\nDeveloped during HackTrain 2.0\nWhat it does\nSimply scan your paper train ticket and the app will create an e-ticket so that you can see the next valid train, platform information, calling points, disruption and an overview of available seats on your mobile device.\nLooking for today\u2019s first class menu? or maybe that all important lost property number? Ticket serves up tailored journey information for your train operator with ease; and once you\u2019ve settled into your seat, use Ticket to check in and see what your fellow passengers are up to.\nDownload it on Google Play", 
    "project_name": "Ticket", 
    "project_tags": [
      "javascript", 
      "html5", 
      "css3", 
      "angular.js", 
      "ionic"
    ], 
    "project_url": "https://devpost.com/software/ticket"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "", 
    "project_name": "Training", 
    "project_tags": [
      "javascript", 
      "html", 
      "css", 
      "meteor.js", 
      "ionic"
    ], 
    "project_url": "https://devpost.com/software/training-948psu"
  }, 
  {
    "hackathon_name": "HackTrain 2.0", 
    "project_description": "ugo\nugo is a digital information kiosk that is designed to be placed in train stations in order to inform travellers about disruptions & delays as well as provide them with personalised information about their own journey at the right time in the right place.\nHow we built it\n\nA first interface paper prototype was drafted in order to be validated by users.\nWe asked travellers in Newcastle train station to use the paper prototype and give us feedback in regards to the current features.\nA new hi-fi interface was designed based on their needs and requests.\nA tablet and mobile phone are mounted in a box.\nAn app on the phone uses the camera to scan a ticket.\nIt then makes a request to a web server sending the ticket data.\nThe tablet has a browser open connected to the same web sever.\nWhen the app has scanned, the web server hits the rail APIs for info.\nWebSockets are used to automatically update the info on the tablet.\n\nChallenges we ran into\n\nReading the ticket - we did not have magnetic scanner and could not decipher the 2D barcode\nLack of hardware in the actual Hackthon. Thanks to Nick from Wave Roll, we had a tablet which can be used as a mock-up LCD screen \n\nWhat we learned\n\nMost travellers feel safer knowing the reasons for their delays.\nMany travellers prefer interacting with a digital artefact than asking the information desk .\nInformation announcements are many times ignored or very hard to hear due to the noise in the station. \nTravellers loved the idea of having personalised information about their journey available in the context of the station, by scanning their ticket.\nHaving a personalised map to navigate large and unfamiliar train stations is a feature well received by the public.\nIt would be better to shoot a video than a live demo. Because of the limitations described above, at current stage, a live demo is quite risky.\n\nWhat's next for ugo\n\nugo is getting a new box and will be polished for the next pitch event in December.\nA second round of user validation with the new prototype and a demo video will be filmed.\nWe hope to launch a pilot in one of UK's major rail stations to test ugo's effectiveness and we'll gather data about the pilot study that will later be presented to potential business partners.", 
    "project_name": "ugo", 
    "project_tags": [
      "html5", 
      "javascript", 
      "asp.net", 
      "css", 
      "c#"
    ], 
    "project_url": "https://devpost.com/software/ugo"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Finding the hidden secrets that only the locals know.\nProblem:\nWe\u2019re from Cyprus -  and when our friends go there, we always tell them about the amazing secret places that we know about. They're often difficult to find, but we can tell you how to get there. These are the secrets that the tourists don't know about, but they're always magical.\nWith this hack, we want to tackle this problem and scale the solution. Not everyone has a friend in the country that they want to go visit - Further becomes that trusted friend in your pocket. \nHow it works:\nLocals share their experiences, so that Travellers can experience places like a local. Travellers pay a small fee to access the full itinerary of items and the locals get paid for sharing their knowledge.\nWhy we're different:\nWhere a startup like Hype is about advice from locals for locals, and another startup called Esplorio is about advice by tourists for tourists - Further solves the problem through local knowledge for tourists.\nIn our online webapp:\nA local goes online to write an experience, they log in and see their dashboard.\nThey want to create a new experience, so they add a title, categories, summary & a heads up of a budget if the experience is likely to cost the traveller something.\nThe local then adds  the items - the step by step bits of the day. These nuggets include how to get there, where to eat, what to take with and when to go. Locals include the tips they feel are important to the experience. \nWhen the local is done, the experience goes live. The local then sees a dashboard to view the experiences they have uploaded. Since the experiences are sold for a small fee, the locals can see & manage their revenue. The locals get 80% of the amount paid by the travellers and we get 20%. It is a marketplace business model with the potential to become subscription based too.\nIn our mobile app:\nAndreas\u2019s Nordic twin Brother Andrs (who likes cats) wants to go to Cyprus. \nHe logs into the app, where he\u2019ll find the experiences he's bought. For this trip he wants a new experience so he heads over to Search & Discover. \nHe selects Cyprus & chooses a few categories, like romantic, beach, sunshine, coastal. Out of the suggestions, he chooses the experience he wants and looks at the summary. He decides to purchase and gets access to the full experience. \nDuring the experience, he can check his watch for full access to the details of the experience as the final step in a truly multiplatform travel experience. \nExpand your horizons. Be a local on holiday, not a tourist.", 
    "project_name": "Further", 
    "project_tags": [
      "ios", 
      "braintree", 
      "html5", 
      "javascript", 
      "python", 
      "objective-c", 
      "css3", 
      "twilio", 
      "photoshop", 
      "adobe-illustrator"
    ], 
    "project_url": "https://devpost.com/software/further"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration, Background, current Problems\nAirline Business is very advanced today, comparing to the 60's but still far from perfection.\nAirlines say they charge change fees and cancellation penalties to give travelers incentives to purchase full-fare, unrestricted tickets and to limit no-shows for flights, reducing the need to overbook. By paying higher prices, travelers can buy flexibility and avoid change fees/surcharges, where lower prices represent a trade-off, with more restrictions.\nThe Airlines take advantage of that and collect over $2 Billion every year just from the US travellers just on cancellation fees.\nMillions of travellers are disappointend and hurt by harsh cancellation fees, booking restrictions and charges.\nToday's technological advancement can allow the airlines become FAIRER to their clients and approach their problems and needs!\nExamples where companies stimulate bookings and consumer stimulation are:\n\nHRS.de - now you can cancel your accommodation booking till 6 pm same day without any cancellation charge.\nOne of the signs of change is that British Ariways already allow you to change your ticket name for an additional GBP 30 fee.\nThe bookings were not possible through a 3rd party company (besides travel agencies) before PAYPAL has succeeded in establishing a firm position with more flexibe payments worldwide.\n\nIf the airlines do not keep their lion's share of travellers in fear of high fees for cancellations and unaffordable prices for flights it will give them an opportunity for continuous market growth and higher revenues with ever more happy clients.\nSome of the advanced insurance companies start to pay back money to their clients, if the latter do not have accidents in a longer period of time. This transforms their clients into permanent and happy clients.\nHow it works\nOur goal is to generate a product of RADICAL CHANGE (not incremental one).\nTherefore we suggest to the Airline companies a possible cooperation with AIRMAX, that will generate great yields for both businesses and consumers on a new level.\nThe AIRMAX app rips the data from all forwarded emails with flight and accommodation confirmations to TripCase.\nOnce the user opens the APP he can see all his recent open bookings.\nHe can choose one and post it in form of a blogpost on the AIRMAX wall of offers.\nThe user can choose what he prefers: a swap, a sale or both options.\nAIRMAX charges through PAYPAL the clients that BUY the offered booking.\nIf the Flight or Accommodation booking is swapped - AIRMAX simply transfers the client data to the original service provider and directs the buyer through PAYPAL to send the money to the person who provided the ticket.\nIn case a user wants to make a gift for someone he can share his offer in Facebook/Twitter and if anyone likes it and the time/dates convene the person - then the gift is ready!\nBUSINESS CASE:\nAIRMAX is a bridge (trusted middleman) between the airline companies and the consumers.\nThe consumers pay a small fee each time they swap, sell or transfer the ticket.\nThe partnering airlines get a monthly lump sum payment or per each transfer (as the airline operator chooses).\nIf more and more Airlines will start implementing the AIRMAX system that will allow people swap, sell or gift their booking to another person (without speculation), this will stimulate and boost the consumer activity and in result bring more profit.\nWhat's next for AIRMAX - Swap, Sell or Gift your Bookings!\nContacting the Airlines Companies and the Service Facilitators to accept a new system and way of selling the tickets/making the bookings.\nThe future of Travel is maximum flexibility and less restrictions for the clients. \nGet a taste of Future with AIRMAX and help us build a more perfect travel world - fairer and less restrictive and more popular for the consumers and more profitable for the airlines!", 
    "project_name": "AIRMAX - Air Travel Reinvented!", 
    "project_tags": [
      "node.js", 
      "android", 
      "oauth", 
      "java"
    ], 
    "project_url": "https://devpost.com/software/airmax-swap-sell-or-gift-your-bookings"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nYou want to go away, you don't care when or where, all you care about is the price. Almost every site requires either a destination or a date before you can even choose the price\nHow it works\nThe first page you get to on the site is just a search form with 1 price field. You set you budget and then the you will get Flights and hotels. From these results you can filter by the weather and if there is car rentals available in the destination.\nFlights: The first step is to use Sabre's DestinationFinder. We start from and London airport and get the maximum of 50 results back, with the lowest fare for that day. Once the flights have been added to firebase the results page starts updating.\nHotels: As soon as the flight API is complete we use Mr & Mrs Smith's availability API to retrieve all the available hotels that are near the airports where flights are available. Once we have a shortlist of relevant hotels we get the best bookable rates for the required dates. As these results come in the search results page is updates and hotels are added in the results with the flights. \nCar Hire: The next step is to do the car search, as this is not always required this is just an option to show results where car hire is available at the destination airport.\nWeather: We also added a weather API (http://openweathermap.org/api) so that we could show the forecast for your trip on the results page.\nChallenges we ran into\nBecause of the amount of data required to retrieve for each search we have limited it to the next weekends results (the trip will always be Friday-Sunday). This meant we could limit the amount of data we had to retrieve for the purpose of the demonstration.\nWe began searching for flights based on the maximum price entered, but this sometimes used the maximum budget available (e.g. \u00a3500 was the maximum price some of the flight results that came back were \u00a3500 meaning there was no budget for a hotel). To overcome this, and based on the fact we limited the results to the weekend, we decided to limit the max fare for the flights to 80% of the budget, meaning we were more likely to have enough in the budget to have a hotel too.\nAccomplishments that we're proud of\nThe gradual display of results, using firebase we save the search and then as we get results we populate the results page.\nThe ease of use of the search.\nWhat we learned\nWhat's next for Lasso\nMore filters for the search.\nDon't limit the search to the next weekend, we can expand the search to be within the next 3 months, then the next year as we grow.\nAdd all transport options - in the budget include the train fares and/or taxis to and from the airport (or have them as a filter)\nBooking for the flights and hotels at the quoted prices, and eventually booking within the site.", 
    "project_name": "Lasso", 
    "project_tags": [
      "php", 
      "css", 
      "firebase", 
      "elasticsearch", 
      "html", 
      "sass", 
      "sabre", 
      "react"
    ], 
    "project_url": "https://devpost.com/software/lasso"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nProof of concept from an idea in our Travel Agency. \nHow it Works\n\nThe user creates a funding webpage for a travel purpose, and sends invitation by social media and/or URL to friends and family to contribute\nThe Contributers access the funding webpage in order to donate money for a travel gift\nOnce the contribution has been done, the contributors name and the amount will be shown in a list on the funding webpage. There is an interactive map which will be updated with pins, showing to which destinations the contributed amount will cover airline tickets (according to the specifications made when the funding webpage was created \u2013 departure and returning dates and origin). Mouseover on each pin in the map will show destination name, and the lowest price for the airline ticket(s).. \n\nChallenges I ran into\nWebdevelpment has been a challenge for our team which only consits of  back-end developers.\nAccomplishments that I'm proud of\nThat we actully managed to have a working prototype for proof of concept.\nWhat I learned\nWe are impressed by the Destination Finder and the Low Fare API's hope we can use them to develop our online solutions further.\nWhat's next for CrowdGift\nWhen we get home, we hope we can take this further:\n\nWhen the user clicks on a pin in the map, the availability display will appear and the booking can be made by using our online booking tool\n\nWhen they start travelling, we will offer a travel blog to share with the contributors. If possible, we would use the TripCase api to follow them around the world.", 
    "project_name": "CrowdGift", 
    "project_tags": [
      "django", 
      "javascript", 
      "json", 
      "hetzner", 
      "sabre", 
      "bootstrap", 
      "jquery", 
      "google-maps"
    ], 
    "project_url": "https://devpost.com/software/crowdgift"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nJust this week, my wife and I were researching a summer holiday for the whole family when we realised that we really couldn't afford one. We made a savings plan but I thought we could do more than just squirreling away money into a bank account. Other influences are London FinTech companies like TransferWise, who gave me the confidence to even consider providing consumer facing monetary-like products.\nHow it works\nA customer (or saver) sets up a recurring transfer using our app and then slowly builds up their travel fund. They also specify what kind of holiday they are saving for, which helps reinforce saving habits by visualising their goal. \nAt the same time, we allow supply side partners to make private sale offers to our savers, based on their account balance as well as holiday preferences. Since our savers are fully qualified, after all they have money in the bank for a trip, they are high value leads. Also, since deals are fenced in for savers, suppliers can charge less than on the internet.\nChallenges I ran into\nInterestingly, it was easier to setup a recurring money transfer than to find hotels for our savers. I finally settled on using Sabre's new Hotel API but unfortunately it is limited to 50 destinations and doesn't have any images. I felt there would be an opportunity to integrate with Google HPA, but they don't offer their hotel ads outside Google properties (as far as I could tell).\nI probably should have used some of our (Hotels.com) internal APIs.\nAccomplishments that I'm proud of\nDeveloped the internal APIs first, which worked well and will replace the Mobile First trend in a few years.  Glad to recruit an iOS developer, I wasn't expecting that. Really enjoyed writing lots of JavaScript for 24 hours.\nWhat I learned\nThere were a few features of CouchDB that I realised I was using wrong. Also that Stripe is a really good platform for payments, I would definately use them again.\nWhat's next for Paid Vacation\nAs far as I can tell, no one has done this before and I think Paid Vacation is aligned with a number of trends. I could really succeed with some funding. There are challenges on the marketing and regulatory side, but other startups are working through similar issues.", 
    "project_name": "Paid Vacation", 
    "project_tags": [
      "javascript", 
      "couchdb", 
      "stripe", 
      "jquery", 
      "curl", 
      "ios", 
      "objective-c"
    ], 
    "project_url": "https://devpost.com/software/paid-vacation"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nA Mobile Apps to take the stress out of your Day of Travel\nAssures you make your Flight on Time and helps Airlines to achieve On time Departure  \nHow it works\n\nContext aware App - Monitors events related to your Day of Travel and alerts you to changes as needed\n\nOne of the pictures describes a \"Use Case\"  that will walk you thru the Day Of Travel of a passenger ... That describes some of the Features and possibilities this App will provide the everyday Traveler(s) .  \nChallenges I ran into\nSome APIs (Tripcase) were hard to implement for Mobile Apps access\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for HP Now Boarding\nHP to work with partners to deploy Now Boarding fully integrated with TripCase, Wayfinding, GoogleMaps,..", 
    "project_name": "Now Boarding", 
    "project_tags": [
      "sabre", 
      "twilio", 
      "ibeacon", 
      "javascript", 
      "html5"
    ], 
    "project_url": "https://devpost.com/software/hp-now-boarding"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "People have changed the way they travel. Among other changes, low cost carriers and short term rental have made traveling more affordable and more spontaneous.\nExisting online travel agencies haven\u2019t yet incorporated these changes in traveler behaviour and that is why we have decided to come up with the final solution: a last minute booking website and newsletter that pushes to our users last minute weekend getaways combining cheap air transportation tickets and short term rental accommodation.", 
    "project_name": "6weekends", 
    "project_tags": [
      "javascript", 
      "node.js", 
      "express.js", 
      "sabre", 
      "airbnb"
    ], 
    "project_url": "https://devpost.com/software/6weekends"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nToo many flights stuck in the middle seat, willing to pay other passengers to move to a better seat.\nHow it works\nLogin with TripCase and we'll grab your upcoming flights to let you checkout other seats being offered by passengers and even let you put a price on your seat!\nChallenges we ran into\nNONE!\nAccomplishments that I'm proud of\nIT WORKS!\nWhat's next for SeatSwap\n???", 
    "project_name": "SeatSwap", 
    "project_tags": [
      "javascript", 
      "ruby", 
      "angular.js", 
      "ionic"
    ], 
    "project_url": "https://devpost.com/software/seatswap"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nSlack and the Apple Watch\nHow it works\nCommandLine style integration into Sabre\nChallenges I ran into\nProject Design\nHard Coding\nAccomplishments that I'm proud of\nCool Design\nVisionary Multi Platform Nature of Project\nWhat I learned\nAbout Modern digital travel trends\nWhat's next for SabreTuuth\nGlobal Domination", 
    "project_name": "SabreTuuth", 
    "project_tags": [
      "slack", 
      "sabre", 
      "github"
    ], 
    "project_url": "https://devpost.com/software/sabretuuth"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "", 
    "project_name": "Lawrence", 
    "project_tags": [
      "ios", 
      "swift"
    ], 
    "project_url": "https://devpost.com/software/lawrence"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nA lot of people seat in front of a TV screen or laptop and watch videos. Even if they are impressed by the place where the video or the photo were taken, they won\u2019t probably think to go there since they don\u2019t know where is it and it is too complicated to plan the trip.\nWe would like to change it and to give these people a new way of traveling - from couch to couch!\nHow it works\nYou are watching a new movie in one of the video platforms and you are impressed by a picturesque place in it. You notice a button from Be There startup inviting you into the movie and you click it. You get a number of locations where the movie was made and you can choose the one you would like to visit. We help you to plan your perfect trip to the place.\nDuring actual trip you shall have your itinerary in Be There mobile application and we will remind you about activities you have planned. Hence, you will never miss anything you wanted to do!\nUsing Be There mobile application you can attach photos and videos to activities and share it. The photos and videos will be equipped with Be There button and if many people click on it or, better, book with Be There, you get paid!", 
    "project_name": "BeThere", 
    "project_tags": [
      "sabre", 
      "getyourguide", 
      "tripadvisor", 
      "twilio"
    ], 
    "project_url": "https://devpost.com/software/bethere-hvw45"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nWe pretend to give a full travel experience to the final user\nHow it works\nUses multiple APIs to have all the needed for a complete travel (flights, car renting, accomodation, activities... ) and the list only could go larger\nChallenges I ran into\nInclude as many APIs as possible to make it as complete and easy as the customer deserves\nAccomplishments that I'm proud of\nBeing capable of achieve such great challenge in such an event, more being our first time in a hackathon, but not the least excited\nWhat I learned\nGet knowledge of very exciting new APIs and also other people from different places with differents thinkings ways\nWhat's next for Route99\nSocial network, mobile tracking, checkin thru wearables...", 
    "project_name": "Route99", 
    "project_tags": [
      "javascript", 
      "jquery", 
      "android"
    ], 
    "project_url": "https://devpost.com/software/route99"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nWe want to empower users to make an informed decision when booking seats, quickly. OhSeat allows travellers to get seating information via text message in seconds - simply text us with your flight number and we will tell you which seats are the best out of those still available for your flight. Include your current seat and OhSeat will tell you whether you can switch to a better seat within your travel class. Our text service allows users to get seat information even when wifi/3G reception is unavailable and our responses include reasons for our seat suggestions.\nHow it works\nOur service sends queries to three services and aggregates the responses from each to choose the best available seat for the user. We scrape FlightAware pages to match flight numbers to airplane models, then call SeatGuru and Sabre Seat Map apis to find the best possible seat. Our server-side logic is written in python Flask and we serve our requests to mobile using Twilio. \nExample Interaction\nYou: \"Im on flight BA233, which seat should I take?\"\nResponse: \"For your flight towards DME you should book seats 21D, 21F, 21A, 21J. Seat 21D has extra legroom. The footrest at this seat is attached to the seat. The tray table is in the armrest, making the armrest immovable and slightly reducing seat width. There is no floor storage for this seat during take-off and landing.\"\nWhat's next for OhSeat!\nWe want to: \n\nintegrate OhSeat with airlines to allow for seat bookings straight through the service\npairing up of people based on interests - share your flight with a new friend / sit next to somebody you already know", 
    "project_name": "OhSeat!", 
    "project_tags": [
      "python", 
      "flask", 
      "twilio", 
      "sabre", 
      "jquery", 
      "bootstrap", 
      "html5", 
      "css3"
    ], 
    "project_url": "https://devpost.com/software/ohseat"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "The most common way of travelling is sightseeing and going to the top destinations of an area but some people want to have a more immerse cultural experience rather than the informational tours. You can use Foursquare to find the best restaurants, but who's going to show you the best street food? You can use TripAdvisor to find the best attractions, but who's going to show you the laid back-areas where locals go to avoid tourists? How can you truly immerse yourself into the culture within a weekend or a few days? Travellers can do that through Localize.Me.\nLocalize Me is a web service that allows people to find unconventional and exclusive activities organized by locals and provides them with all the information they will need to fulfil that activity, from transportation to accommodation.\nThere is an increasing trend for the democratization of tourism and these services are already out there: Vayable, yPlanApp, Simpki, Airbnb, etc., which is good, because it means it's a good business. But in order to have a complete travel experience, you have to go and sign-up for each service and make a separate search. One for the transport, one for the accommodation and one for the experience.\nWe want to merge all of this and make it easier for the traveller to achieve the cultural experience that they are looking for without spending too much time researching about flights and accommodation.\nLocalize me focuses on the experience.\nOn the other hand, we also want to give locals the opportunity to earn on the side by just hosting someone for dinner or going fishing.\nLocalize.Me wants take out the hassle of planning a holiday and change the way travellers experience the world.", 
    "project_name": "Localizeme", 
    "project_tags": [
      "sabre"
    ], 
    "project_url": "https://devpost.com/software/localizeme"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "", 
    "project_name": "GypsyFeet London Hack", 
    "project_tags": [
      "objective-c", 
      "ios", 
      "node.js", 
      "angular.js", 
      "mongodb", 
      "express.js", 
      "git", 
      "github"
    ], 
    "project_url": "https://devpost.com/software/gypsyfeet"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "We believe that the most important thing are the travelers as persons and the relationships between others rather than any technology.\nTechnology makes us life easier, which is cool, but at the end, is the interaction with peers that makes our lives more valuable.\nWhat we try to do is to create a close communication between travelers and services providers. So that each one can trust each others. And, encourage providers to make a gift to its clients. Something little maybe, but that it may be remembered for ever.", 
    "project_name": "gift", 
    "project_tags": [
      "javascript", 
      "html", 
      "handlebars.js", 
      "css", 
      "meteor.js", 
      "twilio"
    ], 
    "project_url": "https://devpost.com/software/gift-ennc1"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "", 
    "project_name": "Travita", 
    "project_tags": [
      "css", 
      "html", 
      "php", 
      "twilio"
    ], 
    "project_url": "https://devpost.com/software/travita-b9nqj"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Use the sweetspot (the time between taking off and landing), by providing passengers with virtual reality options, which enhance their travel experience.\n\u2018The inflight virtual reality travel and Try before you Buy experience\u2019\nIkaros VR offering\nA B2B solution which offers a new way of capturing passengers, and brings together airlines and third party suppliers, using virtual reality\nGamify your travel experience\nPart 1  Plan your flight transfer, airport path, expoler and buy any product, transfer to hotel\n\u00a0\nPart 2  Try before you buy, tours, escapes, products, click & collect, etc", 
    "project_name": "Ikaros VR", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/ikaros-vr"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nIts hard to book flights\nHow it works\nJust text sarah when you want to travel and She'll reply with pricing options. If you like it, she'll book it for you and your e-ticket will arrive in your email.\nChallenges I ran into\nBuilding an AI Chatbot that works in 24 hours???? INSANE!!!\nWhat's next for Sarah\nFinish implementing the AI, hook it up so there is no manual input necessary and launch as my next startup", 
    "project_name": "Sarah", 
    "project_tags": [
      "html", 
      "css", 
      "sabre", 
      "textmagic", 
      "ruby-on-rails"
    ], 
    "project_url": "https://devpost.com/software/sarah"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nI love travelling! But, 95% of the suggested holiday activities in current travel apps are aggregated from big companies who retain most of the profit. Local activity providers rely on word of mouth or the cooperation with travel agencies to secure business. The travel agencies also take big margins for connecting the tourists with these activity providers.\nSome small providers try to offer their activities directly, but being honest, I've never feel completely safe. However, by connecting with providers and getting to know them as locals, I've met awesome people around the world. With the help of their feedback I came up with the idea of Sharrio. Shariio is a mobile app focusing on connecting people who would like to participate in fun activities locally.\nWe give our providers the ability to post their activities, chat to interested participants within the app and connect directly with each other. Based on the review system and the ID verification feature, tourists feel safe connecting with the local providers directly, and can get an authentic experience at a lower cost. The local providers also take a much higher cut of the revenue and this makes their business more sustainable.\nHow it works\nThe user connects with Facebook. Based on their location he will see all activities offered near-by including important details. Swiping right saves the activity to a favourites list and swiping left skips to the next activity offering. Reviewing the favourites list allows the user to chat directly with the activity provider to determine any unknown details, and can then request a booking.\nAccomplishments that I'm proud of\n\nGreat, familiar (thanks to Tinder) user experience that makes discovering new activities easy.\nLive chat functionality for speaking to activity providers immediately\nReview and ID verification badges for establishing trust\n\nWhat's next for Shariio\nIntegration of the following two payment solutions, allowing app monetisation and providers to accept payment directly in the app:\n\nPayfriendz, P2P payment app\nBraintree, supporting card payments, PayPal and Bitcoins", 
    "project_name": "Shariio", 
    "project_tags": [
      "javascript", 
      "meteor.js", 
      "ios", 
      "android", 
      "apache", 
      "hammer.js"
    ], 
    "project_url": "https://devpost.com/software/shariio"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "", 
    "project_name": "TripEeze", 
    "project_tags": [
      "android", 
      ".net", 
      "c#", 
      "jquery", 
      "hackpad", 
      "google-maps"
    ], 
    "project_url": "https://devpost.com/software/tripeeze-nmhs6"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nWhy carriers do not look at it\u00b4s own business to drive disruptiveness in the Social Media Era, by reducing marketing traditional investments, adopting sampling and testing FMCG technics. Use social media to bring empty seats to be won for those participants willing to share and influence others to gain opportunities to win the prize -Empty Seats-\nEmpowering people by offering a last minute opportunity where to get a free seat, 2x1, superdiscounts, or upgrades will drive revenue.\nHow it works\nSocial Gamification Business Intelligent Platform that takes all those empty seats select channels and creates promotions to reach leads and customers encouraging them to participate through viralizing and gamification to access a high value prizes - Empty Seats -  Empowering people by offering a last minute opportunity where to get a free seat, 2x1, superdiscounts, or upgrades will drive revenue.\nChallenges I ran into\nUnderstand the business process of Revenue Management Sys and how this departments are more financial centric than customer centric, where empty seats it\u00b4s a huge problem to market when times run-out. Gapiffy is the solution to fill that gap when empty seats are running out of time.\nAccomplishments that I'm proud of\nAutomatization of driving traffic processed  to our website, gain followers and fans at Social Media, classified, curate, and segment content to maximize ROI by client acquisition, recovery and retention\nWhat I learned\nNew users/customers accessing travel market are already threat the way of doing business by disruptiveness caused by the empowering people perspective of Collaborative Economy Growth. Gapiffy needs to address and foresight customer behavior with no time limits. \nWhat's next for Gapiffy\nIntegrates as SaaS for Sabre Clients willing to lead the new approach to customers management while add features to boost its USP by multiple API integrations as \n\nTwillo for support and validate customer authentication (Upsell and Xsell)\nTripcase to keep you updated and socially integrated within your winning trip\nGetyourGuide by creating social trips by connecting communities and services providers to make Gapiffy integration services.\nSeatGuru integration Gapiffy as users will be most trusted clients base on its \"feeling good factor\" as they are frees\nIntegrates on your FFP to enhance customer experience.", 
    "project_name": "Gapiffy - Social Marketing Management System", 
    "project_tags": [
      "sabre", 
      "google-maps", 
      "google-places", 
      "mongodb", 
      "node.js", 
      "angular.js", 
      "bootstrap", 
      "bitbucket", 
      "font-awesome", 
      "google-fonts", 
      "sails.js", 
      "html5", 
      "css3", 
      "less"
    ], 
    "project_url": "https://devpost.com/software/gapiffy"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nWe were looking for application to inspire where you can fly and spend your trip depending on the weather forecast\nHow it works\nWe have built awesome fully fledged application called SunFollower. The goal of the application is to help you find where you can fly and spend your trip depending on the weather forecast. Imagine you just want to get away, rest on a sunny beach and you don\u2019t want to spend millions on that. You don\u2019t want to check every beach destination you now and individually check the weather forecast, flight prices and hotel prices. SunFollower app pro- vides inspirations for possible destinations from your origin airport togeth- er with extended flight itineraries info, weather forecast and hotels listing. Destinations are presented on a Google Map represented by current weather conditions icons. To see the details of the destination just click on it and see detailed weather forecast (temperature, weather conditions, wind speed and directions) for the following 5 days. SunFollower provides you with graph to visualise the prices for the flights for the next 5 days. You can pick a day from the graph and look for flights to see detailed itineraries and prices and actually pick a flight.\nOk, so you\u2019ve selected your flight, but since you\u2019re departing in just a few days it would be nice if the app could help you with finding a hotel for your stay. And that\u2019s what SunFollower actually does \u2013 it gets you a detailed hotel search to help you pick a perfect stay ;)\nChallenges I ran into\nWe had to connect to multiple  API's in order to find appropriate information such as airports. Sunflower connects to Sabre API's, GetYourGuide API, Yahoo Weather API through to SimpleWeatherJS library and our own bridge (middleware) which allows us to connect to Sabre API. \nAccomplishments that I'm proud of\nWe delivered fully fledged application during 24 hours! Keeping the deadline it was the most challenging part of that project because there were lots of work ahead of us! The dev team was so tiny, only two persons were working on the app and finally accomplished the goal, so we are very proud of that. \nWhat I learned\nWe have learned how to use multiples APIs in order to deliver application which can support travellers. We have struggled a little bit with some technologies issues but finally all of them have been solved. \nWhat's next for SunFollower\nThere are two possibilities which are implemented in the app where you can book a ticket and monetise the incoming traffic. These options at the moment has been mocked up - but the plan is to replace the mockups with real booking process. We are also going to implement more intelligent search so that the results would be closer to the users requirements.", 
    "project_name": "SunFollower", 
    "project_tags": [
      "angular.js", 
      "javascript", 
      "css3", 
      "html5", 
      "moment.js", 
      "chart.js", 
      "yeoman", 
      "grunt.js", 
      "bower"
    ], 
    "project_url": "https://devpost.com/software/sunfollower"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nhelping people organizing fun and random trips\nHow it works\ninsert dates, budget and interests and find a solution\nChallenges I ran into\nundersized team, trying to make something original\nAccomplishments that I'm proud of\na small app which can use different APIs and could be useful to many\nWhat I learned\nto train my skills\nWhat's next for ItineRandom\nfurther development, possible launch", 
    "project_name": "ItineRandom", 
    "project_tags": [
      "php", 
      "bootstrap"
    ], 
    "project_url": "https://devpost.com/software/itinerandom"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration:\nAirlines are shifting to more and more paid ancillary services. Creating an itinerary that gives the end traveler freedom to choose and buy these services at their own convenience. \nHow it works:\nOnce a booking is finalized, agency sends the final itinerary (post ticketing) to the traveler.  Smart Itinerary is designed to display any paid ancillary service bookable at segment level. Customer click on the service he/she intends to avail. System confirms the service and accepts the payment through a payment gateway. Once payment is through, an EMD is issued and added to the itinerary with the respective service and emailed back to the customer.\nChallenges I ran into\nWanted to add more sponsors content unfortunately we had only limited knowledge of integration of REST APIS with .NET. \nAccomplishments that I'm proud of\nWhat I learned\nGot a good idea on the different sponsors API and how it can be used to enhance user experience\nWhat's next for Smart Itinerary:\nAdding more purchasable content along with destination information to enrich Smart Itinerary and turning it into an up-selling tool that would help agency sell even after they completed their sale.", 
    "project_name": "Smart Itinerary", 
    "project_tags": [
      "sabre", 
      "scribe", 
      "javascript", 
      "html5"
    ], 
    "project_url": "https://devpost.com/software/smart-itinerary"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nThe inspiration for this idea came from a dreaded 18 hour journey to Sydney where Nik spent \u00a3800 hoping that he would get a seat of his choice at that price, only to later find out that post booking they were no legroom seats available. \nHow it works\nThe user enters their flight search criteria, we then use the Sabre InstaFlightSearch to find the seats available (Note; we ran into issues, so we have cached this for now for one airline/trip) but we then do a live call to the SeatMap API from Sabre to get the seat information for that flight followed by doing a call to the SeatGuru API to get an overlay of the best possible seats. \nChallenges I ran into\nCurating the data from the InstaFlightSearch and using it as an overlay to see available seats in real time per leg of the journey. Purely because we didn't have enough time and wanted to focus on the combination of the SeatGuru API and SeatMap API for a specific journey\nAccomplishments that I'm proud of\nBieng able to combine both the SeatGuru API and SeatMap API and putting the fundamentals in place to use the InstaFlightSearch\nWhat I learned\nOne needs to focus on specific airlines, a lot of the airlines we did calls on the SeatMap API didn't return a response so we didn't get the seat information to help us find the best seat for the person requesting the journey. \nWhat's next for AirSeat - Finding you the best seat\nWe are going to look at seeing if we can re-visit the InstaFlightSearch, focussing on only airlines we know return a response from the SeatMap API together with focussing on airlines who offer specific seats for purchase (like emergency exit seats)", 
    "project_name": "AirSeat - Finding you the best seat", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/airseat"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "How it works\nSimply start typying the name of your favourite band, football team or theatre play and simple autosuggest will provide you list of matching results. You can select up to 12 events to search for. It's even simpler when you are music lover using last.fm. Simply click on the option, type your username and we'll get the list of your favourite bands.\nWe'll search for events you may like and list them showing earliest first. When you'll find something really interesting like last gig of your favourite band reunited after years or the most exciting football match of the season - don't wait any longer and simply click  TakeMeThere!\nNow, you can plan your journey or just use default settings suggested for your location and event destination. You can also let us find you the cheapest hotels near the event site. Select the one you like, fill in the reservation form and book complete travel. It's just that simple!\nWhat's next for TakeMeThere\nWe'd like to add more services (car transfers, car rentals) available for our clients with just one click to make their travel even more comfortable.", 
    "project_name": "TakeMeThere", 
    "project_tags": [
      "go", 
      "php", 
      "bootstrap", 
      "jquery", 
      "html", 
      "json", 
      "sabre", 
      "seatgeek", 
      "last.fm", 
      "expedia"
    ], 
    "project_url": "https://devpost.com/software/takemethere"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Sky Skout\nYou say when, we say where!\nSky Skout is the world's first travel discovery and booking service targeted towards students and young professionals looking for a spontaneous getaway. \"I just want to go somewhere cool and explore, easy and cheap, with my friends!\"", 
    "project_name": "Sky Skout", 
    "project_tags": [
      "ruby-on-rails", 
      "javascript", 
      "html5", 
      "css3", 
      "json", 
      "ajax", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/sky-skout"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nWe make creating life experiences easy.\nHow it works\nWe help travellers focus on creating their adventure, not the admin\nBy seamlessly generating the flights, activities and accommodation that match their budget and preferences \nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for Mavericks.", 
    "project_name": "Maverick.", 
    "project_tags": [
      "twilio", 
      "sabre", 
      "getyourguide"
    ], 
    "project_url": "https://devpost.com/software/mavericks"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Why\nMaking holidays safer\nInspiration\nMaking it easier to find safe places to go on holiday\nHow it works\nWe list all the top destinations from the sabre api and then match them with locations from GetYourGuide and the images provided. The use sentiment analysis to find out which destinations is the safest places and display the result to the user.\nSentiment Analysis - Extract live twitter feeds -> pass the feeds to HP Sentiment Analysis api. HP Sentiment Analysis returns back whether the tweets are positive or negative.\nChallenges I ran into\nLinking GetYourGuide api with Sabre API.\nAccomplishments that I'm proud of\nWorking in team.\nWhat I learned\nHow APIs are revolutionising modern travel\nWhat's next for Safe Destination\nImplement across all major platforms", 
    "project_name": "Safe Destinations", 
    "project_tags": [
      "android", 
      "java", 
      "javascript", 
      "sabre", 
      "getyourguide"
    ], 
    "project_url": "https://devpost.com/software/safe-destination"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nA friend of mine, a director at Warsaw University tried to book a travel for his 80 students. It took him few days of boring, manual work.\nHow it works\nOur scoring algorithm is makeing sure that all the travelers are accomodated in eitehr one hotel, or  two hotels nearby.\nChallenges I ran into\nHow to handle a booking form different destinationa nd how to find availability for group using existing API's\nAccomplishments that I'm proud of\nIt's quick and easy to do a group booking using our product.\nWhat I learned\nWhat's next for GroupExpert", 
    "project_name": "GroupExpert", 
    "project_tags": [
      "angular.js", 
      "node.js", 
      "php"
    ], 
    "project_url": "https://devpost.com/software/groupexpert"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Our company, Waynaut, has built a multimodal platform. Just an API, with no interface. \nWith WayDesk. we have decided to combine Waynaut and Sabre APIs to build an application for offline travel agents, which will allow them to offer their clients multimodal travel options.", 
    "project_name": "Waydesk", 
    "project_tags": [
      "java", 
      "restlet", 
      "bootstrap", 
      "backbone.js", 
      "javascript", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/waydesk"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nBaymax and TARS\nHow it works\nIT AI Baby \nChallenges I ran into\nTime shortage and partner API\nAccomplishments that I'm proud of\nfuzing api with AI\nWhat I learned\na lot\nWhat's next for baytar\na lot of things including enhancing search and funding", 
    "project_name": "baytar", 
    "project_tags": [
      "javascript", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/baytar"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nBritish holiday makers killed in a massacre by a gunman in Tunisia, after a bomb exploded at a Kuwaiti mosque and a man was beheaded in France - these event happened two days ago and we felt we need to do something for all tourists to be safe when travelling! And even when you are in a \"safe\" location, you can never be safe.\nHow it works\nIt is a platform from which you make a selection of either a country, city or an event that you want to check out. Using our algorithm and searching through social media feeds come up with a safety recommendation for you. Using this information you can make a much more informed decision to whether you want to go to places such as Tunisia or not. We have also linked AVOID to your smart-watch to track your heart rate and if any sudden changes occur, we send you a notification checking if everything is ok. If you are fine then you simply say yes to the notification. If not, press no and we will automatically call the emergency services and send your geo-location and help will be on its way!\nChallenges I ran into\nI struggled getting tons of APIs to work together from Twilio to Google map to Sabri. Also getting the app working with a team of two with only one developer.\nAccomplishments that I'm proud of\nTrying to attempt to solve major issues in today's world and making a kick ass app working!\nWhat I learned\nThe importance of having an amazing team!\nWhat's next for Avoid\nWe want to get access to secure data sources by governments on security alerts to let the public know of any imminent threats on the go.", 
    "project_name": "Avoid", 
    "project_tags": [
      "android", 
      "sabre", 
      "twilio", 
      "google-maps"
    ], 
    "project_url": "https://devpost.com/software/avoid"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nWe're at a Sabre Trave Hack, London's GayPride March is going past the window, and there's a realization that not everyone is as safe everywhere they travel\nHow it works\nYou register your destination, stereotrypes you may be identified with, and your side trip budget.\nYou can then create 'HeadsUp' messages about relevant events, both positive and negative, when you travel.\nWe use Twillio to send the messages to the relevant registrants by location and identity.\nWe also use your side trip budget to notify you of positive events that you could reach within your side trip budget.\nChallenges we ran into\nHow do we match up the right alerts with the right people?\nHow can we overcome the apps seemingly inescapable negativity of the app?\nHow do we create an income stream\nAccomplishments that we're proud of\nNot wasting time trying to harness the twitter storm\nRealising that this can be used to harness positive data as well as negative\nRealising that positive events can be used to sell travel to positive events.\nWhat we learned\nThe food at Sabre hack is actually quite healthy\nHarnessing the full potential of API's is not necessarily the work of a weekend\nThat having only one coder on the team places a heavy burden.\nWhat's next for TravelAlert\nWe're glad you asked; with the right industry partner, and an awful lot of hard work, this is an application that could deliver utility to both consumers and travel industry players.", 
    "project_name": "TravelAlert", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/travelalert"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nPersonal bad experiences when travelling and the need to have a unified complaining system to improve services for customers\nHow it works\nCustomer capture the bad travel service using his or her camera integrated in the app\nThe photo is downloaded inside the app with a brief text about the complain\nThe picture will appear directly inside a map\nCustomers and owners of the business can see the picture if they have the app and date of downloading \nThe app is divided into three sections:\n1- hotels\n2- airlines\n3- travel services such as insurance and rent a car\neach section got its own map on the map! \nTravel Businesses can improve their services through looking at the complains and the complain will be deleted when the business promise to resolve the complain\nWhat's next for ReView\nDevelopment process, Incubator, a team", 
    "project_name": "ReView", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/review"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nDoes it feel like you spend more time researching your travel plans than actually on holiday? Yes\nWhose advice and recommendations do you trust above all others? Friends and Family\nWho knows a place better than anyone else? A local\nWhen you combine these problems \u2013 the solution is Qurated, a travel app that gives you the best local recommendations for accommodation and activities from a local friend quickly and simply for you and your friends\nFrom an industry perspective we improve conversions by building trust early in the funnel.\nHow it works\n\n Enter your destination\n Choose your dates\n Send to friend using email or sms\n Your friend has a simple system to give you invaluable advice using their knowledge of their local area\n The user gets curated travel advice from a trusted local source quickly and simply\n\nChallenges I ran into\nOur primary challenge was connecting the different API\u2019s together into one simple product\nSecondly simplifying a big data issue using curation\nAccomplishments that I'm proud of\nCreating a simple interface for a complex back-end \nWhat I learned\nRunning simultaneous API\u2019s from different sources is possible to architect and can be integrated together\nWhat's next for Qurated\nOther accommodation and activity sources as API\u2019s become available,\nIntegrate Tripcase to make system even easier to use,\nPolish the UI,\nTesting \nMonetisation \nHotel commission model - approx. 5-15% / 20c-30c leadouts - well placed as high conversion / need scale\nActivities model - circa 10% - again friend recommendations lead to strong conversion\nTwilio - potential to charge users per request - price point between 5-10c - cover costs / depends on business model", 
    "project_name": "Qurated", 
    "project_tags": [
      "getyourguide", 
      "sabre", 
      "twilio", 
      "heroku", 
      "node.js", 
      "angular.js", 
      "sendgrid"
    ], 
    "project_url": "https://devpost.com/software/qurated"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nEnhance Customer Experience\nHow it works\nUser subscribes for push notifications.  Event like changes in Fare Changes, Flight Schedule, Flight Cancellation, Gate Change etc trigger the notification engine to send an automated alert to the user at his device.\nChallenges I ran into\nIntegrating with some of existing APIs. \nAccomplishments that I'm proud of\nRealtime Notification, Device agnostic, support for multi-platform, supports for most of modern browsers like Chrome and Safari, offline messaging, minimal dev cost for integration, enhances marketing capabilities, easy integration with API.\nWhat I learned\nUse of new and existing open source APIs. Google Cloud Platform.\nWhat's next for AirAware\nRealtime integration with Airlines and Travel Agency system, Build Recommendation System within Notification Engine that will handle Data Analytics and trigger notifications.", 
    "project_name": "AirAware", 
    "project_tags": [
      "java", 
      "spring", 
      "mysql", 
      "html5", 
      "google-cloud-messaging", 
      "google-app-engine"
    ], 
    "project_url": "https://devpost.com/software/airaware"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "", 
    "project_name": "HotelSplitter", 
    "project_tags": [
      "python", 
      "django", 
      "sublime-text", 
      "visual-studio", 
      "sabre"
    ], 
    "project_url": "https://devpost.com/software/hotelsplitter-oefvf"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration:\nAirlines are shifting to more and more paid ancillary services. Creating an itinerary that gives the end traveler freedom to choose and buy these services at their own convenience. \nHow it works:\nOnce a booking is finalized, agency sends the final itinerary (post ticketing) to the traveler.  Smart Itinerary is designed to display any paid ancillary service bookable at segment level. Customer click on the service he/she intends to avail. System confirms the service and accepts the payment through a payment gateway. Once payment is through, an EMD is issued and added to the itinerary with the respective service and emailed back to the customer.\nChallenges I ran into\nWanted to add more sponsors content unfortunately we had only limited knowledge of integration of REST APIS with .NET. \nAccomplishments that I'm proud of\nWhat I learned\nGot a good idea on the different sponsors API and how it can be used to enhance user experience\nWhat's next for Smart Itinerary:\nAdding more purchasable content along with destination information to enrich Smart Itinerary and turning it into an up-selling tool that would help agency sell even after they completed their sale.", 
    "project_name": "Smart Itinerary", 
    "project_tags": [
      "sabre", 
      "scribe", 
      "javascript", 
      "html5"
    ], 
    "project_url": "https://devpost.com/software/smart-itinerary"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nThe inspiration for this idea came from a dreaded 18 hour journey to Sydney where Nik spent \u00a3800 hoping that he would get a seat of his choice at that price, only to later find out that post booking they were no legroom seats available. \nHow it works\nThe user enters their flight search criteria, we then use the Sabre InstaFlightSearch to find the seats available (Note; we ran into issues, so we have cached this for now for one airline/trip) but we then do a live call to the SeatMap API from Sabre to get the seat information for that flight followed by doing a call to the SeatGuru API to get an overlay of the best possible seats. \nChallenges I ran into\nCurating the data from the InstaFlightSearch and using it as an overlay to see available seats in real time per leg of the journey. Purely because we didn't have enough time and wanted to focus on the combination of the SeatGuru API and SeatMap API for a specific journey\nAccomplishments that I'm proud of\nBieng able to combine both the SeatGuru API and SeatMap API and putting the fundamentals in place to use the InstaFlightSearch\nWhat I learned\nOne needs to focus on specific airlines, a lot of the airlines we did calls on the SeatMap API didn't return a response so we didn't get the seat information to help us find the best seat for the person requesting the journey. \nWhat's next for AirSeat - Finding you the best seat\nWe are going to look at seeing if we can re-visit the InstaFlightSearch, focussing on only airlines we know return a response from the SeatMap API together with focussing on airlines who offer specific seats for purchase (like emergency exit seats)", 
    "project_name": "AirSeat - Finding you the best seat", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/airseat"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "How it works\nSimply start typying the name of your favourite band, football team or theatre play and simple autosuggest will provide you list of matching results. You can select up to 12 events to search for. It's even simpler when you are music lover using last.fm. Simply click on the option, type your username and we'll get the list of your favourite bands.\nWe'll search for events you may like and list them showing earliest first. When you'll find something really interesting like last gig of your favourite band reunited after years or the most exciting football match of the season - don't wait any longer and simply click  TakeMeThere!\nNow, you can plan your journey or just use default settings suggested for your location and event destination. You can also let us find you the cheapest hotels near the event site. Select the one you like, fill in the reservation form and book complete travel. It's just that simple!\nWhat's next for TakeMeThere\nWe'd like to add more services (car transfers, car rentals) available for our clients with just one click to make their travel even more comfortable.", 
    "project_name": "TakeMeThere", 
    "project_tags": [
      "go", 
      "php", 
      "bootstrap", 
      "jquery", 
      "html", 
      "json", 
      "sabre", 
      "seatgeek", 
      "last.fm", 
      "expedia"
    ], 
    "project_url": "https://devpost.com/software/takemethere"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Sky Skout\nYou say when, we say where!\nSky Skout is the world's first travel discovery and booking service targeted towards students and young professionals looking for a spontaneous getaway. \"I just want to go somewhere cool and explore, easy and cheap, with my friends!\"", 
    "project_name": "Sky Skout", 
    "project_tags": [
      "ruby-on-rails", 
      "javascript", 
      "html5", 
      "css3", 
      "json", 
      "ajax", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/sky-skout"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nWe make creating life experiences easy.\nHow it works\nWe help travellers focus on creating their adventure, not the admin\nBy seamlessly generating the flights, activities and accommodation that match their budget and preferences \nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for Mavericks.", 
    "project_name": "Maverick.", 
    "project_tags": [
      "twilio", 
      "sabre", 
      "getyourguide"
    ], 
    "project_url": "https://devpost.com/software/mavericks"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Why\nMaking holidays safer\nInspiration\nMaking it easier to find safe places to go on holiday\nHow it works\nWe list all the top destinations from the sabre api and then match them with locations from GetYourGuide and the images provided. The use sentiment analysis to find out which destinations is the safest places and display the result to the user.\nSentiment Analysis - Extract live twitter feeds -> pass the feeds to HP Sentiment Analysis api. HP Sentiment Analysis returns back whether the tweets are positive or negative.\nChallenges I ran into\nLinking GetYourGuide api with Sabre API.\nAccomplishments that I'm proud of\nWorking in team.\nWhat I learned\nHow APIs are revolutionising modern travel\nWhat's next for Safe Destination\nImplement across all major platforms", 
    "project_name": "Safe Destinations", 
    "project_tags": [
      "android", 
      "java", 
      "javascript", 
      "sabre", 
      "getyourguide"
    ], 
    "project_url": "https://devpost.com/software/safe-destination"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nA friend of mine, a director at Warsaw University tried to book a travel for his 80 students. It took him few days of boring, manual work.\nHow it works\nOur scoring algorithm is makeing sure that all the travelers are accomodated in eitehr one hotel, or  two hotels nearby.\nChallenges I ran into\nHow to handle a booking form different destinationa nd how to find availability for group using existing API's\nAccomplishments that I'm proud of\nIt's quick and easy to do a group booking using our product.\nWhat I learned\nWhat's next for GroupExpert", 
    "project_name": "GroupExpert", 
    "project_tags": [
      "angular.js", 
      "node.js", 
      "php"
    ], 
    "project_url": "https://devpost.com/software/groupexpert"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Our company, Waynaut, has built a multimodal platform. Just an API, with no interface. \nWith WayDesk. we have decided to combine Waynaut and Sabre APIs to build an application for offline travel agents, which will allow them to offer their clients multimodal travel options.", 
    "project_name": "Waydesk", 
    "project_tags": [
      "java", 
      "restlet", 
      "bootstrap", 
      "backbone.js", 
      "javascript", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/waydesk"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nBaymax and TARS\nHow it works\nIT AI Baby \nChallenges I ran into\nTime shortage and partner API\nAccomplishments that I'm proud of\nfuzing api with AI\nWhat I learned\na lot\nWhat's next for baytar\na lot of things including enhancing search and funding", 
    "project_name": "baytar", 
    "project_tags": [
      "javascript", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/baytar"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nBritish holiday makers killed in a massacre by a gunman in Tunisia, after a bomb exploded at a Kuwaiti mosque and a man was beheaded in France - these event happened two days ago and we felt we need to do something for all tourists to be safe when travelling! And even when you are in a \"safe\" location, you can never be safe.\nHow it works\nIt is a platform from which you make a selection of either a country, city or an event that you want to check out. Using our algorithm and searching through social media feeds come up with a safety recommendation for you. Using this information you can make a much more informed decision to whether you want to go to places such as Tunisia or not. We have also linked AVOID to your smart-watch to track your heart rate and if any sudden changes occur, we send you a notification checking if everything is ok. If you are fine then you simply say yes to the notification. If not, press no and we will automatically call the emergency services and send your geo-location and help will be on its way!\nChallenges I ran into\nI struggled getting tons of APIs to work together from Twilio to Google map to Sabri. Also getting the app working with a team of two with only one developer.\nAccomplishments that I'm proud of\nTrying to attempt to solve major issues in today's world and making a kick ass app working!\nWhat I learned\nThe importance of having an amazing team!\nWhat's next for Avoid\nWe want to get access to secure data sources by governments on security alerts to let the public know of any imminent threats on the go.", 
    "project_name": "Avoid", 
    "project_tags": [
      "android", 
      "sabre", 
      "twilio", 
      "google-maps"
    ], 
    "project_url": "https://devpost.com/software/avoid"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nWe're at a Sabre Trave Hack, London's GayPride March is going past the window, and there's a realization that not everyone is as safe everywhere they travel\nHow it works\nYou register your destination, stereotrypes you may be identified with, and your side trip budget.\nYou can then create 'HeadsUp' messages about relevant events, both positive and negative, when you travel.\nWe use Twillio to send the messages to the relevant registrants by location and identity.\nWe also use your side trip budget to notify you of positive events that you could reach within your side trip budget.\nChallenges we ran into\nHow do we match up the right alerts with the right people?\nHow can we overcome the apps seemingly inescapable negativity of the app?\nHow do we create an income stream\nAccomplishments that we're proud of\nNot wasting time trying to harness the twitter storm\nRealising that this can be used to harness positive data as well as negative\nRealising that positive events can be used to sell travel to positive events.\nWhat we learned\nThe food at Sabre hack is actually quite healthy\nHarnessing the full potential of API's is not necessarily the work of a weekend\nThat having only one coder on the team places a heavy burden.\nWhat's next for TravelAlert\nWe're glad you asked; with the right industry partner, and an awful lot of hard work, this is an application that could deliver utility to both consumers and travel industry players.", 
    "project_name": "TravelAlert", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/travelalert"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nPersonal bad experiences when travelling and the need to have a unified complaining system to improve services for customers\nHow it works\nCustomer capture the bad travel service using his or her camera integrated in the app\nThe photo is downloaded inside the app with a brief text about the complain\nThe picture will appear directly inside a map\nCustomers and owners of the business can see the picture if they have the app and date of downloading \nThe app is divided into three sections:\n1- hotels\n2- airlines\n3- travel services such as insurance and rent a car\neach section got its own map on the map! \nTravel Businesses can improve their services through looking at the complains and the complain will be deleted when the business promise to resolve the complain\nWhat's next for ReView\nDevelopment process, Incubator, a team", 
    "project_name": "ReView", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/review"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nDoes it feel like you spend more time researching your travel plans than actually on holiday? Yes\nWhose advice and recommendations do you trust above all others? Friends and Family\nWho knows a place better than anyone else? A local\nWhen you combine these problems \u2013 the solution is Qurated, a travel app that gives you the best local recommendations for accommodation and activities from a local friend quickly and simply for you and your friends\nFrom an industry perspective we improve conversions by building trust early in the funnel.\nHow it works\n\n Enter your destination\n Choose your dates\n Send to friend using email or sms\n Your friend has a simple system to give you invaluable advice using their knowledge of their local area\n The user gets curated travel advice from a trusted local source quickly and simply\n\nChallenges I ran into\nOur primary challenge was connecting the different API\u2019s together into one simple product\nSecondly simplifying a big data issue using curation\nAccomplishments that I'm proud of\nCreating a simple interface for a complex back-end \nWhat I learned\nRunning simultaneous API\u2019s from different sources is possible to architect and can be integrated together\nWhat's next for Qurated\nOther accommodation and activity sources as API\u2019s become available,\nIntegrate Tripcase to make system even easier to use,\nPolish the UI,\nTesting \nMonetisation \nHotel commission model - approx. 5-15% / 20c-30c leadouts - well placed as high conversion / need scale\nActivities model - circa 10% - again friend recommendations lead to strong conversion\nTwilio - potential to charge users per request - price point between 5-10c - cover costs / depends on business model", 
    "project_name": "Qurated", 
    "project_tags": [
      "getyourguide", 
      "sabre", 
      "twilio", 
      "heroku", 
      "node.js", 
      "angular.js", 
      "sendgrid"
    ], 
    "project_url": "https://devpost.com/software/qurated"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "Inspiration\nEnhance Customer Experience\nHow it works\nUser subscribes for push notifications.  Event like changes in Fare Changes, Flight Schedule, Flight Cancellation, Gate Change etc trigger the notification engine to send an automated alert to the user at his device.\nChallenges I ran into\nIntegrating with some of existing APIs. \nAccomplishments that I'm proud of\nRealtime Notification, Device agnostic, support for multi-platform, supports for most of modern browsers like Chrome and Safari, offline messaging, minimal dev cost for integration, enhances marketing capabilities, easy integration with API.\nWhat I learned\nUse of new and existing open source APIs. Google Cloud Platform.\nWhat's next for AirAware\nRealtime integration with Airlines and Travel Agency system, Build Recommendation System within Notification Engine that will handle Data Analytics and trigger notifications.", 
    "project_name": "AirAware", 
    "project_tags": [
      "java", 
      "spring", 
      "mysql", 
      "html5", 
      "google-cloud-messaging", 
      "google-app-engine"
    ], 
    "project_url": "https://devpost.com/software/airaware"
  }, 
  {
    "hackathon_name": "Destination Hack: London", 
    "project_description": "", 
    "project_name": "HotelSplitter", 
    "project_tags": [
      "python", 
      "django", 
      "sublime-text", 
      "visual-studio", 
      "sabre"
    ], 
    "project_url": "https://devpost.com/software/hotelsplitter-oefvf"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "", 
    "project_name": "OculusDress and Side-Slash", 
    "project_tags": [
      "c++", 
      "opengl"
    ], 
    "project_url": "https://devpost.com/software/oculusdress-and-side-slash"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nBloomberg is a great financial tool, so we thought implementing it in a great financial game.\nHow it works\nThe game follows the classic monopoly rules with a Bloomberg twist.\nChallenges I ran into\nRunning multiple animations simultaneously. Multiplayer gaming experience was a challenge in the overall development of the game. \nAccomplishments that I'm proud of\nUsing real financial historical stock market data.\nWhat I learned\nTeam work is the most important asset in a contest/hackathon.\nWhat's next for Bloomopoly\nGlobal Hack Seoul.", 
    "project_name": "Bloomopoly", 
    "project_tags": [
      "javascript", 
      "socket.io", 
      "node.js", 
      "webgl", 
      "three.js", 
      "express.js", 
      "bloomberg", 
      "photoshop"
    ], 
    "project_url": "https://devpost.com/software/bloomopoly"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "ariel\nariel is a restricted Boltzmann machine based neural network which can be taught how to play music.\nInput/Output:\nariel uses parsed MIDI tracks as input and returns a fully legal MIDI track that can be loaded to any MIDI player. \nNeural network:\nThe implementation of the neural network is strongly based on the dnn library for node.js with a handful of additional hacks and tricks.", 
    "project_name": "ariel", 
    "project_tags": [
      "javascript", 
      "node.js"
    ], 
    "project_url": "https://devpost.com/software/ariel"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nBrainstorming led to this\nHow it works\nAn intricate back-end let's you receive condensed versions of your emails through text message. Not only will you stay connected to your important messages on-the-go, you will also be able to access sophisticated text analysis and visualisation on our front-end .\nChallenges I ran into\nImplementing the SendGrid API into our server environment and developing algorithms to condense the emails into still-readable text messages and perform the needed analysis.\nAccomplishments that I'm proud of\nNot sleeping for 48 hours and almost loosing our most important team-member.\nWhat I learned\nPractice makes perfect.\nWhat's next for EasyEmail\nThrough out bugs and make it available to the public.", 
    "project_name": "EasyEmail", 
    "project_tags": [
      "twilio", 
      "sendgrid", 
      "python", 
      "javascript", 
      "chart.js", 
      "postgresql"
    ], 
    "project_url": "https://devpost.com/software/easyemail-358ym"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nWe all love the Werewolf game don't we? Wouldn't it be better if it had sound effects and awesome photoshops of the MLH team?\nHow it works\nThe app run on one device for the Game Master, and on as many devices as needed for the participants (at least 6-8 recommended).\nChallenges we ran into\nIntegrating BrainTree, persuading Gradle to stop whining, keeping devices synced together via GCM.\nAccomplishments that we're proud of\nSpeedy communication via Google Cloud Messaging and push notifications; fully-functional RoR backend; well-built Android app, the sound effects.\nWhat's next for MLHorrors?\nMOOOOOOOOOOOOOOOO.", 
    "project_name": "MLHorrors", 
    "project_tags": [
      "android", 
      "ruby", 
      "ruby-on-rails", 
      "braintree"
    ], 
    "project_url": "https://devpost.com/software/mlhorrors"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "", 
    "project_name": "Love Letter", 
    "project_tags": [
      "java", 
      "parse", 
      "android"
    ], 
    "project_url": "https://devpost.com/software/guh-manchester"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Ticket machines require that you predict how long you will be staying in a car park for which can potentially be difficult and may lead to overpaying (bought 4 hours, only used 2) and fines (bought 2 hours, used 4).\nEPPA makes use of iBeacons to register when you arrive at and leave a parking lot.\nIt then calculates the amount of time you spent at the car-park, compares it to the rates and automatically charges you the correct amount as you leave.\nThe payment is made through use of the Braintree API.\nThe user connects their PayPal account to the system which then makes use of PayPal's one-click payment, allowing them to come and go with ease.", 
    "project_name": "EPPA (Electronic Payment Parking Assistant)", 
    "project_tags": [
      "braintree", 
      "estimote", 
      "ios", 
      "swift", 
      "objective-c", 
      "mysql"
    ], 
    "project_url": "https://devpost.com/software/electronic-payment-parking-assistant-eppa"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nPasswords. Uch, what a chore to remember them all. Who can remember the 7th letter of one of our dozens of passwords, and our old pet from 10 years ago? \nRemember no more! No longer do you need to remember what city you were born in! Just hum the Aria to your favourite classical work to log yourself in! Baroque tuning supported.\nHow it works\nUsing fast-fourier transforms and the magic of Javascript, we can detect the pitches you sing, and if they correspond to \nChallenges I ran into\nMy range isn't quite high enough for O Sole Mio\nWhat I learned\nA bit of German pronunciation\nWhat's next for https://github.com/magicmark/Aria", 
    "project_name": "Aria", 
    "project_tags": [
      "javascript", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/https-github-com-magicmark-aria"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nWe wanted to try and handle large amounts of data, from different sources, including the Bloomerg API.\nHow it works\nWe gather different data about the given company, for example: social media accounts, financial data and Twitter sentiment from Bloomberg, information from Wikipedia etc. This is done trough various apis using Flask(Python) for the backend. \nChallenges we ran into\nUpdating the python version on aws... it killed everything; learning to build chrome extensions, especially POST and GET requests; front end in general ... \nAccomplishments that we're proud of\nFinding data which is not that obvious to find and using it. Making that extension work.\nWhat we learned\nWell, managing data, a lot about both front and back end of web development. Getting data; making chrome extensions; making pretty graphs; \nWhat's next for TreeChart\nIntegrating a way to buy stocks trough the app, uploading the extension to Google.", 
    "project_name": "TreeChart", 
    "project_tags": [
      "bloomberg", 
      "flask", 
      "python", 
      "html5", 
      "css3", 
      "javascript", 
      "vim", 
      "amazon-web-services"
    ], 
    "project_url": "https://devpost.com/software/treechart"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nWe wanted to create an app that everybody would like to play, and what is more enjoyable than Monopoly? So we took Monopoly as our inspiration. \nAlso, we decided to use some of the most popular games of N64 as our properties because everybody loves old school video games!\nRules\n-Objective: To be the most wealthy player in the game by buying, selling and renting their properties. \n-Participants: 2 to 6 players. \n-Money: Each player will receive a total amount of \u00a31500\n-The bet: To be able to play the game, every player is going to be asked to set a bet of minimum \u00a35 using a Pay Pal account. The player that wins the game, will receive the total amount of money in their Pay Pal account.\nIf a player leaves earlier the game, he/she will not lose any of their money.\n-The game: The player that creates the game (the host) is going to be always the one that starts the play. The next player to play is going to be the first one that joins the game, the third player is going to be the second one that joins the game and so on. Everybody will start the game on the corner marked \u201cGO\u201d, then you will have to tap the button \u201cRoll die\u201d to know which is going to be your next position. \nYou are allowed to buy \u201cproperties\u201d or \u201csponsors\u201d from your first go.\n-Go: Each time a player lands on or passes over \u201cGO\u201d, the bank will play him/her \u00a320.\nBaying a property: Whenever you land on an unowned property or sponsor, you will have the   option  to buy it from the Bank in the price showed on the screen. \n-Paying rent: Whenever you land on a property/sponsor owned by another player, the owner will  collect rent from you in accordance with the price printed on the property\u2019s card.\n-Jail: You land on \u201cJail\u201d whenever you landed on the space marked \u201cGo to Jail\u201d. When you are sent to Jail, you are not able to collect your \u00a320 salary that you usually receive from \u201cGo\u201d.\nYou get out of Jail either by (1) staying there for 3 complete turns and being free in your 4th  turn or by (2) paying \u00a350 to the bank.  If you land in Jail in the ordinary course of the game, you are \u201cjust visiting\u201d so you incur no penalty and you are free to leave in your next turn.\n-Free parking & arrows in the board: When a player lands on this places, he/she doesn\u2019t receive  any reward of any kind. Is just a free resting place.\n-Bankruptcy: A player is declared bankrupt if he/she owes more than he/she can pay.", 
    "project_name": "Retropolys", 
    "project_tags": [
      "android", 
      "adobe-illustrator", 
      "trello"
    ], 
    "project_url": "https://devpost.com/software/retropolis"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nBring the spirit of hackathons to people around the world.\nHow it works\nSail the goods, people and swag with MLP certified Hackaship around the world to Great Uni Hack. Learn about hackathon logistics and be fuel efficient.\nChallenges I ran into\nLots. Game graphics and physics with Phaser IO. Bloomberg API integration and find the right security tickers. PayPal Braintree API integration.\nAccomplishments that I'm proud of\n8-bit retro game with a modern Major League Packing (MLP) ship and goods pricing from Bloomberg.\nWhat I learned\nMany many things! Creating a game with Phaser framework. Using Node and Express server with Mongo DB. Integrating Bloomberg API in Node. And creating Braintree payment integration for game payment, like in the Arcade! \nWhat's next for great-uni-hack\nImprove game play. Different missions. More goods to pick up. Time-dependent fuel pricing.", 
    "project_name": "Hackaship", 
    "project_tags": [
      "javascript", 
      "html", 
      "css", 
      "bloomberg", 
      "phaser.js", 
      "node.js", 
      "express.js", 
      "mongodb", 
      "braintree", 
      "jade", 
      "photoshop"
    ], 
    "project_url": "https://devpost.com/software/great-uni-hack"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nWe wanted to provide a way for friends to bet and wager with each other informally but on a virtual platform.\nHow it works\nWe created a web-application using HTML, CSS, PHP and MySQL which uses Bootstrap's responsive interface to match the screen size of any device. It works by creating an account and making a bet, where you define the parameters for the bet; i.e. real or fake currency and what the betting statement is. The bet information will be stored in the MySQL database and will by importing into a table which the user can see. The aim is for friends to be invited and bet against each other, where the bet creater acts as a referee and decides the winner(s).\nChallenges I ran into\nOur team was of 4 people, 2 front-end and 2 back-end. However, as of Saturday our team only consisted of 2 people - the front-end developers. This means we have all the pages of the site designed, with working popups and features. However, we have the functionality lacking in the website, due to the lack of back-end developers during this process. \nThis is probably the biggest challenge myself and my colleague faced, as we had to take upon a greater role of writing MySQL code, which was foreign to both of us.\nAccomplishments that I'm proud of\nWe were proud to produce something we visualised in our minds, to make the website look the way we want without compromise.\nWhat I learned\nI learned that I should know back-end technologies as much as I do front-end, so I do not have to rely on other people.\nWhat's next for CronyBet\nWe hope to finish and implement the features we had planned, which include a link to facebook and a real currency (using brain-tree)", 
    "project_name": "CronyBet", 
    "project_tags": [
      "bootstrap", 
      "javascript", 
      "php5", 
      "html5", 
      "mysql"
    ], 
    "project_url": "https://devpost.com/software/cronybet"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nWe all like games and we all missed the thrill of the old roguelike dungeon crawlers so we said we could make it ourselv\nHow it works\nWe build it in Unity for Multiplatform Support, we had sprites done in illustrator and sounds in FLStudios.\nChallenges I ran into\nWe didn't know any of the technologies we used. \nAccomplishments that I'm proud of\nLearned new stuff.\nWhat I learned\nunity\nWhat's next for Dungeon Master\nwe'll try to develop it and put it on steam", 
    "project_name": "Dungeon Master", 
    "project_tags": [
      "unity"
    ], 
    "project_url": "https://devpost.com/software/dungeon-master-puju0"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nStock market prices shouldn't be boring.\nHow it works\nMrDuck shows you the past values of a chosen index and you have to determine if its going to increase or decrease on the next tick. Desktop application uses Java and Swing. The hardware feedback is provided by an Arduino and other salvaged hardware.\nChallenges we ran into\nHardware setup and concept changed midway because of laser failure.  \nAccomplishments that I'm proud of\nMaking a controlled shocked device.\nWhat I learned\nLots of useful hardware experience and the ability to improvise with limited resources.\nWhat's next for MrDuck\nMaybe make it a complete trading trainer...", 
    "project_name": "MrDuck", 
    "project_tags": [
      "java", 
      "c++", 
      "arduino", 
      "bloomberg", 
      "servo"
    ], 
    "project_url": "https://devpost.com/software/mrduck"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nThe desire for appealing visuals.\nHow it works\nUsing leap motion, take the roll, pitch, yaw and height of a hand, then use these to choose the colours of strings and output them as you manipulate them.\nChallenges I ran into\nNew language and new hardware.\nAccomplishments that I'm proud of\nOvercame the challenges.\nWhat I learned\nI learned about node.js, and programming with leap motion.\nWhat's next for NodeShite\nLook into visual representation of more meaningful data, such as data from muse headsets and using leap motion for other things, such as game controllers.", 
    "project_name": "NodeShite", 
    "project_tags": [
      "leap-motion"
    ], 
    "project_url": "https://devpost.com/software/nodeshite"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "all about them graphs\nbigger tile = more popular track\n>>>>    trendify.tk    <<<<", 
    "project_name": "Trendify", 
    "project_tags": [
      "javascript", 
      "html5", 
      "css3", 
      "python", 
      "json"
    ], 
    "project_url": "https://devpost.com/software/trendify"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nHow it works\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for LyRecks\n..", 
    "project_name": "LyRecks", 
    "project_tags": [
      "node.js", 
      "import.io", 
      "selenium", 
      "jade", 
      "ibm-watson"
    ], 
    "project_url": "https://devpost.com/software/lyrecks"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nWe are technology students and therefore we always want to have the latest gadgets but at the same time we are poor...\nHow it works\nIt is a fully functional smartwatch powered by a teensy 3.1 that can act as a standalone watch or, if connected to an android phone, it will also mirror the notifications and give you the ability to control your music. It even has a built in speaker and automatic lighting.\nChallenges I ran into\nThe chinese clone of the Nokia 3310 screen did not have the adequate libraries or documentation. Also arduino's serial communications is not made for long strings\nAccomplishments that I'm proud of\nIt works!!!!\nWhat I learned\ncode that is ugly but works is twice better than the most beautifully engineered code that does not work\nWhat's next for Clu Watch\nGive it a 3D printed case and a suitable battery to be a true smartwatch\nBOM\nTeensy 3.1: 18\u00a3\nNokia 3310 screen module: 5\u00a3\nBluetooth hc06 module: 6\u00a3\nAssorted components: 3\u00a3\nFuture battery and 3D printed case 4\u00a3", 
    "project_name": "Clu Watch", 
    "project_tags": [
      "arduino"
    ], 
    "project_url": "https://devpost.com/software/pea-watch"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nHow it works\nVideo processing in mobile phone with two camera webs connected with TCP socket.\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for WiEye", 
    "project_name": "WiEye", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/wieye"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nTerrible experiences of host-picked playlists at student parties. PyPly aims to democratise music selections at all parties, large and small.\nHow it works\nTwilio SMS talks to a Flask endpoint, passing received text messages on to a Python server running on LayerShift's Jelastic platform. These control SMS messages manipulate playlists stored in MariaDB, and pass messages onto a client application via a Redis based queue. This client application is what sits on the party hosts laptop - responsible for organising and playing back the top rated tracks via Spotify. Trello-based playlist display and Twilio based song preview mechanisms also interact with the server side component.\nChallenges I ran into\nLast minute changes to communications libraries (a switch from 0MQ to Redis with 6 hours to go!). Initial trouble with LayerShift platform, and the various APIs/technologies (most notably OAuth troubles, and an extremely basic Spotify desktop API) - many of which were completely new to the team. All this along with the usual sleep deprivation made for an 'interesting' 36 hours!\nAccomplishments that I'm proud of\nI feel very proud of the feature set we were able to put together in the time period, especially given the difficulties we faced. The breadth, and non-standard use of the APIs we chose presented an impressive challenge - and we are very pleased with our performance.\nWhat I learned\nImportance of focussing on core features, before branching out into 'stretch goals'. Coordination of individual work, to prevent overlap. \nWhat's next for PyPly\nCleanup of code base prior to hopeful release as open source project. Hopefully has a bright future at student parties for many years to come!", 
    "project_name": "PyPly", 
    "project_tags": [
      "flask", 
      "python", 
      "redis", 
      "applescript", 
      "trello", 
      "spotify", 
      "twilio", 
      "echo-nest", 
      "facebook", 
      "facebook-graph"
    ], 
    "project_url": "https://devpost.com/software/pyply"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nSome random inspiration.\nHow it works\nSome random things.\nChallenges I ran into\nSome random challanges.\nAccomplishments that I'm proud of\nMany random...\nWhat I learned\nA lot of random things\nWhat's next for Random Project\nMaybe some random improvements..", 
    "project_name": "Random Project", 
    "project_tags": [
      "java", 
      "leap-motion", 
      "sendgrid"
    ], 
    "project_url": "https://devpost.com/software/random-project"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nWe were all keen to work on drones and to control its movement with hand gestures. The android app was a way to utilize our skills to meet our objectives.\nHow it works\nThe shaking of the android device fires up the drone. Thereon, the device works as a joystick to control the movement and the elevation of the drone can be changed using the buttons on the application screen. \nChallenges I ran into\nThe drone was hard to work with mainly because after an hour and a half of charging it, the battery only lasted for less than 8 minutes. This meant that we could only test it a limited number of times, and had to be certain of our code. We couldnt afford to make careless mistakes. \nAccomplishments that I'm proud of\nWe are proud of how we have managed to control the drone. When we started working on it, the drones movements were unpredictable to say the least. \nWhat I learned\nWe learned to program without having the luxury to test as you please. In addition to this, we polished our understanding of android development. \nWhat's next for burrito\nMaybe more polishing and open source distribution.", 
    "project_name": "DroneControl", 
    "project_tags": [
      "android-studio"
    ], 
    "project_url": "https://devpost.com/software/burrito"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nThe Inspiration came from our desire of creating an e-commerce platform from which people can buy items, enhance their ability of taking risks and maybe have some fun.\nHow it works\nThe platform is based on an auction system. There are a number of 5 to 10 auctions a day during which Buckets of goods are bought. Out of a bucket you have details(description and photo) of only three of these the rest of them are unknow items or maybe the BIG DEAL! The Big Deal is announced in the morning but no one knows in which of the buckets it is.\nChallenges I ran into\nOne of the challenges that we run into was to estamblish the paypal payment system. Another problem was to think about a system that is not too risky and makes people want to bid even if there is a chance of losing money. This is why our current version is not the one that we started with.With out current version even if people lose money they always get something out of their trade.\nAccomplishments that I'm proud of\nWe are proud that we managed to create a easy to use platform with a straight forward design.\nWhat I learned\nI learned what is the main process of developing a paypal payment system, how to estamblish a layershift server, how to work on git different branches without affecting the master branch, what bloomberg is and how to play warewolf.\nWhat's next for TradeIt\nWe are thinking of going further with the development, build dynamic auction rooms, implement esential features, think about who could provide the goods that are used (external vendors or find finances to buy our own goods).\nP.S.: Our application is using the LayerShift and Brain-Tree services.", 
    "project_name": "TradeIt", 
    "project_tags": [
      "javascript", 
      "php", 
      "braintree", 
      "css", 
      "html", 
      "mysql", 
      "google"
    ], 
    "project_url": "https://devpost.com/software/tradeit"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "When I was little, I was told you get hiccups because someone is thinking about you. Turns out - not true. However, we decided to make it possible. No, not hiccups, we let you know when we have been thinking about you. \nWe use Muse headband and three different phone owners to send individual yo's. Yes, it's like magic.", 
    "project_name": "Hiccups", 
    "project_tags": [
      "yo", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/hiccups"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nMostly just figured that it wouldn't be hard to make a guitar hero esq application for android\nHow it works\nit plays media from the android device and visualizes the data in a lower quality so that a sound wave can be created and can be tracked \nChallenges I ran into\naligning the screen for multiple devices \nAccomplishments that I'm proud of\nfinishing the project\nWhat I learned\nI learned a lot about Android dev and exactly how to use activities well and a good deal about the pros and cons of pair programming \nWhat's next for LineTracer\nHuge buttons, and generating \"maps \" for pre generation", 
    "project_name": "LineTracer", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/linetracer"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nThere wasn't any inspiration, we just wanted to have fun and make a game\nTeam of 3 - Josh Dawes, Arjun Mistry, Hugh Williams\nHow it works\nThe game starts you at an entrance, with the aim to collect keycards to safetly exit the maze at the exit point. The player can collect battery packs which they can use to later buy perks.\nChallenges I ran into\nThis was originally going to be a multiplayer game, where each player explores the map, gets their keycard then progresses to the next stage, however, due to having to keep track of movable objects we were unable to complete this task.\nAccomplishments that I'm proud of\nRandom map generation and World Map/ Fog of War system.\nWhat I learned\nWhat's next for Get Out Of Here\nMultiplayer ;)", 
    "project_name": "Get Out Of Here", 
    "project_tags": [
      "java", 
      "javascript", 
      "php", 
      "css3", 
      "html5"
    ], 
    "project_url": "https://devpost.com/software/get-out-of-here-cx7lo"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nWe all love pokemon. So we decided to build a virtual environment where you can challenge your friends to pokemon battles. You can choose from a range of available pokemon and use a variety of different moves with a variety of animations.\nHow it works\nThe environment was developed by us throughout the hackathon. The pokemon were built from 3D models that we rigged and animated ourselves. The gameplay initiates when at least two Oculus rift users join the server. The users pick their pokemon and battle in VR.\nChallenges I ran into\nFor all of the team members, this was the first time to ever use Unity. Working with a tool that we did not quite know how to use was demanding. We also faced a challenge communicating information between users on unity. Many of us were also new to game development.\nAccomplishments that I'm proud of\nLearning Unity and Blender in less than 24 hours and achieving significant progress with both.\nWhat I learned\nGame development, Graphics and Design, Animations, P2P architectures.\nWhat's next for Pok\u00e9Battle\nHopefully we will expand it further to include a wider range of pokemon and moves that will allow the game to be as close as possible to the existing games. We are also looking forward to add voice recognition and motion capture for body movements.", 
    "project_name": "Pok\u00e9Battle", 
    "project_tags": [
      "unity", 
      "blender", 
      "javascript", 
      "oculus"
    ], 
    "project_url": "https://devpost.com/software/pokebattle"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\n*\nHow it works\nwith your imagination\nChallenges I ran into\n*\nAccomplishments that I'm proud of\n*\nWhat I learned\n*\nWhat's next for HypeMan\n*", 
    "project_name": "HypeMan", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/hypeman-the-ultimate-dj-simulator"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "We wanted to control things without an interface. Now we control a parrot drone with Muse headband. It's freaking magic. It also flips.", 
    "project_name": "Enchanted objects", 
    "project_tags": [
      "python", 
      "android", 
      "java", 
      "bluetooth"
    ], 
    "project_url": "https://devpost.com/software/enchanted-objects"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "MemeGrid\nAre you at an event? Would not you like to capture cool moments and create your own memes on the go!? YES!? \nThen MemeGrid is exactly what you need!!! \nHow it works\nNo need for the registration, the only tool you need is an e-mail client, just attach picture to the e-mail, add text and SEND! It will be live in seconds.", 
    "project_name": "MemeGrid", 
    "project_tags": [
      "sendgrid", 
      "jquery", 
      "php5", 
      "html", 
      "javascript", 
      "ajax", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/memegrid"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nWe all love challenges, and this seemed a bit challenging.\nHow it works\nStarting from a drawing program (paint, GIMP) and create the maze of your choice, then send it as a challenge to a friend through our email services and he will receive a link to the WEB App (the aMaze-ing game). The game itself is controlled by Leap motion. You move trough the maze with hand gestures and have to get from Start to End. \nChallenges I ran into\nMaking the Front and Back ends, configuring django, figuring out on how to configure flask as well.\nAccomplishments that I'm proud of\nWe are sending emails automatically, we have a donation page which has a form to send payment, working also with Paypal, We managed to get the Leap to take the right motions and work flawlessly.\nWhat I learned\nA lot about web programming\nWhat's next for aMaze\nGetting it popular and making it better.", 
    "project_name": "aMaze", 
    "project_tags": [
      "python", 
      "django", 
      "flask", 
      "braintree", 
      "html5", 
      "css3", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/amaze"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "", 
    "project_name": "BloomBird", 
    "project_tags": [
      "bloomberg", 
      "php", 
      "javascript", 
      "html5", 
      "css3", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/bloombird"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nBuild something with Linkit ONE development board.  Also try other things like API and services provided \nHow it works\nWhen it turns on it establishes a GSM connection and uses a LCD display to print out reports. then when the connection is established we can control the color of the LCD or let it play music. There is also a physical pin that when disconnected triggers a music to play. The only way to stop it is by paying trough Braintree.\nChallenges I ran into\nProgramming in arduino, Javascript, NodeJs, setting up local host, braintree and twilio. Making a nice box for it.\nAccomplishments that I'm proud of\nIt actually works. Learned so much that I can't believe it.\nWhat I learned\nArduino, setting up stuff, Node,Js, Javascript\nWhat's next for Sonic Rick\nIt will annoy as many people as possible :)", 
    "project_name": "Sonic Rick", 
    "project_tags": [
      "arduino", 
      "twilio", 
      "braintree", 
      "node.js", 
      "javascript", 
      "html5"
    ], 
    "project_url": "https://devpost.com/software/sonic-rick"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nManaging your contacts is difficult, especially when you meet someone new. Should you ask for a mobile phone? Email address? Or maybe Skype nickname? Whatever way you choose, you will still find yourself linking that person on more social media afterwards. Why not do it in one go with an easy-to-use app?\nWhat if you have to meet new people for business all the time? Then, your life turns into endless flow of business cards with no real structure and a simple way to organise it! Our app aims to become your electronic business card library and your business card on the go: search both your home and work contacts easily and have your business card with you wherever you go. Avoid the hassle with paper business cards!\nHow it works\nA person downloads an app and goes through a simple sign-up process that allows to add personal and work contacts like Facebook, LinkedIn etc. (only Email Address is implemented right now). Afterwards, the person takes a personal picture to be used for face recognition (in future, the Face Recognition library will be also filled up with profile images from added social networks). Ready to go!\nRecognising someone and adding a their contacts is as easy as taking a picture of that person!\nChallenges we ran into\nFace recognition doesn't really work well - different camera configurations, different lighting or even haircut and glasses screwed up the process. Thus, in the future, we need to add more reliable identification techniques like Fingerprint recognition (when the devices are equipped appropriately) with a fallback to techniques like NFC, Bluetooth or QR Code scanning.\nHaving a centralised server for all the functionality means that we can roll out updates and have total control over the core of our app. However, it also means that the app can't function offline or if the server goes down. Meanwhile, doing Face recognition on the device is difficult due to all the SDKs out there (some of which are limited to the processor chips, e.g., Snapdragon SDK).\nUsing Ionic and Cordova for making an app was a really good choice due to rapid view design process, but the framework sometimes behaves unexpectedly on the actual device. Lack of on-device JavaScript debugging makes development quite a horrifying process.\nAccomplishments that we're proud of\nWe were advised to have a look at Parse backend-as-a-service and it worked out really great for us. Our backend server is just a single file with less than 250 lines of code!\nDoing a complex app that interacts with a server, uses camera and Face recognition only by means of HTML5, CSS and JavaScript is exciting and is quite an accomplishment on its own. A couple of years ago we never could imagine using thick technology stack in such a way!\nWhat we learned\nWe had no prior experience in Ionic or Face recognition, so we learnt a great deal. We applied Ionic framework to bootstrap a simple cross-platform app really quickly. We discovered Parse - great alternative to managing your own database. We figured out the ins and outs of Face recognition with current technologies.\nWhat's next for Ice Breaker\nRefactoring! And lots of it! App in it's current state is very much a fragile prototype, so we need to improve it's code quality. Changing the app engine from Ionic to something like Xamarin.Forms (more native yet still cross-platform) will improve the performance and may give us a chance to use the some on-device Face recognition techniques.\nAdding more contact sources will always remain needed (especially right now, when we only have a single email) - integration with all the social networks like Facebook, Twitter, Google+ (for personal contacts) and LinkedIn (for work contacts) is crucial.\nWhat if you already have a collection of Business Cards? We could use Artificial Intelligence to smartly recognise your collection of paper Business Cards and automatically create an electronic entry with all the details (Name, Email, Age etc.)\nLimiting ourselves to Business Cards for people is quite boring! We could use the renowned iBeacon technology to implement Business Cards for Places. Why not add your favourite food place while you're there to keep track of latest updates and deals? :)", 
    "project_name": "Ice Breaker", 
    "project_tags": [
      "parse", 
      "html", 
      "html5", 
      "css", 
      "css3", 
      "javascript", 
      "php", 
      "android", 
      "ionic", 
      "apache", 
      "ios"
    ], 
    "project_url": "https://devpost.com/software/ice-breaker-p7ifk"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Karma\nKarma is an application aimed at funding charity driven projects, and bringing together and sharing resources within the sector.\nThe model of the site is based on building up Karma for your account, thereby increasing your visibility on the site, and increasing your reputation to other members.\nThe site is also aimed at Charity organisations, as a way to broadcast their projects, get funding from communities, and recruiting volunteers. Thus a karma based, reputation building social network would allow individuals to follow high profile individuals and/or charities, and apply to volunteer positions, both to the benefit of the charity organisations and the individual person.", 
    "project_name": "Karma", 
    "project_tags": [
      "python", 
      "html", 
      "java", 
      "android", 
      "flask"
    ], 
    "project_url": "https://devpost.com/software/ghu-hack"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nPlaying Pacman with a first-person view would be quite challenging. Not knowing how many enemies, where they could come from, and where the locations of the food items to collect would increase the difficulty level by a lot. \nHow it works\nThe game was created using Unity. First the stage or map is designed. Food items are then generated on the board along with the enemies (Pacman ghosts and a Slenderman!) which will kill you upon contact. Powerup items periodically spawn on the map which allows Pacman to eat its enemies if met while Pacman is powered up! Enemies will run away from Pacman when she is in this mode! Take advantage of it! Upon collection of all the food items on the map, you are victorious! \nChallenges I ran into\nAutomatically generating food items so that it is not generated within non-traversable space (Walls)\nDetection collision between game objects\nHow to correctly texture game objects\nAccomplishments that I'm proud of\nThe game works! Enemies kill Pacman upon contact, die if this happens when Pacman is powered up. Pacman wins if all the food items are successfully collected. A simple start and game over screen was also implemented to guide players on how to navigate in the game. \nWhat I learned\nMaking a simple game in Unity!\nWhat's next for Pacman Revisited\nPossibly a compass/radar function which helps guide players to where the remaining food items are\nPowerup items which let you detect nearby ghosts or sounds alarms \nMore levels", 
    "project_name": "Pacman Revisited", 
    "project_tags": [
      "unity", 
      "c#", 
      "photoshop"
    ], 
    "project_url": "https://devpost.com/software/pacman-revisited"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "How it works\nCloqi make it easy for you and your friends to keep track of all your expenses when you e.g. are going on holiday together. Each time someone have an expense it can be added to the app and in the end a list can be send out to those who have to transfer money. The app will of cause make sure that the least amount of transactions are needed.\nInspiration\nWell... I don't like Excel", 
    "project_name": "Cloqi", 
    "project_tags": [
      "android", 
      "sqlite", 
      "php", 
      "mysql"
    ], 
    "project_url": "https://devpost.com/software/cloqi"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nAs a part time job i often lost out on stolen tips so relished this opportunity to change lives... TipAdvisor is awesome\nHow it works\nBeacons detect the establishment you are in, Braintree then makes it easy to perform payments into the staff tip jar.\nChallenges I ran into\nFirst Hackathon, Android Studio and GitHub liked to collapse on us, Beacons had limited Android docs \nAccomplishments that I'm proud of\nGenuine sense of accomplishment with what we have created, It works and It is ready to use! \nWhat I learned\nHow to use Beacons, Braintree, Android Studio and the different style of coding a Hackathon demands\nWhat's next for TipAdvisor\nInteresting features to help us infer peoples opinions through tipping habits, gamification and basically the future is limitless.", 
    "project_name": "TipAdvisor", 
    "project_tags": [
      "android", 
      "android-studio", 
      "braintree", 
      "parse", 
      "estimote", 
      "azure", 
      "java", 
      ".net", 
      "c#"
    ], 
    "project_url": "https://devpost.com/software/tipadvisor"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "GreatUniHackProject is a project that helps local communities to improve. Members of community could report problems via website by uploading a picture of a problem (broken road, broken signalization, not working lights, etc.). From images we automatically extract the geolocation of the image. Managers of local community then can easily analyse these data by viewing images and heatmaps of the problems, react and fix them.", 
    "project_name": "eCitizen", 
    "project_tags": [
      "css", 
      "html", 
      "python", 
      "javascript", 
      "bootstrap", 
      "flask", 
      "sqlite", 
      "google-maps", 
      "sendgrid", 
      "braintree"
    ], 
    "project_url": "https://devpost.com/software/greatunihackproject"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Struggling to break the ice?\nWe've all experienced that moment when we spot a pretty girl/ hot guy and just don't know what to say? With IceBreaker, you are never left speechless - witty pickup lines at the flick of a wrist make sure you always have something to say! And if the conversation goes south, have a quick getaway with a fake phone call!\nFeatures: \n\nVast number of unique pickup lines\nWide variety of different conversation starters to match your style\nAuthentic looking phone call to getaway successfully\nSimple color scheme and UI\n\nHow it works\nshake it off \nWhat I learned\nit aint easy being cheesy\nWhat's next for IceBreaker\ngo to Alaska and break some ice", 
    "project_name": "IceBreaker", 
    "project_tags": [
      "android-studio", 
      "java", 
      "xml"
    ], 
    "project_url": "https://devpost.com/software/icebreaker-fzlaa"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nMostly just figured that it wouldn't be hard to make a guitar hero esq application for android\nHow it works\nit plays media from the android device and visualizes the data in a lower quality so that a sound wave can be created and can be tracked \nChallenges I ran into\naligning the screen for multiple devices \nAccomplishments that I'm proud of\nfinishing the project\nWhat I learned\nI learned a lot about Android dev and exactly how to use activities well and a good deal about the pros and cons of pair programming \nWhat's next for LineTracer\nHuge buttons, and generating \"maps \" for pre generation", 
    "project_name": "LineTracer", 
    "project_tags": [
      "java"
    ], 
    "project_url": "https://devpost.com/software/linetracer"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nThere wasn't any inspiration, we just wanted to have fun and make a game\nTeam of 3 - Josh Dawes, Arjun Mistry, Hugh Williams\nHow it works\nThe game starts you at an entrance, with the aim to collect keycards to safetly exit the maze at the exit point. The player can collect battery packs which they can use to later buy perks.\nChallenges I ran into\nThis was originally going to be a multiplayer game, where each player explores the map, gets their keycard then progresses to the next stage, however, due to having to keep track of movable objects we were unable to complete this task.\nAccomplishments that I'm proud of\nRandom map generation and World Map/ Fog of War system.\nWhat I learned\nWhat's next for Get Out Of Here\nMultiplayer ;)", 
    "project_name": "Get Out Of Here", 
    "project_tags": [
      "java", 
      "javascript", 
      "php", 
      "css3", 
      "html5"
    ], 
    "project_url": "https://devpost.com/software/get-out-of-here-cx7lo"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nWe all love pokemon. So we decided to build a virtual environment where you can challenge your friends to pokemon battles. You can choose from a range of available pokemon and use a variety of different moves with a variety of animations.\nHow it works\nThe environment was developed by us throughout the hackathon. The pokemon were built from 3D models that we rigged and animated ourselves. The gameplay initiates when at least two Oculus rift users join the server. The users pick their pokemon and battle in VR.\nChallenges I ran into\nFor all of the team members, this was the first time to ever use Unity. Working with a tool that we did not quite know how to use was demanding. We also faced a challenge communicating information between users on unity. Many of us were also new to game development.\nAccomplishments that I'm proud of\nLearning Unity and Blender in less than 24 hours and achieving significant progress with both.\nWhat I learned\nGame development, Graphics and Design, Animations, P2P architectures.\nWhat's next for Pok\u00e9Battle\nHopefully we will expand it further to include a wider range of pokemon and moves that will allow the game to be as close as possible to the existing games. We are also looking forward to add voice recognition and motion capture for body movements.", 
    "project_name": "Pok\u00e9Battle", 
    "project_tags": [
      "unity", 
      "blender", 
      "javascript", 
      "oculus"
    ], 
    "project_url": "https://devpost.com/software/pokebattle"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\n*\nHow it works\nwith your imagination\nChallenges I ran into\n*\nAccomplishments that I'm proud of\n*\nWhat I learned\n*\nWhat's next for HypeMan\n*", 
    "project_name": "HypeMan", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/hypeman-the-ultimate-dj-simulator"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "We wanted to control things without an interface. Now we control a parrot drone with Muse headband. It's freaking magic. It also flips.", 
    "project_name": "Enchanted objects", 
    "project_tags": [
      "python", 
      "android", 
      "java", 
      "bluetooth"
    ], 
    "project_url": "https://devpost.com/software/enchanted-objects"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "MemeGrid\nAre you at an event? Would not you like to capture cool moments and create your own memes on the go!? YES!? \nThen MemeGrid is exactly what you need!!! \nHow it works\nNo need for the registration, the only tool you need is an e-mail client, just attach picture to the e-mail, add text and SEND! It will be live in seconds.", 
    "project_name": "MemeGrid", 
    "project_tags": [
      "sendgrid", 
      "jquery", 
      "php5", 
      "html", 
      "javascript", 
      "ajax", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/memegrid"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nWe all love challenges, and this seemed a bit challenging.\nHow it works\nStarting from a drawing program (paint, GIMP) and create the maze of your choice, then send it as a challenge to a friend through our email services and he will receive a link to the WEB App (the aMaze-ing game). The game itself is controlled by Leap motion. You move trough the maze with hand gestures and have to get from Start to End. \nChallenges I ran into\nMaking the Front and Back ends, configuring django, figuring out on how to configure flask as well.\nAccomplishments that I'm proud of\nWe are sending emails automatically, we have a donation page which has a form to send payment, working also with Paypal, We managed to get the Leap to take the right motions and work flawlessly.\nWhat I learned\nA lot about web programming\nWhat's next for aMaze\nGetting it popular and making it better.", 
    "project_name": "aMaze", 
    "project_tags": [
      "python", 
      "django", 
      "flask", 
      "braintree", 
      "html5", 
      "css3", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/amaze"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "", 
    "project_name": "BloomBird", 
    "project_tags": [
      "bloomberg", 
      "php", 
      "javascript", 
      "html5", 
      "css3", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/bloombird"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nBuild something with Linkit ONE development board.  Also try other things like API and services provided \nHow it works\nWhen it turns on it establishes a GSM connection and uses a LCD display to print out reports. then when the connection is established we can control the color of the LCD or let it play music. There is also a physical pin that when disconnected triggers a music to play. The only way to stop it is by paying trough Braintree.\nChallenges I ran into\nProgramming in arduino, Javascript, NodeJs, setting up local host, braintree and twilio. Making a nice box for it.\nAccomplishments that I'm proud of\nIt actually works. Learned so much that I can't believe it.\nWhat I learned\nArduino, setting up stuff, Node,Js, Javascript\nWhat's next for Sonic Rick\nIt will annoy as many people as possible :)", 
    "project_name": "Sonic Rick", 
    "project_tags": [
      "arduino", 
      "twilio", 
      "braintree", 
      "node.js", 
      "javascript", 
      "html5"
    ], 
    "project_url": "https://devpost.com/software/sonic-rick"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nManaging your contacts is difficult, especially when you meet someone new. Should you ask for a mobile phone? Email address? Or maybe Skype nickname? Whatever way you choose, you will still find yourself linking that person on more social media afterwards. Why not do it in one go with an easy-to-use app?\nWhat if you have to meet new people for business all the time? Then, your life turns into endless flow of business cards with no real structure and a simple way to organise it! Our app aims to become your electronic business card library and your business card on the go: search both your home and work contacts easily and have your business card with you wherever you go. Avoid the hassle with paper business cards!\nHow it works\nA person downloads an app and goes through a simple sign-up process that allows to add personal and work contacts like Facebook, LinkedIn etc. (only Email Address is implemented right now). Afterwards, the person takes a personal picture to be used for face recognition (in future, the Face Recognition library will be also filled up with profile images from added social networks). Ready to go!\nRecognising someone and adding a their contacts is as easy as taking a picture of that person!\nChallenges we ran into\nFace recognition doesn't really work well - different camera configurations, different lighting or even haircut and glasses screwed up the process. Thus, in the future, we need to add more reliable identification techniques like Fingerprint recognition (when the devices are equipped appropriately) with a fallback to techniques like NFC, Bluetooth or QR Code scanning.\nHaving a centralised server for all the functionality means that we can roll out updates and have total control over the core of our app. However, it also means that the app can't function offline or if the server goes down. Meanwhile, doing Face recognition on the device is difficult due to all the SDKs out there (some of which are limited to the processor chips, e.g., Snapdragon SDK).\nUsing Ionic and Cordova for making an app was a really good choice due to rapid view design process, but the framework sometimes behaves unexpectedly on the actual device. Lack of on-device JavaScript debugging makes development quite a horrifying process.\nAccomplishments that we're proud of\nWe were advised to have a look at Parse backend-as-a-service and it worked out really great for us. Our backend server is just a single file with less than 250 lines of code!\nDoing a complex app that interacts with a server, uses camera and Face recognition only by means of HTML5, CSS and JavaScript is exciting and is quite an accomplishment on its own. A couple of years ago we never could imagine using thick technology stack in such a way!\nWhat we learned\nWe had no prior experience in Ionic or Face recognition, so we learnt a great deal. We applied Ionic framework to bootstrap a simple cross-platform app really quickly. We discovered Parse - great alternative to managing your own database. We figured out the ins and outs of Face recognition with current technologies.\nWhat's next for Ice Breaker\nRefactoring! And lots of it! App in it's current state is very much a fragile prototype, so we need to improve it's code quality. Changing the app engine from Ionic to something like Xamarin.Forms (more native yet still cross-platform) will improve the performance and may give us a chance to use the some on-device Face recognition techniques.\nAdding more contact sources will always remain needed (especially right now, when we only have a single email) - integration with all the social networks like Facebook, Twitter, Google+ (for personal contacts) and LinkedIn (for work contacts) is crucial.\nWhat if you already have a collection of Business Cards? We could use Artificial Intelligence to smartly recognise your collection of paper Business Cards and automatically create an electronic entry with all the details (Name, Email, Age etc.)\nLimiting ourselves to Business Cards for people is quite boring! We could use the renowned iBeacon technology to implement Business Cards for Places. Why not add your favourite food place while you're there to keep track of latest updates and deals? :)", 
    "project_name": "Ice Breaker", 
    "project_tags": [
      "parse", 
      "html", 
      "html5", 
      "css", 
      "css3", 
      "javascript", 
      "php", 
      "android", 
      "ionic", 
      "apache", 
      "ios"
    ], 
    "project_url": "https://devpost.com/software/ice-breaker-p7ifk"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Karma\nKarma is an application aimed at funding charity driven projects, and bringing together and sharing resources within the sector.\nThe model of the site is based on building up Karma for your account, thereby increasing your visibility on the site, and increasing your reputation to other members.\nThe site is also aimed at Charity organisations, as a way to broadcast their projects, get funding from communities, and recruiting volunteers. Thus a karma based, reputation building social network would allow individuals to follow high profile individuals and/or charities, and apply to volunteer positions, both to the benefit of the charity organisations and the individual person.", 
    "project_name": "Karma", 
    "project_tags": [
      "python", 
      "html", 
      "java", 
      "android", 
      "flask"
    ], 
    "project_url": "https://devpost.com/software/ghu-hack"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nPlaying Pacman with a first-person view would be quite challenging. Not knowing how many enemies, where they could come from, and where the locations of the food items to collect would increase the difficulty level by a lot. \nHow it works\nThe game was created using Unity. First the stage or map is designed. Food items are then generated on the board along with the enemies (Pacman ghosts and a Slenderman!) which will kill you upon contact. Powerup items periodically spawn on the map which allows Pacman to eat its enemies if met while Pacman is powered up! Enemies will run away from Pacman when she is in this mode! Take advantage of it! Upon collection of all the food items on the map, you are victorious! \nChallenges I ran into\nAutomatically generating food items so that it is not generated within non-traversable space (Walls)\nDetection collision between game objects\nHow to correctly texture game objects\nAccomplishments that I'm proud of\nThe game works! Enemies kill Pacman upon contact, die if this happens when Pacman is powered up. Pacman wins if all the food items are successfully collected. A simple start and game over screen was also implemented to guide players on how to navigate in the game. \nWhat I learned\nMaking a simple game in Unity!\nWhat's next for Pacman Revisited\nPossibly a compass/radar function which helps guide players to where the remaining food items are\nPowerup items which let you detect nearby ghosts or sounds alarms \nMore levels", 
    "project_name": "Pacman Revisited", 
    "project_tags": [
      "unity", 
      "c#", 
      "photoshop"
    ], 
    "project_url": "https://devpost.com/software/pacman-revisited"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "How it works\nCloqi make it easy for you and your friends to keep track of all your expenses when you e.g. are going on holiday together. Each time someone have an expense it can be added to the app and in the end a list can be send out to those who have to transfer money. The app will of cause make sure that the least amount of transactions are needed.\nInspiration\nWell... I don't like Excel", 
    "project_name": "Cloqi", 
    "project_tags": [
      "android", 
      "sqlite", 
      "php", 
      "mysql"
    ], 
    "project_url": "https://devpost.com/software/cloqi"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Inspiration\nAs a part time job i often lost out on stolen tips so relished this opportunity to change lives... TipAdvisor is awesome\nHow it works\nBeacons detect the establishment you are in, Braintree then makes it easy to perform payments into the staff tip jar.\nChallenges I ran into\nFirst Hackathon, Android Studio and GitHub liked to collapse on us, Beacons had limited Android docs \nAccomplishments that I'm proud of\nGenuine sense of accomplishment with what we have created, It works and It is ready to use! \nWhat I learned\nHow to use Beacons, Braintree, Android Studio and the different style of coding a Hackathon demands\nWhat's next for TipAdvisor\nInteresting features to help us infer peoples opinions through tipping habits, gamification and basically the future is limitless.", 
    "project_name": "TipAdvisor", 
    "project_tags": [
      "android", 
      "android-studio", 
      "braintree", 
      "parse", 
      "estimote", 
      "azure", 
      "java", 
      ".net", 
      "c#"
    ], 
    "project_url": "https://devpost.com/software/tipadvisor"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "GreatUniHackProject is a project that helps local communities to improve. Members of community could report problems via website by uploading a picture of a problem (broken road, broken signalization, not working lights, etc.). From images we automatically extract the geolocation of the image. Managers of local community then can easily analyse these data by viewing images and heatmaps of the problems, react and fix them.", 
    "project_name": "eCitizen", 
    "project_tags": [
      "css", 
      "html", 
      "python", 
      "javascript", 
      "bootstrap", 
      "flask", 
      "sqlite", 
      "google-maps", 
      "sendgrid", 
      "braintree"
    ], 
    "project_url": "https://devpost.com/software/greatunihackproject"
  }, 
  {
    "hackathon_name": "Great Uni Hackathon 2015", 
    "project_description": "Struggling to break the ice?\nWe've all experienced that moment when we spot a pretty girl/ hot guy and just don't know what to say? With IceBreaker, you are never left speechless - witty pickup lines at the flick of a wrist make sure you always have something to say! And if the conversation goes south, have a quick getaway with a fake phone call!\nFeatures: \n\nVast number of unique pickup lines\nWide variety of different conversation starters to match your style\nAuthentic looking phone call to getaway successfully\nSimple color scheme and UI\n\nHow it works\nshake it off \nWhat I learned\nit aint easy being cheesy\nWhat's next for IceBreaker\ngo to Alaska and break some ice", 
    "project_name": "IceBreaker", 
    "project_tags": [
      "android-studio", 
      "java", 
      "xml"
    ], 
    "project_url": "https://devpost.com/software/icebreaker-fzlaa"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "Inspiration\nThis was my first hackathon event, and I was immediately struck by how skilled and interested people were in tech. I love how hackathon events have recently exploded in popularity, but I think that promoting access to these events in super techy (but less advantaged) areas of Europe is important.\nHow it works\nI built a web crawler (Python, scrapy package) to get hackathon locations from the last 1.5 years from the hackerleague website. This didn't actually work out (curse dynamically loaded pages!), so I had to clean and regex some raw text data. Using R, I could visualise where hackathons are held across Europe and how often. \nNext, I wanted to build up a Europe-wide map of tech interest. I did this by mining tweets that had keywords such as \"hacking\", \"coding\", \"programming\" and \"analytics\" and visualising them on a map of Europe (the Twitter mining was done both using the arcgis/esi map tool and by building a Twitter bot in Python). This let me see where there exist populations of techy geeks, and allowed me to compare it to the distribution of hackathon events. \nFinally, using the arcgis tool, I could visualise economic prosperity across regions in Europe and also compare this to provision of hackathons.\nChallenges I ran into\nToo many to list. Most notable among these is the difficulty of web crawling dynamically loaded pages and the lack of documentation for fetching information from json format tweets in python. I had to use workaround solutions for both of these problems (good old data cleaning and regex in both cases). \nAccomplishments that I'm proud of\nI built my first ever web crawler, and my first ever Twitter bot! I did not actually think that I would have the time to teach myself these things and implement them within a day. Pleased with myself level: Kanye West.\nWhat I learned\nI mostly code in R, and typically only use Python for support tasks like restructuring weird data into nicer formats before I can upload it into a relational database. This project completely put me outside of my comfort zone and I've learned a lot.\nWhat's next for Hackathon data meta-analysis\nMost importantly, I need to figure out how to properly overlay the information sources so I can make prettier visualisations and analyse them quantitatively. Quantitative information would also allow us to track any effects of holding a hackathon in less catered to and advantaged areas (example sensationalist headline: \"holding a hackathon in a poorer area increases tech-related tweets by 400% for 1 month!\"). The twitter json result processing needs some serious love - this would involve using a proper json decoder rather than simple text mining. Also, the hackathon event data is probably quite incomplete and should be aggregated from multiple sources rather than just hackerleague.", 
    "project_name": "Hackathon data meta-analysis", 
    "project_tags": [
      "python", 
      "esri", 
      "twitter", 
      "r"
    ], 
    "project_url": "https://devpost.com/software/hackathon-data-meta-analysis"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "An app to make day to day life a little bit easier.\nUser can submit request for an item and queue payment for their friend to accept and buy their item using geofencing.", 
    "project_name": "Grapple", 
    "project_tags": [
      "python", 
      "flask", 
      "android", 
      "java", 
      "esri", 
      "braintree", 
      "paypal"
    ], 
    "project_url": "https://devpost.com/software/grapple"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "This season's MLH is all about flight. And we felt that MLH Launch wouldn't be complete without a fitting showcase from quadcopters. Nothing is more powerful than such an idea. Except an Apache helicopter. An Apache helicopter has machine guns AND missiles. It is an unbelievably impressive complement of weaponry, an absolute death machine.\nWe pushed our limits, and built something incredibly unique.\nIt all starts from a single text message from the audience. Transmitted through our Twilio servers, our Pebble lights up as a new request comes in! It's a request for more information on one of the Fortune 500 companies! Our pebble app hastily passes along the request to our backend, hammering away at the Bloomberg API, stripping it to it's core. This information is then passed to our friendly quadcopter \"Rekt\", who attempted to plot out the results on a graph. Alas, the tiny machine was simply too weak to carry the weight of the pen, and tumbled into the darkness.", 
    "project_name": "Rekt", 
    "project_tags": [
      "android", 
      "pebble", 
      "bloomberg", 
      "twilio", 
      "php", 
      "java", 
      "c"
    ], 
    "project_url": "https://devpost.com/software/artist"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "Inspiration\nWaiting too long for food\nHow it works\nScanning QR codes\nChallenges I ran into\nThere were difficulties integrating using remote database server on AWS. There were constant connection refusals, which we suspect are due to the IP range of the wi-fi available at the venue. It worked well through a VPN in the end, but again - not everyone of us could connect to it, which forced us to use a localhost database and synchronise manually.\nThe queuing system was made using polling through AJAX requests, which was difficult to code in general.\nAccomplishments that I'm proud of\nAt the outset we were pessimistic of our abilities to implement this. Integrating the APIs and taking it to the end felt like an achievement.\nWhat I learned\nLearned more about the security zones of AWS, in particular that the MySQL port should be open to all traffic.\nJavascript === vs == operator.\nWhat's next for deQR\nIt is possible to scan a QR code directly from a website, by having it access the phone's camera. Implementing this would free the users form relying on a QR scanner app.\nIntegrating with the twilio API in the future could allow us to send text messages to alert users of their turn. Currently we rely on them keeping the website open in their phone's browser.\nThe prices for jumping the queue are non-negotiable. It would be an improvement to have bidding on queue spots, as well as giving the merchant and queuers more information about the progress.", 
    "project_name": "deQR", 
    "project_tags": [
      "javascript", 
      "php5", 
      "git", 
      "bitbucket", 
      "mysql", 
      "amazon-web-services", 
      "ajax", 
      "braintree"
    ], 
    "project_url": "https://devpost.com/software/deqr"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "We were inspired by the Estimote beacons potential to revolutionise the customer experience of any shops.\nGeolocation and a mobile application developed for to boost user experience are what make BeaconCart the app of the future.", 
    "project_name": "BeaconCart", 
    "project_tags": [
      "swift", 
      "xcode", 
      "php"
    ], 
    "project_url": "https://devpost.com/software/beaconcart"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "Sarcasm detector using natural language processing!", 
    "project_name": "Sarcasm Detection as a Service", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/sarcasm-detection-as-a-service"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "Inspiration\nIt's a well known fact that not enough people turn out to vote, especially so with younger people. Therefore, we wanted to make a hack to make the process of getting the information you need to vote from start to finish simple, and be a pain in the arse to make you actually do so. \nHow it works\nSign up with your name, mobile number and postcode. You'll get a confirmation text, then be shown the election page. On the left, you'll see the candidates for the election, with relevant info and links. On the right, there's a map that shows you directions on how to get to your polling station.\nThen, on the hour every hour from 7am until 10pm when polls close, you'll get a text reminding you to vote... until you check in at the polling station with your phone using NFC. If you don't vote, you get rickrolled... shame on you.", 
    "project_name": "motivote.xyz", 
    "project_tags": [
      "amazon-web-services", 
      "twilio", 
      "esri"
    ], 
    "project_url": "https://devpost.com/software/motivote-xyz"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "Inspiration\nSandstorm - Darude\nHow it works\nCan convert any image to sound, and any .wav file to an image.\nIt is possible to query twitter for pictures and play these.", 
    "project_name": "SoundStorm", 
    "project_tags": [
      "java", 
      "twitter"
    ], 
    "project_url": "https://devpost.com/software/soundstorm"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "Inspiration\nProcessing big data involves many machines working together in a cluster. These can be expensive and hard to set up. HitHive allows website owners to use their site's visitors to complete map-reduce tasks and process large datasets while they're browsing your site. \nBloggers can make money with our platform without having to host visible advertisements. Academics and data scientists can use our platform to process data at a very low cost and none of the set-up pains.\nUsers no longer have to view ads to support the creation of the content they consume, and instead help scientists solve the world's most difficult problems. \nHow it works\nUsers of our service upload their map and reduce functions along with their dataset.  Once a payment is made, the user is given some generated javascript code to paste into their website. When people visit the website, their device will run this code and process small data chunks in the background using the provided functions.  We use python Flask with MySQL to host a restful api that allows browsers to retrieve and send back this data. Website viewers only get small portions of data at a time, which means they can view site content without any slowdown issues.  \nWhat's next for HitHive\nWe intend on expanding HitHive to provide a platform to replace online advertising and affiliate programs with a much more profitable solution for webmasters.", 
    "project_name": "HitHive", 
    "project_tags": [
      "javascript", 
      "python", 
      "flask", 
      "bootstrap", 
      "html", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/hithive"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "We have hacked the Braintree API to host a NoSQL database with capability to create unlimited documents, for completely free. We are abusing their custom fields on their customer object to store base58 encoded data. We have an API which allow you to allows any file type to be uploaded and downloaded.", 
    "project_name": "NoNoSQL", 
    "project_tags": [
      "braintree", 
      "flask", 
      "python"
    ], 
    "project_url": "https://devpost.com/software/nonosql"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "How it works\nMagic\nChallenges I ran into\nBloomberg/Twilio", 
    "project_name": "Stock Watch", 
    "project_tags": [
      "bloomberg", 
      "bootstrap", 
      "flask", 
      "python", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/stock-watch"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "", 
    "project_name": "Landing Ducks", 
    "project_tags": [
      "lua", 
      "python", 
      "love", 
      "bloomberg"
    ], 
    "project_url": "https://devpost.com/software/luaduckhunt"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "Inspiration\nNot all areas are safe. We want to help you avoid dangerous places. Helpful for tourists who are new to the area.\nHow it works\nThe app shows the map around you using ESRI API, and splits it into neighbourhoods. The criminal zones (red) differ in color from safe zones (blue).\nWhat's next for CrimeRadar\n\nClosest police stations and ambulances.\nPossibility to share your location data with emergency contacts.\nSOS call.\nAbility to report an incident.", 
    "project_name": "CrimeRadar", 
    "project_tags": [
      "android", 
      "esri", 
      "android-studio", 
      "uk-police"
    ], 
    "project_url": "https://devpost.com/software/crimeradar"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "Attempted to connect HTML based displays and animations to a pebble black and white developer model. \nCouldn't manage to develop an import environment beyond the existing Google directory for use with business templates in Pebble.js connected through a Blackberry Z10 and the Cloud-Pebble.  \nAlso ran into issue with long-term planning and the Brain Tree registration \"state\" for US Exclusive Developer/SME Clients. \nHow it works\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for Pebble Lunar Evaluation", 
    "project_name": "Pebble Lunar Evaluation", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/pebble-lunar-evaluation"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "We created an awesome network based LeapMotion Shooter. The goal is to gain the highest score possible in a limited time frame using your hand as your weapon.\nThe game consists of 5 round of 20 seconds each - but in the demonstration we will play a shorter game in the presentation.\nThe cards are typical playing cards, with one minor difference the Joker is implemented with Christiano's beautiful face using his awesome sophisticated Face-API.\nIt is a family friendly shooting game that you can play with your children - you don't shoot them, you shoot cards! (Gambling is bad kids!)\nTo sum it all up: Finally there is a well working LeapMotion game providing hours and hours of fun. (Or maybe minutes..)\nOne of our major features is the awesome spinning crosshair - the pinnacle of technical design.\nThe sky is the limit!\n....Aaaand we probably should mention what the hack is.\nWe use a Leap-Motion to point to a position on a screen, and shoot cards down. The aim is to get points!", 
    "project_name": "LeapShooter", 
    "project_tags": [
      "php", 
      "java", 
      "json", 
      "amazon-web-services", 
      "leap-motion"
    ], 
    "project_url": "https://devpost.com/software/leapmotion"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "The cost of cars\nYou can make an overall idea about the best car that you can buy\nGetting data from bloombergs API", 
    "project_name": "Fuel Price Prediction", 
    "project_tags": [
      "html", 
      "jquery", 
      "css"
    ], 
    "project_url": "https://devpost.com/software/fuel-price-prediction"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "Great Oculus Rift - Leap Motion - PayPal - Store created in Unity. Hand pick your item and add it too the virtual-reality basket. It almost works with Braintree API.", 
    "project_name": "Oculus-Leap-PayPal-Store", 
    "project_tags": [
      "oculus", 
      "leap-motion", 
      "c++", 
      "unity"
    ], 
    "project_url": "https://devpost.com/software/oculus-leap-paypal-store"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "Inspiration\nEsri's traffic accident analytics inspired an app that keeps you safer when you're out on the road. Joe Nash's application which took you through better lit streets was another source of our inspiration. \nHow it works\nSoteira finds your current location data (HTML5 Geolocation) and then sends it to a JavaScript method which finds a 5 mile radius around you. It then pulls the number of crime incidents in your proximity from police.data API, and displays this to you in the form of a plottable.js graph and a few colourful, useful graphics. \nDepending on the number of crimes in your area, Soteira will send you and or your emergency contact (e.g. a parent) a Cristiano warning through MMS by Twilio.\nChallenges I ran into\nAt first we wanted to make this an Android app which would continually pull your location and send out an MMS if you entered a \"bad\" location, but we have had limited experience with Android development and so decided to switch to a Web App. \nEsri was a great inspiration for our project, but we were unable to pull in relevant data for our project in this timeframe. \nAccomplishments that I'm proud of\nWe were able to use Twilio successfully for the first time, and several of our group members learned PHP. We're proud to have an App that can legitimately help people with real data, to possibly reassure worried parents and prevent some crime. \nAlso very happy to have implemented Cristiano's Face API\nWhat I learned\nPHP, Twilio, data.police API, bit of Android Development, Webapp Development, teamwork, sources of API \nWhat's next for Soteira\nWe look to expand the app to use Esri's traffic accident information. We also want to go further into analytics about types of crime to provide more feedback to the user, and potentially prevent and reduce crime as whole. Porting Soteira into an Android/iOS app is another possible goal.", 
    "project_name": "Soteira", 
    "project_tags": [
      "javascript", 
      "twilio", 
      "php", 
      "html", 
      "css", 
      "jquery"
    ], 
    "project_url": "https://devpost.com/software/soteira"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "Inspiration\nI was frustrated by the complexity of transferring a file between two computers. USB is a fiddle, Dropbox takes time to upload then download, Bittorrent-sync has a habit of not finding the other computer (and needs a long link to copy in the first place) and network shares require arduous setting up. I wanted something simpler, where you drag and drop, select a destination and press send. I succeeded in creating this kind of program.\nHow it works\nThe program automatically finds similar programs on the LAN, or if for whatever reason this doesn't happen quick enough you input the ipaddress in a better format of 2 or 3 short words. Inputting 'big dog eats' is quicker and easier to remember than inputting 192.168.10.72.\nAccomplishments that I'm proud of\nIt's blazing fast and fixes a problem I have in my daily life.\nIt's called what it is because you can send something quicker than you can same the name. Send fiiile.\nWhat I learned\nJava Swing looks horrible. #booyah\nWhat's next for Send Fiiile\nPolish. Will change to JavaFX maybe.\nSupport for multiple connected network interfaces.\nAdd ease of use functions, like remembering last few devices, or confirmation free transfer for even fewer clicks. \nAdding windows context menu options.", 
    "project_name": "Send Fiiile", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/send-fiiile"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "Inspiration\nsomething\nHow it works\nChallenges I ran into\nAccomplishments that I'm proud of\nWhat I learned\nWhat's next for Ask Me Anything", 
    "project_name": "Ask Me Anywhere", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/ask-me-anything"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "Inspiration\nEEG technology itself.\nHow it works\nMuse records electrical activity along wearers scalp. Our program \"tries\" to sonify different wavelengths of received frequencies.\nChallenges I ran into\nThe muse reference was not complete. EEG data is very difficult to interpret.\nAccomplishments that I'm proud of\nLearning bits and bobs about brainwaves\nWhat I learned\nCool stuff about brain waves\nWhat's next for \"Not Amused\"\nWe are interested in trying something similar with different-more accurate EEG scanner.", 
    "project_name": "Not Amused", 
    "project_tags": [
      "muse", 
      "processing"
    ], 
    "project_url": "https://devpost.com/software/amused"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "Inspiration\nbaelor.io\nHow it works\nrequests lyrics based on something from the taylor swift api\nChallenges I ran into\neverything\nAccomplishments that I'm proud of\nstuff\nWhat I learned\nwhy am i doing this\nWhat's next for Swiftsum\nmake it work", 
    "project_name": "Swiftsum", 
    "project_tags": [], 
    "project_url": "https://devpost.com/software/swiftsum"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "Inspiration\nWe just tried to make some stuff work that we didn't know how.\nHow it works\nyes\nChallenges I ran into\nRFL apis are shit\nAccomplishments that I'm proud of\nit works\nWhat I learned\na bit of arduino and other stuff\nWhat's next for Us2\nwedding", 
    "project_name": "Us3", 
    "project_tags": [
      "arduino"
    ], 
    "project_url": "https://devpost.com/software/us2"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "Inspiration\nFarmers have excess process that the supermarket won't take, so someone better had\nHow it works\nFarmers put up what they've got, you buy it and pick it up\nChallenges I ran into\nBreaking all the CSS by removing two lines\nAccomplishments that I'm proud of\nFixing the CSS by replacing the two lines\nWhat I learned\nDon't remove that line of CSS or it breaks\n(What I genuinely learned)\n\n(Integrating bower and rails)\n(Bloody stickyNavbar.js)\n(I hate CSS and JS)\n\nWhat's next for potago\nI dunno, the pub?", 
    "project_name": "potago", 
    "project_tags": [
      "esri", 
      "ruby-on-rails", 
      "ruby", 
      "javascript", 
      "braintree"
    ], 
    "project_url": "https://devpost.com/software/potago"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "We wanted to create something that was useful and used Twilio's APIs", 
    "project_name": "callmanageme", 
    "project_tags": [
      "python", 
      "django", 
      "bootstrap", 
      "twilio", 
      "html", 
      "css", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/callmanageme"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "It's literally just Chinese Whispers with Twilio.\nThere are three modes:\n\nAutopilot, with the standard Linux word file dictionary\nAutopilot, with Urban Dictionary\nInteractive, with players suggesting their own words", 
    "project_name": "Twilio Chinese Whispers", 
    "project_tags": [
      "twilio", 
      "bootstrap", 
      "jquery", 
      "php", 
      "html", 
      "css", 
      "javascript", 
      "json", 
      "digitalocean", 
      "kimono"
    ], 
    "project_url": "https://devpost.com/software/twilio-chinese-whispers"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "Login systems nowadays are too tedious for our daily lives and hence we created an easier way to access websites. And what better way to do that than our own gestures.\nWave interprets patterns of movement through your mobile device to generate a unique key, allowing you to log into your desired websites. Wave works with all of the most popular sites (Facebook, Google, Twitter etc. ), and gives incredibly consistent and accurate results.\nWave was tested extensively over the course of the weekend, and was designed to be extremely intuitive for new users to operate. Our backend team has also worked really hard to create a fast interface for user authentication.", 
    "project_name": "Wave", 
    "project_tags": [
      "node.js", 
      "socket.io", 
      "html5", 
      "css3", 
      "jquery", 
      "java", 
      "android"
    ], 
    "project_url": "https://devpost.com/software/wave-dtn7j"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "We wanted to create something that was useful and used Twilio's APIs", 
    "project_name": "callmanageme", 
    "project_tags": [
      "python", 
      "django", 
      "bootstrap", 
      "twilio", 
      "html", 
      "css", 
      "javascript"
    ], 
    "project_url": "https://devpost.com/software/callmanageme"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "It's literally just Chinese Whispers with Twilio.\nThere are three modes:\n\nAutopilot, with the standard Linux word file dictionary\nAutopilot, with Urban Dictionary\nInteractive, with players suggesting their own words", 
    "project_name": "Twilio Chinese Whispers", 
    "project_tags": [
      "twilio", 
      "bootstrap", 
      "jquery", 
      "php", 
      "html", 
      "css", 
      "javascript", 
      "json", 
      "digitalocean", 
      "kimono"
    ], 
    "project_url": "https://devpost.com/software/twilio-chinese-whispers"
  }, 
  {
    "hackathon_name": "MLH Landing", 
    "project_description": "Login systems nowadays are too tedious for our daily lives and hence we created an easier way to access websites. And what better way to do that than our own gestures.\nWave interprets patterns of movement through your mobile device to generate a unique key, allowing you to log into your desired websites. Wave works with all of the most popular sites (Facebook, Google, Twitter etc. ), and gives incredibly consistent and accurate results.\nWave was tested extensively over the course of the weekend, and was designed to be extremely intuitive for new users to operate. Our backend team has also worked really hard to create a fast interface for user authentication.", 
    "project_name": "Wave", 
    "project_tags": [
      "node.js", 
      "socket.io", 
      "html5", 
      "css3", 
      "jquery", 
      "java", 
      "android"
    ], 
    "project_url": "https://devpost.com/software/wave-dtn7j"
  }
]